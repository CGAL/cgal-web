# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  workflow_run:
    workflows: ["Receive_PR"]
    types:
      - completed
    
# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write
  pull-requests: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  Extract_Receive_Pr:
    runs-on: ubuntu-latest
    outputs:
      artifactid: ${{steps.artifactgh-pages.outputs.result}}
    if: >
      (github.event.workflow_run.event == 'pull_request' || github.event.workflow_run.event == 'push') &&
      github.event.workflow_run.conclusion == 'success'
    steps:
      - name: 'Download artifact github pages'
        uses: actions/github-script@v6
        id: artifactgh-pages
        with:
          script: |
            var artifacts = await github.rest.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "github-pages"
            })[0];
            var download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/github-pages.zip', Buffer.from(download.data));
            return matchArtifact.id
      - run: unzip github-pages.zip
      - run: |
          mkdir web-site
          tar -xvf artifact.tar -C web-site/
          pwd
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: web-site
  CommentPr:
    runs-on: ubuntu-latest
    needs: Extract_Receive_Pr
    if: >
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success'
    steps: 
        - name: getWorkflowId
          id: workflowid
          run: |
            curl "https://api.github.com/repos/SaillantNicolas/cgal-web/actions/artifacts/${{needs.Extract_Receive_Pr.outputs.artifactid}}" -o artifact.json
            echo "id=$(cat artifact.json | jq -r '.workflow_run.id')" >> $GITHUB_OUTPUT
        - name: getPrId
          id: prid
          run: |
            curl "https://api.github.com/repos/SaillantNicolas/cgal-web/actions/runs/${{ steps.workflowid.outputs.id }}" -o workflow.json
            echo "id=$(cat workflow.json | jq -r '.pull_requests[0].number')" >> $GITHUB_OUTPUT
        - name: Post address
          uses: actions/github-script@v6
          if: ${{ success()}}
          with:
           github-token: ${{ secrets.GITHUB_TOKEN }}
           script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.prid.outputs.id }},
              body: "The web-site is built. It will be available, after a few minutes, here: https://saillantnicolas.github.io/cgal-web/index.html"
            });
        - name: Post error
          uses: actions/github-script@v6
          if: ${{ failure()}}
          with:
           github-token: ${{ secrets.GITHUB_TOKEN }}
           script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.prid.outputs.id }},
              body: "There was an error while building the web-site"
            });

