<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>CGAL</title>
 <link href="http://www.cgal.org/" rel="self"/>
 <link href="http://www.cgal.org"/>
 <updated>2023-10-18T12:50:16+00:00</updated>
 <id>http://www.cgal.org</id>
 <author>
   <name>CGAL Editorial Board</name>
   <email>cgal-info@inria.fr</email>
 </author>

 
 <entry>
   <title>CGAL @ SIGGRAPH 2023</title>
   <link href="http://www.cgal.org/news/2023/07/31/siggraph-2023/"/>
   <updated>2023-07-31T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2023/07/31/siggraph-2023</id>
   <content type="html">
&lt;p&gt;You have an implementation of a geometric algorithm that you would like to contribute?
You want us to implement an algorithm that you learned about in the technical paper sessions?
You want to know more about the open source and the commercial licensing options for CGAL?
You want to present the problem you have to solve, in order to figure out if CGAL might be helpful for you?&lt;/p&gt;

&lt;p&gt;Visit the CGAL Project on Booth No. 745 at the exhibition of &lt;a href=&quot;http://s2023.siggraph.org/&quot;&gt;SIGGRAPH 2023&lt;/a&gt;,
Los Angeles USA, 28 July-1 August, 2019!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Three new CGAL releases</title>
   <link href="http://www.cgal.org/news/2023/07/28/three_new_releases/"/>
   <updated>2023-07-28T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2023/07/28/three_new_releases</id>
   <content type="html">
&lt;div&gt;
  &lt;p&gt;The CGAL Open Source Project is pleased to announce today three new releases:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;/2023/07/28/cgal5.4.5&quot;&gt;CGAL-5.4.5&lt;/a&gt; is the fifth and last bug-fix release for CGAL-5.4,&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/2023/07/28/cgal553&quot;&gt;CGAL-5.5.3&lt;/a&gt; is the third bug-fix release for CGAL-5.5, and&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/2023/07/28/cgal56&quot;&gt;CGAL-5.6&lt;/a&gt; is latest release of CGAL.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;The development of CGAL will then now on the future CGAL-6.0 (planned for December 2023), with bug-fixes regularly backported to the branches for CGAL-5.5.x and CGAL-5.6.x. CGAL-6.0 will be the first release of CGAL requiring C++17 or later. It will also support Qt6.&lt;/p&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.6 released</title>
   <link href="http://www.cgal.org/2023/07/28/cgal56/"/>
   <updated>2023-07-28T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2023/07/28/cgal56</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.6&quot;&gt;Download CGAL-5.6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/index.html&quot;&gt;CGAL-5.6 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.6 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2022/07/15/cgal55&quot;&gt;CGAL 5.5&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general-changes&quot;&gt;General Changes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Package-specific assertions, preconditions, and postconditions (such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_triangulation_assertion&lt;/code&gt;) have been removed. Corresponding CGAL-wide versions (such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_assertion&lt;/code&gt;) should be used instead.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;shape-detection-major-changes&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgShapeDetection&quot;&gt;Shape Detection&lt;/a&gt; (major changes)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The region growing part of the package have been reworked to fix design issues introduced with the handling of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceGraph&lt;/code&gt; models. In particular, the notion of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Item&lt;/code&gt; has been introduced to reference an element in the input range of elements. Region maps now operates on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Item&lt;/code&gt; and no longer on the value type of the input range.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update()&lt;/code&gt; in the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegionType&lt;/code&gt; now returns a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Boolean&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void&lt;/code&gt;, that is used inside the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Region_growing&lt;/code&gt; for detecting if the input conditions for the new region are satisfied. This change affects only user-defined types of regions.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The constructors of all models used together with the region growing algorithm now enable users to provide parameters through the &lt;a href=&quot;https://doc.cgal.org/5.6/BGL/group__bgl__namedparameters.html&quot;&gt;named parameters&lt;/a&gt; mechanism.&lt;/li&gt;
    &lt;li&gt;All fitting classes in the region growing framework are now using better versions of the region conditions, more precise and faster, including the correct normal orientations.&lt;/li&gt;
    &lt;li&gt;Added new models of the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegionType&lt;/code&gt; for getting linear regions in a set of 2D and 3D segments and on 2D and 3D polylines.&lt;/li&gt;
    &lt;li&gt;Added the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polyline_graph&lt;/code&gt; for extracting a set of polylines from a face graph, which splits this graph into a set of user-defined regions.&lt;/li&gt;
    &lt;li&gt;Added new shapes to the Region Growing algorithm on a point set: circles in 2D, spheres in 3D, and cylinders in 3D.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-straight-skeleton-and-polygon-offsetting-major-changes&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgStraightSkeleton2&quot;&gt;2D Straight Skeleton and Polygon Offsetting&lt;/a&gt; (major changes)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added weighted straight skeletons: weighted straight skeletons are a generalization of straight skeletons. Contour edges are assigned a positive weight, which can be understood as assigning a speed to the wavefront spawned from the contour edge.&lt;/li&gt;
    &lt;li&gt;Added straight skeleton extrusion: this CGAL package now implements the extrusion of weighted straight skeletons of polygons with holes. The output is a closed, combinatorially 2-manifold surface triangle mesh.
 See also the &lt;a href=&quot;https://www.cgal.org/2023/05/09/improved_straight_skeleton/&quot;&gt;news entry&lt;/a&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-linear-geometry-kernel&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgKernel23&quot;&gt;2D and 3D Linear Geometry Kernel&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the functor &lt;a href=&quot;https://doc.cgal.org/5.6/Kernel_23/classKernel_1_1CompareAngle__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CompareAngle_3&lt;/code&gt;&lt;/a&gt; to the concept &lt;a href=&quot;https://doc.cgal.org/5.6/Kernel_23/classKernel.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt;&lt;/a&gt; to compare an angle defined by three points to the cosinus of another angle.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;combinatorial-maps-generalized-maps-and-linear-cell-complex&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgCombinatorialMaps&quot;&gt;Combinatorial Maps&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgGeneralizedMaps&quot;&gt;Generalized Maps&lt;/a&gt;, and &lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgLinearCellComplex&quot;&gt;Linear Cell Complex&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a version that uses indices instead of handles as dart and attribute descriptors. As the indices are integers convertible from and to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::size_t&lt;/code&gt;, they can be used as index into vectors which store properties. To use the index version, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Use_index&lt;/code&gt; must be defined and be equal to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Tag_true&lt;/code&gt; in the item class.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;linear-cell-complex&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgLinearCellComplex&quot;&gt;Linear Cell Complex&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the class &lt;a href=&quot;https://doc.cgal.org/5.6/Linear_cell_complex/classCGAL_1_1Linear__cell__complex__incremental__builder__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Linear_cell_complex_incremental_builder_3&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgArrangementOnSurface2&quot;&gt;2D Arrangements&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Introduced an overload function template, namely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;draw(arr)&lt;/code&gt;, that renders arrangements based on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Basic_viewer_qt&lt;/code&gt; class template. As of now, only 2D arrangements on the plane induced by (i) segments, (ii) conics, and (iii) circular arcs or (linear) segments are supported.&lt;/li&gt;
    &lt;li&gt;Improved the traits class template that handles conics, namely &lt;a href=&quot;https://doc.cgal.org/5.6/Arrangement_on_surface_2/classCGAL_1_1Arr__conic__traits__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_conic_traits_2&lt;/code&gt;&lt;/a&gt;. This includes the following: 1. Fixed a couple of bugs and slightly optimized some functions. 2. Introduced functionality that approximates conics with polylines. (This is used to draw conic curves.) 3. &lt;strong&gt;Breaking change&lt;/strong&gt;: Changed the interface to generate conic curves. In the past, curves where generated directly using the constructors of the conic and x-monotone conic constructs. Now, they are constructed via function objects provided by the traits. This eliminates the constructions of temporary kernels. The old functionality is obsolete, but still supported for a limited number of versions. It depends on a static member function of the traits. In a future version this function will no longer be static, implying that the old functionality will no longer be supported.&lt;/li&gt;
    &lt;li&gt;Introduced functionality that approximates circular segments with polylines. (This is used to draw conic curves.)&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgPolygonMeshProcessing&quot;&gt;Polygon Mesh Processing&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;Added functions &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PkgPolygonMeshProcessingRef.html#ga50dcd2f6295f584d2e378b57290ae2af&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::region_growing_of_planes_on_faces()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PkgPolygonMeshProcessingRef.html#gac8e445730d718a2fc49604e865017d2e&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::detect_corners_of_regions()&lt;/code&gt;&lt;/a&gt;, which enable partitioning a mesh into planar regions using the region growing algorithm from the &lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgShapeDetection&quot;&gt;Shape Detection&lt;/a&gt; package.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added the functions &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PMP__meshing__grp.html#ga7fca6fa2db94560ab6d32e6a77fc35b6&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::remesh_planar_patches()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PMP__meshing__grp.html#ga0e6da479548199a5d82c3cf0ed36e8a0&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::remesh_almost_planar_patches()&lt;/code&gt;&lt;/a&gt;, which can be used to remesh patches of coplanar faces in a mesh.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PMP__meshing__grp.html#gaff62f9415d2fe96d1d3095351f156ced&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::surface_Delaunay_remeshing()&lt;/code&gt;&lt;/a&gt;, which can be used to remesh a surface triangle mesh using the Delaunay refinement algorithm from the &lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgMesh3&quot;&gt;3D Mesh Generation&lt;/a&gt; package.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PMP__geometric__repair__grp.html#ga48008d2b66de8a68a7068f29db15dad6&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::remove_almost_degenerate_faces()&lt;/code&gt;&lt;/a&gt;, which can be used to remove badly shaped triangles faces in a mesh.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added the functions &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PMP__intersection__grp.html#ga4909920dc48b8285e69feb845feb1e53&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::does_triangle_soup_self_intersect()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PMP__intersection__grp.html#ga1c5fee17bd0d92d5a2fba77ed94d4b4d&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::triangle_soup_self_intersections()&lt;/code&gt;&lt;/a&gt; to identify and report self-intersections in a triangle soup, similarly to existing functions on triangle meshes.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PMP__meshing__grp.html#ga8b7db6aa8c3e79526b594739ba926d82&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::triangulate_polygons()&lt;/code&gt;&lt;/a&gt;, which allows users to triangulate polygon soups.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added a named parameter to &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PMP__meshing__grp.html#ga57fa999abe8dc557003482444df2a189&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::smooth_shape()&lt;/code&gt;&lt;/a&gt; to disable the scaling, which otherwise aims to compensate volume loss during smoothing.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Deprecated the overloads of functions &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PMP__hole__filling__grp.html#ga3abdf2d0558822e85f060966b69cae98&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::triangulate_hole()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PMP__hole__filling__grp.html#ga9868fac4d9dca77462ad7828bc99d8a1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::triangulate_and_refine_hole()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PMP__hole__filling__grp.html#ga18eac756a8f8e5d5f73e645fd4e26cad&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::triangulate_refine_and_fair_hole()&lt;/code&gt;&lt;/a&gt; which have output iterators for vertices and faces as parameter. They are replaced by overloads with two additional named parameters.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-convex-hulls&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgConvexHull2&quot;&gt;2D Convex Hulls&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The concept &lt;a href=&quot;https://doc.cgal.org/5.6/Convex_hull_2/classConvexHullTraits__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConvexHullTraits_2&lt;/code&gt;&lt;/a&gt; no longer requires the functor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Less_signed_distance_to_line_2&lt;/code&gt;, but requires the functor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compare_signed_distance_to_line_2&lt;/code&gt; instead.&lt;/li&gt;
    &lt;li&gt;The long-deprecated classes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Convex_hull_projective_xy_traits_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Convex_hull_projective_xz_traits_2&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Convex_hull_projective_yz_traits_2&lt;/code&gt; have been removed. Users should use &lt;a href=&quot;https://doc.cgal.org/5.6/Kernel_23/classCGAL_1_1Projection__traits__xy__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projection_traits_xy_3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.6/Kernel_23/classCGAL_1_1Projection__traits__xz__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projection_traits_xz_3&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://doc.cgal.org/5.6/Kernel_23/classCGAL_1_1Projection__traits__yz__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projection_traits_yz_3&lt;/code&gt;&lt;/a&gt; instead.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgTriangulation2&quot;&gt;2D Triangulations&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.6/Triangulation_2/group__PkgTriangulation2Miscellaneous.html#ga0409755d0eb89100810230443a85e7eb&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::mark_domain_in_triangulation()&lt;/code&gt;&lt;/a&gt; to mark faces connected with non-constrained edges as inside of the domain based on the nesting level.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-conforming-triangulations-and-meshes&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgMesh2&quot;&gt;2D Conforming Triangulations and Meshes&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added new overloads to the function &lt;a href=&quot;https://doc.cgal.org/5.6/Mesh_2/group__PkgMesh2IO.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write_VTU()&lt;/code&gt;&lt;/a&gt;, with property maps for specifying the domain.&lt;/li&gt;
    &lt;li&gt;Deprecated usage of boost parameters in favor of function named parameters in &lt;a href=&quot;https://doc.cgal.org/5.6/Mesh_2/group__PkgMesh2Functions.html#gafeaf59d3fa014da287f8514913b38d05&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::lloyd_optimize_mesh_2()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;Deprecated two overloads of the function &lt;a href=&quot;https://doc.cgal.org/5.6/Mesh_2/group__PkgMesh2Functions.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;refine_Delaunay_mesh()&lt;/code&gt;&lt;/a&gt;, and replaced them with versions using function named parameters.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-hyperbolic-triangulations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgHyperbolicTriangulation2&quot;&gt;2D Hyperbolic Triangulations&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: the concept &lt;a href=&quot;https://doc.cgal.org/5.6/Hyperbolic_triangulation_2/classHyperbolicTriangulationFaceBase__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HyperbolicTriangulationFaceBase_2&lt;/code&gt;&lt;/a&gt; has been modified to better reflect the triangulation’s requirements and avoid a conflict with the requirements described by the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TriangulationDataStructure_2::Face&lt;/code&gt;. The model &lt;a href=&quot;https://doc.cgal.org/5.6/Hyperbolic_triangulation_2/classCGAL_1_1Hyperbolic__triangulation__face__base__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Hyperbolic_triangulation_face_base_2&lt;/code&gt;&lt;/a&gt; has been adapted correspondingly.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-simplicial-mesh-data-structure-new-package&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgSMDS3&quot;&gt;3D Simplicial Mesh Data Structure&lt;/a&gt; (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This new package wraps all the existing code that deals with a &lt;a href=&quot;https://doc.cgal.org/5.6/SMDS_3/classMeshComplex__3InTriangulation__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshComplex_3InTriangulation_3&lt;/code&gt;&lt;/a&gt; to describe 3D simplicial meshes, and makes the data structure independent from the &lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgMesh3&quot;&gt;tetrahedral mesh generation&lt;/a&gt; package.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;tetrahedral-remeshing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgTetrahedralRemeshing&quot;&gt;Tetrahedral Remeshing&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The template parameters of &lt;a href=&quot;https://doc.cgal.org/5.6/Tetrahedral_remeshing/group__PkgTetrahedralRemeshingClasses.html#ga7ef4f8c0c1ed715c34389ea4ee851a92&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Tetrahedral_remeshing::Remeshing_vertex_base_3&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.6/Tetrahedral_remeshing/classCGAL_1_1Tetrahedral__remeshing_1_1Remeshing__cell__base__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Tetrahedral_remeshing::Remeshing_cell_base_3&lt;/code&gt;&lt;/a&gt; have been modified.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgMesh3&quot;&gt;3D Mesh Generation&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added two new named parameters to the named constructor &lt;a href=&quot;https://doc.cgal.org/5.6/Mesh_3/classCGAL_1_1Labeled__mesh__domain__3.html#aec3f58e9883a8036a1b3e379df7d8fa9&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::create_labeled_image_mesh_domain()&lt;/code&gt;&lt;/a&gt; for automatic detection and protection of 1D-curves that lie at the intersection of three or more subdomains extracted from labeled images.&lt;/li&gt;
    &lt;li&gt;Added &lt;a href=&quot;https://doc.cgal.org/5.6/Mesh_3/structCGAL_1_1Sizing__field__with__aabb__tree.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Sizing_field_with_aabb_tree&lt;/code&gt;&lt;/a&gt;, a geometry-aware sizing field for feature edges in polyhedral domains.&lt;/li&gt;
    &lt;li&gt;Added new meshing criterion &lt;a href=&quot;https://doc.cgal.org/5.6/Mesh_3/classCGAL_1_1Mesh__criteria__3.html#a5f1c2649cb7ea346a3b6a2a8724b4df1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edge_min_size&lt;/code&gt;&lt;/a&gt; to avoid subdividing sharp edges that are shorter than a prescribed size bound.&lt;/li&gt;
    &lt;li&gt;Added new meshing criteria &lt;a href=&quot;https://doc.cgal.org/5.6/Mesh_3/classCGAL_1_1Mesh__criteria__3.html#a5f1c2649cb7ea346a3b6a2a8724b4df1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;facet_min_size&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.6/Mesh_3/classCGAL_1_1Mesh__criteria__3.html#a5f1c2649cb7ea346a3b6a2a8724b4df1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cell_min_size&lt;/code&gt;&lt;/a&gt; to prevent Delaunay refinement from creating simplices smaller than a prescribed bound.&lt;/li&gt;
    &lt;li&gt;Deprecated usage of boost parameters in favor of function named parameters.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-periodic-mesh-generation&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgPeriodic3Mesh3&quot;&gt;3D Periodic Mesh Generation&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Periodic Mesh Generation now supports non-cubic domains.&lt;/li&gt;
    &lt;li&gt;Deprecated usage of boost parameters in favor of function named parameters.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-simplification&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgSurfaceMeshSimplification&quot;&gt;Surface Mesh Simplification&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The stop predicates &lt;a href=&quot;https://doc.cgal.org/5.6/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1Count__stop__predicate.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Count_stop_predicate&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.6/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1Count__ratio__stop__predicate.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Count_ratio_stop_predicate&lt;/code&gt;&lt;/a&gt; are renamed to &lt;a href=&quot;https://doc.cgal.org/5.6/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1Edge__count__stop__predicate.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Edge_count_stop_predicate&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.6/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1Edge__count__ratio__stop__predicate.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Edge_count_ratio_stop_predicate&lt;/code&gt;&lt;/a&gt;. Older versions have been deprecated.&lt;/li&gt;
    &lt;li&gt;Introduced &lt;a href=&quot;https://doc.cgal.org/5.6/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1Face__count__stop__predicate.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Face_count_stop_predicate&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.6/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1Face__count__ratio__stop__predicate.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Face_count_ratio_stop_predicate&lt;/code&gt;&lt;/a&gt;, which can be used to stop the simplification algorithm based on a desired number of faces in the output, or a ratio between input and output face numbers.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-regularized-boolean-set-operations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgBooleanSetOperations2&quot;&gt;2D Regularized Boolean Set Operations&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Exposed all required member functions of the &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon/classGeneralPolygonWithHoles__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GeneralPolygonWithHoles_2&lt;/code&gt;&lt;/a&gt; concept (e.g., &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon/classGeneralPolygonWithHoles__2.html#a9f5f035047505a2ccab3e68770f51bc6&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clear_outer_boundary()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Polygon/classGeneralPolygonWithHoles__2.html#a2a507be648f127ac605da8c670ea2580&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clear_holes()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon/classGeneralPolygonWithHoles__2.html#a2ca4d9b43cc9216c1b2cdb080a915944&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clear()&lt;/code&gt;&lt;/a&gt; ).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;known-bug&quot;&gt;Known Bug&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;MSVC 2015 is still supported by this version of CGAL, but the feature &lt;em&gt;Segment Cell Iterator&lt;/em&gt; of the class &lt;a href=&quot;https://doc.cgal.org/5.6/Triangulation_3/classCGAL_1_1Triangulation__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_3&lt;/code&gt;&lt;/a&gt; does not compile with MSVC 2015.&lt;/li&gt;
  &lt;/ul&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.5.3 released</title>
   <link href="http://www.cgal.org/2023/07/28/cgal553/"/>
   <updated>2023-07-28T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2023/07/28/cgal553</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.5.3&quot;&gt;Download CGAL-5.5.3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.5.3/Manual/index.html&quot;&gt;CGAL-5.5.3 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.5.3 is a bug-fix release for &lt;a href=&quot;../../../../2022/07/15/cgal55&quot;&gt;CGAL 5.5&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2023/02/28/cgal552&quot;&gt;CGAL 5.5.2&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=sort%3Aupdated-desc+label%3AMerged_in_5.5.3+-label%3AMerged_in_5.5.2&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.4.5 released</title>
   <link href="http://www.cgal.org/2023/07/28/cgal5.4.5/"/>
   <updated>2023-07-28T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2023/07/28/cgal5.4.5</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.4.5&quot;&gt;Download CGAL-5.4.5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.4.5/Manual/index.html&quot;&gt;CGAL-5.4.5 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.4.5 is a bug-fix release for &lt;a href=&quot;../../../../2022/01/31/cgal54&quot;&gt;CGAL 5.4&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2023/02/28/cgal5.4.4/&quot;&gt;CGAL 5.4.4&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=label%3AMerged_in_5.4.5+-label%3AMerged_in_5.4.4&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New release 5.6 Beta 1</title>
   <link href="http://www.cgal.org/news/2023/06/13/new-release-cgal56-beta1/"/>
   <updated>2023-06-13T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2023/06/13/new-release-cgal56-beta1</id>
   <content type="html">
&lt;div&gt;
  &lt;p&gt;The CGAL Open Source Project is pleased to announce the &lt;a href=&quot;/2023/06/13/cgal56-beta1&quot;&gt;release 5.6 Beta 1&lt;/a&gt; of CGAL, the Computational Geometry Algorithms Library.&lt;/p&gt;

  &lt;p&gt;CGAL version 5.6 Beta 1 is a public testing release. It should provide a solid ground to report bugs that need to be tackled before the release of the final version of CGAL 5.6 in July 2023.&lt;/p&gt;

  &lt;p&gt;The development of CGAL will then now on the future CGAL-6.0 (planned for December 2023), with bug-fixes regularly backported to the branches for CGAL-5.5.x and CGAL-5.6.x. CGAL-6.0 will be the first release of CGAL requiring C++17 or later. It will also support Qt6.&lt;/p&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.6 beta1 released</title>
   <link href="http://www.cgal.org/2023/06/13/cgal56-beta1/"/>
   <updated>2023-06-13T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2023/06/13/cgal56-beta1</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.6-beta1&quot;&gt;Download CGAL-5.6-beta1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/index.html&quot;&gt;CGAL-5.6-beta1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.6 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2022/07/15/cgal55&quot;&gt;CGAL 5.5&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general-changes&quot;&gt;General Changes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Package-specific assertions, preconditions, and postconditions (such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_triangulation_assertion&lt;/code&gt;) have been removed. Corresponding CGAL-wide versions (such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_assertion&lt;/code&gt;) should be used instead.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;shape-detection-major-changes&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgShapeDetection&quot;&gt;Shape Detection&lt;/a&gt; (major changes)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The region growing part of the package have been reworked to fix design issues introduced with the handling of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceGraph&lt;/code&gt; models. In particular, the notion of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Item&lt;/code&gt; has been introduced to reference an element in the input range of elements. Region maps now operates on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Item&lt;/code&gt; and no longer on the value type of the input range.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update()&lt;/code&gt; in the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegionType&lt;/code&gt; now returns a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Boolean&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;void&lt;/code&gt;, that is used inside the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Region_growing&lt;/code&gt; for detecting if the input conditions for the new region are satisfied. This change affects only user-defined types of regions.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The constructors of all models used together with the region growing algorithm now enable users to provide parameters through the &lt;a href=&quot;https://doc.cgal.org/5.6/BGL/group__bgl__namedparameters.html&quot;&gt;named parameters&lt;/a&gt; mechanism.&lt;/li&gt;
    &lt;li&gt;All fitting classes in the region growing framework are now using better versions of the region conditions, more precise and faster, including the correct normal orientations.&lt;/li&gt;
    &lt;li&gt;Added new models of the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegionType&lt;/code&gt; for getting linear regions in a set of 2D and 3D segments and on 2D and 3D polylines.&lt;/li&gt;
    &lt;li&gt;Added the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polyline_graph&lt;/code&gt; for extracting a set of polylines from a face graph, which splits this graph into a set of user-defined regions.&lt;/li&gt;
    &lt;li&gt;Added new shapes to the Region Growing algorithm on a point set: circles in 2D, spheres in 3D, and cylinders in 3D.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-straight-skeleton-and-polygon-offsetting-major-changes&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgStraightSkeleton2&quot;&gt;2D Straight Skeleton and Polygon Offsetting&lt;/a&gt; (major changes)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added weighted straight skeletons: weighted straight skeletons are a generalization of straight skeletons. Contour edges are assigned a positive weight, which can be understood as assigning a speed to the wavefront spawned from the contour edge.&lt;/li&gt;
    &lt;li&gt;Added straight skeleton extrusion: this CGAL package now implements the extrusion of weighted straight skeletons of polygons with holes. The output is a closed, combinatorially 2-manifold surface triangle mesh.
 See also the &lt;a href=&quot;https://www.cgal.org/2023/05/09/improved_straight_skeleton/&quot;&gt;news entry&lt;/a&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-linear-geometry-kernel&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgKernel23&quot;&gt;2D and 3D Linear Geometry Kernel&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the functor &lt;a href=&quot;https://doc.cgal.org/5.6/Kernel_23/classKernel_1_1CompareAngle__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CompareAngle_3&lt;/code&gt;&lt;/a&gt; to the concept &lt;a href=&quot;https://doc.cgal.org/5.6/Kernel_23/classKernel.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt;&lt;/a&gt; to compare an angle defined by three points to the cosinus of another angle.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;combinatorial-maps-generalized-maps-and-linear-cell-complex&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgCombinatorialMaps&quot;&gt;Combinatorial Maps&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgGeneralizedMaps&quot;&gt;Generalized Maps&lt;/a&gt;, and &lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgLinearCellComplex&quot;&gt;Linear Cell Complex&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a version that uses indices instead of handles as dart and attribute descriptors. As the indices are integers convertible from and to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::size_t&lt;/code&gt;, they can be used as index into vectors which store properties. To use the index version, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Use_index&lt;/code&gt; must be defined and be equal to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Tag_true&lt;/code&gt; in the item class.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;linear-cell-complex&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgLinearCellComplex&quot;&gt;Linear Cell Complex&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the class &lt;a href=&quot;https://doc.cgal.org/5.6/Linear_cell_complex/classCGAL_1_1Linear__cell__complex__incremental__builder__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Linear_cell_complex_incremental_builder_3&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgArrangementOnSurface2&quot;&gt;2D Arrangements&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Introduced an overload function template, namely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;draw(arr)&lt;/code&gt;, that renders arrangements based on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Basic_viewer_qt&lt;/code&gt; class template. As of now, only 2D arrangements on the plane induced by (i) segments, (ii) conics, and (iii) circular arcs or (linear) segments are supported.&lt;/li&gt;
    &lt;li&gt;Improved the traits class template that handles conics, namely &lt;a href=&quot;https://doc.cgal.org/5.6/Arrangement_on_surface_2/classCGAL_1_1Arr__conic__traits__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_conic_traits_2&lt;/code&gt;&lt;/a&gt;. This includes the following: 1. Fixed a couple of bugs and slightly optimized some functions. 2. Introduced functionality that approximates conics with polylines. (This is used to draw conic curves.) 3. &lt;strong&gt;Breaking change&lt;/strong&gt;: Changed the interface to generate conic curves. In the past, curves where generated directly using the constructors of the conic and x-monotone conic constructs. Now, they are constructed via function objects provided by the traits. This eliminates the constructions of temporary kernels. The old functionality is obsolete, but still supported for a limited number of versions. It depends on a static member function of the traits. In a future version this function will no longer be static, implying that the old functionality will no longer be supported.&lt;/li&gt;
    &lt;li&gt;Introduced functionality that approximates circular segments with polylines. (This is used to draw conic curves.)&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgPolygonMeshProcessing&quot;&gt;Polygon Mesh Processing&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;Added functions &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PkgPolygonMeshProcessingRef.html#ga50dcd2f6295f584d2e378b57290ae2af&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::region_growing_of_planes_on_faces()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PkgPolygonMeshProcessingRef.html#gac8e445730d718a2fc49604e865017d2e&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::detect_corners_of_regions()&lt;/code&gt;&lt;/a&gt;, which enable partitioning a mesh into planar regions using the region growing algorithm from the &lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgShapeDetection&quot;&gt;Shape Detection&lt;/a&gt; package.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added the functions &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PMP__meshing__grp.html#ga7fca6fa2db94560ab6d32e6a77fc35b6&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::remesh_planar_patches()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PMP__meshing__grp.html#ga0e6da479548199a5d82c3cf0ed36e8a0&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::remesh_almost_planar_patches()&lt;/code&gt;&lt;/a&gt;, which can be used to remesh patches of coplanar faces in a mesh.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PMP__meshing__grp.html#gaff62f9415d2fe96d1d3095351f156ced&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::surface_Delaunay_remeshing()&lt;/code&gt;&lt;/a&gt;, which can be used to remesh a surface triangle mesh using the Delaunay refinement algorithm from the &lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgMesh3&quot;&gt;3D Mesh Generation&lt;/a&gt; package.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PMP__geometric__repair__grp.html#ga48008d2b66de8a68a7068f29db15dad6&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::remove_almost_degenerate_faces()&lt;/code&gt;&lt;/a&gt;, which can be used to remove badly shaped triangles faces in a mesh.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added the functions &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PMP__intersection__grp.html#ga4909920dc48b8285e69feb845feb1e53&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::does_triangle_soup_self_intersect()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PMP__intersection__grp.html#ga1c5fee17bd0d92d5a2fba77ed94d4b4d&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::triangle_soup_self_intersections()&lt;/code&gt;&lt;/a&gt; to identify and report self-intersections in a triangle soup, similarly to existing functions on triangle meshes.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PMP__meshing__grp.html#ga8b7db6aa8c3e79526b594739ba926d82&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::triangulate_polygons()&lt;/code&gt;&lt;/a&gt;, which allows users to triangulate polygon soups.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added a named parameter to &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PMP__meshing__grp.html#ga57fa999abe8dc557003482444df2a189&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::smooth_shape()&lt;/code&gt;&lt;/a&gt; to disable the scaling, which otherwise aims to compensate volume loss during smoothing.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Deprecated the overloads of functions &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PMP__hole__filling__grp.html#ga3abdf2d0558822e85f060966b69cae98&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::triangulate_hole()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PMP__hole__filling__grp.html#ga9868fac4d9dca77462ad7828bc99d8a1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::triangulate_and_refine_hole()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon_mesh_processing/group__PMP__hole__filling__grp.html#ga18eac756a8f8e5d5f73e645fd4e26cad&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::triangulate_refine_and_fair_hole()&lt;/code&gt;&lt;/a&gt; which have output iterators for vertices and faces as parameter. They are replaced by overloads with two additional named parameters.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-convex-hulls&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgConvexHull2&quot;&gt;2D Convex Hulls&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The concept &lt;a href=&quot;https://doc.cgal.org/5.6/Convex_hull_2/classConvexHullTraits__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConvexHullTraits_2&lt;/code&gt;&lt;/a&gt; no longer requires the functor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Less_signed_distance_to_line_2&lt;/code&gt;, but requires the functor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compare_signed_distance_to_line_2&lt;/code&gt; instead.&lt;/li&gt;
    &lt;li&gt;The long-deprecated classes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Convex_hull_projective_xy_traits_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Convex_hull_projective_xz_traits_2&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Convex_hull_projective_yz_traits_2&lt;/code&gt; have been removed. Users should use &lt;a href=&quot;https://doc.cgal.org/5.6/Kernel_23/classCGAL_1_1Projection__traits__xy__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projection_traits_xy_3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.6/Kernel_23/classCGAL_1_1Projection__traits__xz__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projection_traits_xz_3&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://doc.cgal.org/5.6/Kernel_23/classCGAL_1_1Projection__traits__yz__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projection_traits_yz_3&lt;/code&gt;&lt;/a&gt; instead.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgTriangulation2&quot;&gt;2D Triangulations&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.6/Triangulation_2/group__PkgTriangulation2Miscellaneous.html#ga0409755d0eb89100810230443a85e7eb&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::mark_domain_in_triangulation()&lt;/code&gt;&lt;/a&gt; to mark faces connected with non-constrained edges as inside of the domain based on the nesting level.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-conforming-triangulations-and-meshes&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgMesh2&quot;&gt;2D Conforming Triangulations and Meshes&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added new overloads to the function &lt;a href=&quot;https://doc.cgal.org/5.6/Mesh_2/group__PkgMesh2IO.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write_VTU()&lt;/code&gt;&lt;/a&gt;, with property maps for specifying the domain.&lt;/li&gt;
    &lt;li&gt;Deprecated usage of boost parameters in favor of function named parameters in &lt;a href=&quot;https://doc.cgal.org/5.6/Mesh_2/group__PkgMesh2Functions.html#gafeaf59d3fa014da287f8514913b38d05&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::lloyd_optimize_mesh_2()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;Deprecated two overloads of the function &lt;a href=&quot;https://doc.cgal.org/5.6/Mesh_2/group__PkgMesh2Functions.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;refine_Delaunay_mesh()&lt;/code&gt;&lt;/a&gt;, and replaced them with versions using function named parameters.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-hyperbolic-triangulations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgHyperbolicTriangulation2&quot;&gt;2D Hyperbolic Triangulations&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: the concept &lt;a href=&quot;https://doc.cgal.org/5.6/Hyperbolic_triangulation_2/classHyperbolicTriangulationFaceBase__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HyperbolicTriangulationFaceBase_2&lt;/code&gt;&lt;/a&gt; has been modified to better reflect the triangulation’s requirements and avoid a conflict with the requirements described by the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TriangulationDataStructure_2::Face&lt;/code&gt;. The model &lt;a href=&quot;https://doc.cgal.org/5.6/Hyperbolic_triangulation_2/classCGAL_1_1Hyperbolic__triangulation__face__base__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Hyperbolic_triangulation_face_base_2&lt;/code&gt;&lt;/a&gt; has been adapted correspondingly.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-simplicial-mesh-data-structure-new-package&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgSMDS3&quot;&gt;3D Simplicial Mesh Data Structure&lt;/a&gt; (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This new package wraps all the existing code that deals with a &lt;a href=&quot;https://doc.cgal.org/5.6/SMDS_3/classMeshComplex__3InTriangulation__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshComplex_3InTriangulation_3&lt;/code&gt;&lt;/a&gt; to describe 3D simplicial meshes, and makes the data structure independent from the &lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgMesh3&quot;&gt;tetrahedral mesh generation&lt;/a&gt; package.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgMesh3&quot;&gt;3D Mesh Generation&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added two new named parameters to the named constructor &lt;a href=&quot;https://doc.cgal.org/5.6/Mesh_3/classCGAL_1_1Labeled__mesh__domain__3.html#aec3f58e9883a8036a1b3e379df7d8fa9&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::create_labeled_image_mesh_domain()&lt;/code&gt;&lt;/a&gt; for automatic detection and protection of 1D-curves that lie at the intersection of three or more subdomains extracted from labeled images.&lt;/li&gt;
    &lt;li&gt;Added &lt;a href=&quot;https://doc.cgal.org/5.6/Mesh_3/structCGAL_1_1Sizing__field__with__aabb__tree.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Sizing_field_with_aabb_tree&lt;/code&gt;&lt;/a&gt;, a geometry-aware sizing field for feature edges in polyhedral domains.&lt;/li&gt;
    &lt;li&gt;Added new meshing criterion &lt;a href=&quot;https://doc.cgal.org/5.6/Mesh_3/classCGAL_1_1Mesh__criteria__3.html#a5f1c2649cb7ea346a3b6a2a8724b4df1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edge_min_size&lt;/code&gt;&lt;/a&gt; to avoid subdividing sharp edges that are shorter than a prescribed size bound.&lt;/li&gt;
    &lt;li&gt;Added new meshing criteria &lt;a href=&quot;https://doc.cgal.org/5.6/Mesh_3/classCGAL_1_1Mesh__criteria__3.html#a5f1c2649cb7ea346a3b6a2a8724b4df1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;facet_min_size&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.6/Mesh_3/classCGAL_1_1Mesh__criteria__3.html#a5f1c2649cb7ea346a3b6a2a8724b4df1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cell_min_size&lt;/code&gt;&lt;/a&gt; to prevent Delaunay refinement from creating simplices smaller than a prescribed bound.&lt;/li&gt;
    &lt;li&gt;Deprecated usage of boost parameters in favor of function named parameters.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-periodic-mesh-generation&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgPeriodic3Mesh3&quot;&gt;3D Periodic Mesh Generation&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Periodic Mesh Generation now supports non-cubic domains.&lt;/li&gt;
    &lt;li&gt;Deprecated usage of boost parameters in favor of function named parameters.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-simplification&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgSurfaceMeshSimplification&quot;&gt;Surface Mesh Simplification&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The stop predicates &lt;a href=&quot;https://doc.cgal.org/5.6/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1Count__stop__predicate.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Count_stop_predicate&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.6/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1Count__ratio__stop__predicate.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Count_ratio_stop_predicate&lt;/code&gt;&lt;/a&gt; are renamed to &lt;a href=&quot;https://doc.cgal.org/5.6/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1Edge__count__stop__predicate.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Edge_count_stop_predicate&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.6/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1Edge__count__ratio__stop__predicate.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Edge_count_ratio_stop_predicate&lt;/code&gt;&lt;/a&gt;. Older versions have been deprecated.&lt;/li&gt;
    &lt;li&gt;Introduced &lt;a href=&quot;https://doc.cgal.org/5.6/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1Face__count__stop__predicate.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Face_count_stop_predicate&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.6/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1Face__count__ratio__stop__predicate.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Face_count_ratio_stop_predicate&lt;/code&gt;&lt;/a&gt;, which can be used to stop the simplification algorithm based on a desired number of faces in the output, or a ratio between input and output face numbers.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-regularized-boolean-set-operations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgBooleanSetOperations2&quot;&gt;2D Regularized Boolean Set Operations&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Exposed all required member functions of the &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon/classGeneralPolygonWithHoles__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GeneralPolygonWithHoles_2&lt;/code&gt;&lt;/a&gt; concept (e.g., &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon/classGeneralPolygonWithHoles__2.html#a9f5f035047505a2ccab3e68770f51bc6&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clear_outer_boundary()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Polygon/classGeneralPolygonWithHoles__2.html#a2a507be648f127ac605da8c670ea2580&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clear_holes()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://doc.cgal.org/5.6/Polygon/classGeneralPolygonWithHoles__2.html#a2ca4d9b43cc9216c1b2cdb080a915944&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clear()&lt;/code&gt;&lt;/a&gt; ).&lt;/li&gt;
  &lt;/ul&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>New in CGAL: Weighted Straight Skeletons and Straight Skeleton Extrusion</title>
   <link href="http://www.cgal.org/2023/05/09/improved_straight_skeleton/"/>
   <updated>2023-05-09T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2023/05/09/improved_straight_skeleton</id>
   <content type="html">
&lt;h3&gt;&lt;a href=&quot;https://geometryfactory.com/who-we-are/&quot;&gt;Mael Rouxel-Labbé&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;a href=&quot;http://www.geometryfactory.com&quot; target=&quot;_blank&quot;&gt;GeometryFactory&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Given a 2D polygon, an intuitive way to think of the construction of its straight skeleton is
to imagine that wavefronts (or grassfires) are spawned at each edge of the polygon, and are moving
inward. As the fronts progress, they either contract or expand depending on the angles formed
between polygon edges, and sometimes disappear. Under this transformation, polygon vertices move
along the angular bisector of the lines subtending the edges, tracing a tree-like structure:
the straight skeleton.&lt;/p&gt;

&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/sls_progress.png&quot;&gt;&lt;img src=&quot;../../../../images/sls_progress.png&quot; style=&quot;max-width:95%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;br /&gt;&lt;small&gt;Construction of a straight skeleton: the wavefront interfaces define the straight skeleton (red).&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Straight Skeletons are a fundamental tool in geometric modeling and computational geometry.
They are used in a variety of applications, such as architecture, animation, and manufacturing.
Straight Skeletons are also used as a building block for other algorithms, such as the
offsetting of polygons, which is a fundamental operation in geometric modeling
and computational geometry.&lt;/p&gt;

&lt;p&gt;The straight skeleton of a polygon is similar to the medial axis and the Voronoi diagram of a polygon
in the way it partitions it; however, unlike the medial axis and the Voronoi diagram, the bisectors
are not equidistant to its defining edges but to the supporting lines of such edges. As a result,
the bisectors of a straight skeleton might not be located in the center of the polygon and thus
cannot be regarded as a proper medial axis in its geometrical meaning.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;Weighted Straight Skeletons&lt;/h3&gt;

&lt;p&gt;Weighted straight skeletons are a generalization of straight skeletons: contour edges are assigned
a weight, which can be understood as assigning a speed to the wavefront spawned from
the contour edge. Vertices no longer move along the angular bisector between two contour edges,
but along a *weighted* bisector, which changes its angle.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/sls_weights.png&quot;&gt;&lt;img src=&quot;../../../../images/sls_weights.png&quot; style=&quot;max-width:95%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;br /&gt;&lt;small&gt;An unweighted straight skeleton (leftmost) and three randomly weighted straight skeletons.&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;The Straight Skeleton package of CGAL now supports the construction of weighted straight skeletons,
with the restriction that all weights must be positive. For clarity, this functionality is implemented
in a new set of functions: for existing functions such as &lt;code&gt;CGAL::create_..._straight_skeleton_2()&lt;/code&gt;,
there now exists a weighted equivalent: &lt;code&gt;CGAL::create_*weighted*_..._straight_skeleton_2()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;Straight Skeleton Extrusion&lt;/h3&gt;

&lt;p&gt;Perhaps the first (historically) use-case of straight skeletons was roof construction: given a
polygon representing the boundary of the roof, the straight skeleton directly gives the layout
of each tent. If each skeleton edge is lifted from the plane a height equal to its offset distance
(also sometimes called &quot;time&quot;), the resulting roof is &quot;correct&quot; in that water will always fall down
to the contour edges (the roof's border), regardless of where it falls on the roof.&lt;/p&gt;

&lt;p&gt;The Straight Skeleton package of CGAL now implements skeleton extrusion for polygons with holes,
with support for positive multiplicative weights. The output is a closed, combinatorially 2-manifold
surface triangle mesh.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/sls_extrusion.png&quot;&gt;&lt;img src=&quot;../../../../images/sls_extrusion.png&quot; style=&quot;max-width:95%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;br /&gt;&lt;small&gt;Input polygon (left), weighted skeleton with colored faces (middle), and extruded skeleton (right).&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Furthermore, it is possible to provide a maximum height, which will truncate the skeleton faces.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/sls_cropped_extrusion.png&quot;&gt;&lt;img src=&quot;../../../../images/sls_cropped_extrusion.png&quot; style=&quot;max-width:95%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;br /&gt;&lt;small&gt;Input polygon with three holes and its weighted straight skeleton (left), &lt;br /&gt; and two extrusions of the skeleton with different maximum heights (middle and right).&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;Updated User Manual&lt;/h3&gt;

&lt;p&gt;With the addition of these new features, the complete documentation of the package has been
substancially updated. In particular, the user manual has been fully rewritten and extended.&lt;/p&gt;

&lt;h3&gt;Status&lt;/h3&gt;

&lt;p&gt;All these new improvements are already integrated in CGAL's master branch on the
&lt;a href=&quot;https://github.com/CGAL/cgal/&quot;&gt;CGAL GitHub repository&lt;/a&gt;, and will be officially released
in the upcoming version of CGAL, CGAL 5.6, scheduled for June 2023.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.6/Manual/packages.html#PkgStraightSkeleton2&quot;&gt;Documentation of the package Straight_skeleton_2&lt;/a&gt;
&lt;br /&gt;
&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/tree/master&quot;&gt;CGAL master branch on GitHub&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SoCG Test of Time Award</title>
   <link href="http://www.cgal.org/news/2023/04/07/SoCG-Test-of-Time-Award/"/>
   <updated>2023-04-07T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2023/04/07/SoCG-Test-of-Time-Award</id>
   <content type="html">
&lt;p&gt;We are grateful and proud to share the following news with you.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Dear CGAL Editorial Board,&lt;/p&gt;
&lt;p&gt; The SoCG ToT Award Committee  has chosen the CGAL project as one of the recipients of the &lt;a href=&quot;https://computational-geometry.org/Awards/SoCG_Test_of_Time.html&quot;&gt;2023 SoCG Test of Time Award&lt;/a&gt;.  In this case the Committee deliberately and exceptionally overstepped its mandate of honoring individual papers since it strongly believes that CGAL is a contribution to the SoCG Community whose impact as a whole has been and still is at least as strong and profound as that of any individual paper. The award will be presented at the 2023 CG Week to be held  June 12-15, 2023 at UT Dallas.&lt;/p&gt;


&lt;p&gt;Congratulations to all of you for this well deserved recognition.&lt;/p&gt;

 &lt;p&gt;&lt;small&gt;Pankaj Agarwal, Siu-Wing Cheng,  Raimund Seidel,  Emo Welzl (SoCG ToT Award Committee)&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Update on June 19: The Award Ceremony is now &lt;a href=&quot;https://youtu.be/vqhX-HzWYBw?t=11118&quot;&gt;online&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../../images/SoCG_2023_ToT_CGAL.pdf&quot;&gt;&lt;img src=&quot;../../../../../images/SoCG_2023_ToT_CGAL.png&quot; style=&quot;max-width:95%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;br /&gt;&lt;small&gt;Certificate (click for the pdf).&lt;/small&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Influence4You</title>
   <link href="http://www.cgal.org/news/2023/04/01/Influence4You/"/>
   <updated>2023-04-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2023/04/01/Influence4You</id>
   <content type="html">
&lt;p&gt;Although the CGAL Open Source Project is a non-profit organization, it
should be clear that we need communication to reach new users and grow
the community. Today &lt;i&gt;Influencer Marketing&lt;/i&gt; is the channel of choice.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;Communication Theory&lt;/h3&gt;

&lt;p&gt;Last century, only big players had one-page advertisements in
traditional print media, that is newspapers like the New York Times and
weekly publications like The Economist. Smaller software companies
advertised in niche publications like &lt;a href=&quot;https://www.usinenouvelle.com/&quot;&gt;Usine Nouvelle&lt;/a&gt; or
01-Informatique. The end of the century saw the arrival of
featured content, that is articles written by journalists paid by
companies, as well as industry fair magazines such as &lt;a href=&quot;https://formnext.mesago.com/frankfurt/en/themes-events/fonmag/fonmag_archive.html&quot;&gt;fon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Other old fashioned ways to advertise are electronic billboards. While a
brand like Pepsi or Nike can afford a permanent screening, we could only pay
for a &lt;i&gt;focused screening&lt;/i&gt; of 30 minutes during the social event of a recent conference.&lt;p&gt;

&lt;br /&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../../images/nycBillboard.jpg&quot;&gt;&lt;img src=&quot;../../../../../images/nycBillboard.jpg&quot; style=&quot;max-width:85%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;br /&gt;&lt;small&gt;CGAL during 30 min on a billboard at the occasion of a geophysics conference where we exhibited.&lt;/small&gt;
&lt;/div&gt;

&lt;br /&gt;
&lt;p&gt;October 23, 2000, will be a date forever remembered by internet
marketers around the globe as this was the birth of the first ever
self-serve online advertising platform: Google AdWords.
The CGAL Project has since then spent a small budget on keywords like
&quot;Apollonius Graphs&quot; and &quot;Periodic Hyperbolic Triangulations&quot;.&lt;/p&gt;

&lt;p&gt;We also invest in &lt;i&gt;Banner Ads&lt;/i&gt; at conferences like Siggraph,
InterGEO (geographical information systems), and FormNext (additive
manufacturing). While at Siggraph the goal is to show presence to the
many attendees who know us already, for the other conferences the goal
is to make people curious and actively search -- &quot;CGAL, What
might that stand for?&quot;.&lt;/p&gt;

&lt;p&gt;There are however other channels where we are not performing as we should: we are
not very active on the CGAL youtube channel (which is a pity as geometric
computing is very visual), and we are only a little
bit more active on our &lt;a href=&quot;https://twitter.com/TheCGALProject&quot;&gt;twitter feed&lt;/a&gt;,
but we should strive to communicate as the top: on each lemma of a publication,
and on each implementation detail.&lt;/p&gt;

&lt;p&gt; Last but not least, we keep a list of &lt;a href=&quot;https://www.cgal.org/projects.html&quot;&gt;Projects Using CGAL&lt;/a&gt;,
which brings us to the heart of this posting. Most people find this
long list of real-world users a good argument to have a closer look at CGAL.
Humans trust other humans who have had a positive experience and
who are independent from the self-praising tweets and paid-for content
with paid-for-phantastically-rendered magazine images. In other words,
real-world users are trustworthy &lt;i&gt;Influencers&lt;/i&gt;.&lt;/p&gt;

&lt;br /&gt;
&lt;h3&gt;Influencers&lt;/h3&gt;

&lt;p&gt;We are glad that you did not stop reading when this ugly word popped up -- influencer. Most of you are
scientists, and thus you are objective. There must be hard facts, and it needs more than a
good looking teenager telling you that a particular beauty product makes you still more beautiful,
or a pimple-speckled nerd telling you that Blender is great. Quite similar to Churchill's
&quot;Democracy is the worst form of government – except for all the others that have been tried.&quot;,
&lt;i&gt;Influencer Marketing&lt;/i&gt; is by large the most honest way of advertising, which is why
we have embraced it.&lt;/p&gt;

&lt;p&gt;Indeed, the CGAL Project is now a customer of &lt;a href=&quot;https://www.influence4you.com/en&quot;&gt;Influence4You&lt;/a&gt;, the ultimate
platform for matchmaking organizations and influencers. Without
going into details, this platform is an efficient lever, pretty much
like Github co-pilot is the lever in the world of programming.
The hiccup is that we have only found few influencers on the platform that are
knowledgeable in geometry processing. It would be good if that
changed, not only for the CGAL Project, but for many products (yet
another &quot;ugly&quot; word) who got the SGP Software Award, to name just a few.&lt;p&gt;

&lt;br /&gt;
&lt;h3&gt;Just Do It&lt;/h3&gt;

&lt;p&gt;To those of you who have blogs and twitter accounts, you should have a look at
Influence4You. Admit that you like a big number of readers and subscribers, not
because you are selfish, but because you know that your opinion counts and you want
to have maximum impact.&lt;/p&gt;

&lt;p&gt;To those of you who have expertise and strong opinions, but are not motivated
to setup WordPress or to create a twitter account, or wish to avoid the humiliating experience
of having fewer than a hundred followers in the beginning, note that Influence4You
provides the means to get a flying start.&lt;/p&gt;

With this new venture, CGAL is embracing both traditional and modern venues,
and will look forward to the future.

&lt;br /&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../../images/Lost_in_CGAL_translation.jpg&quot;&gt;&lt;img src=&quot;../../../../../images/Lost_in_CGAL_translation.jpg&quot; style=&quot;max-width:85%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;br /&gt;&lt;small&gt;CGAL's newest ad on Shibuya Crossing.&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&lt;b&gt;Just in case it didn't became clear yet, this posting was the annual April joke.&lt;/b&gt;&lt;/p&gt;
&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL to participate in the Google Summer of Code 2023</title>
   <link href="http://www.cgal.org/news/2023/03/08/gsoc-2023-mentoring/"/>
   <updated>2023-03-08T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2023/03/08/gsoc-2023-mentoring</id>
   <content type="html">
&lt;p&gt;The CGAL Project is a &lt;a href=&quot;https://summerofcode.withgoogle.com/programs/2023/organizations/cgal-project&quot;&gt;mentoring organization&lt;/a&gt;
for the &lt;a href=&quot;https://summerofcode.withgoogle.com/programs/2023&quot;&gt;Google Summer of Code 2023&lt;/a&gt;.
Have a look at our &lt;a href=&quot;https://github.com/CGAL/cgal/wiki/Project-Ideas&quot;&gt;Project Ideas&lt;/a&gt; page.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.5.2 released</title>
   <link href="http://www.cgal.org/2023/02/28/cgal552/"/>
   <updated>2023-02-28T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2023/02/28/cgal552</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.5.2&quot;&gt;Download CGAL-5.5.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.5.2/Manual/index.html&quot;&gt;CGAL-5.5.2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.5.2 is a bug-fix release for &lt;a href=&quot;../../../../2022/07/15/cgal55&quot;&gt;CGAL 5.5&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2022/10/12/cgal551&quot;&gt;CGAL 5.5.1&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=sort%3Aupdated-desc+label%3AMerged_in_5.5.2+-label%3AMerged_in_5.5.1&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.4.4 released</title>
   <link href="http://www.cgal.org/2023/02/28/cgal5.4.4/"/>
   <updated>2023-02-28T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2023/02/28/cgal5.4.4</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.4.4&quot;&gt;Download CGAL-5.4.4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.4.4/Manual/index.html&quot;&gt;CGAL-5.4.4 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.4.4 is a bug-fix release for &lt;a href=&quot;../../../../2022/01/31/cgal54&quot;&gt;CGAL 5.4&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2022/10/12/cgal5.4.3/&quot;&gt;CGAL 5.4.3&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=label%3AMerged_in_5.4.4+-label%3AMerged_in_5.4.3&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Two new CGAL releases</title>
   <link href="http://www.cgal.org/2022/10/12/new-releases/"/>
   <updated>2022-10-12T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2022/10/12/new-releases</id>
   <content type="html">
&lt;div&gt;

  &lt;p&gt;The CGAL Open Source Project is pleased to announce two new releases:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;/2022/10/12/cgal5.4.3&quot;&gt;CGAL-5.4.3&lt;/a&gt; is the third bug-fix release for CGAL-5.4, and&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/2022/10/12/cgal551&quot;&gt;CGAL-5.5.1&lt;/a&gt; is the first bug-fix release for CGAL-5.5.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;The development of CGAL is still focused on the future CGAL-5.6 (now planned for June 2023), with bug-fixes regularly backported to the branches for CGAL-5.4.x and CGAL-5.5.x.&lt;/p&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.5.1 released</title>
   <link href="http://www.cgal.org/2022/10/12/cgal551/"/>
   <updated>2022-10-12T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2022/10/12/cgal551</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.5.1&quot;&gt;Download CGAL-5.5.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.5.1/Manual/index.html&quot;&gt;CGAL-5.5.1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.5.1 is a bug-fix release for &lt;a href=&quot;../../../../2022/07/15/cgal55&quot;&gt;CGAL 5.5&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2022/07/15/cgal55&quot;&gt;CGAL 5.5&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=label%3AMerged_in_5.5.1&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.4.3 released</title>
   <link href="http://www.cgal.org/2022/10/12/cgal5.4.3/"/>
   <updated>2022-10-12T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2022/10/12/cgal5.4.3</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.4.3&quot;&gt;Download CGAL-5.4.3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.4.3/Manual/index.html&quot;&gt;CGAL-5.4.3 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.4.3 is a bug-fix release for &lt;a href=&quot;../../../../2022/01/31/cgal54&quot;&gt;CGAL 5.4&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2022/07/15/cgal5.4.2&quot;&gt;CGAL 5.4.2&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=label%3AMerged_in_5.4.3+-label%3AMerged_in_5.4.2&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ SIGGRAPH 2022</title>
   <link href="http://www.cgal.org/2022/07/29/siggraph-2022/"/>
   <updated>2022-07-29T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2022/07/29/siggraph-2022</id>
   <content type="html">
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/logos/events/siggraph_2022.png&quot;&gt;
  &lt;img src=&quot;../../../../images/logos/events/siggraph_2022.png&quot; style=&quot;max-width:75%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;/div&gt;

&lt;p&gt;You have an implementation of a geometric algorithm that you would like to contribute?
You want us to implement an algorithm that you learned about in the technical paper sessions?
You want to know more about the open source and the commercial licensing options for CGAL?
You want to present the problem you have to solve, in order to figure out if CGAL might be helpful for you?&lt;/p&gt;

&lt;p&gt;Visit the CGAL Project on Booth No. 432 at the exhibition of &lt;a href=&quot;https://s2022.siggraph.org/&quot;&gt;SIGGRAPH 2022&lt;/a&gt;,
in Vancouver, Canada, 8-11 August, 2022! A plan of the SIGGRAPH 2022 exhibition floor is available
&lt;a href=&quot;https://hallerickson.ungerboeck.com/prod/app85.cshtml?aat=dn9WBvwMHeV0ghVh6TGvMs70c6jMjTJI1%2b6INybpXvY%3d&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In addition, the companion paper associated with CGAL’s newest package, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3D Alpha Wrapping&lt;/code&gt; (&lt;a href=&quot;https://www.cgal.org/2022/05/18/alpha_wrap/&quot;&gt;associated news&lt;/a&gt;),
will be presented live on Wednesday, 10 August, 2022 in the roundtable starting at 10:45 am,
full details &lt;a href=&quot;https://s2022.siggraph.org/presentation/?id=papers_552&amp;amp;sess=sess119&quot;&gt;here&lt;/a&gt;.
The 3D Alpha Wrapping will furthermore be the topic of a 1h &lt;a href=&quot;https://s2022.siggraph.org/program/labs/&quot;&gt;Labs session&lt;/a&gt;,
on Thursday, 11 August, 2022 at 11:10 am in the Labs are (West Building, Ballroom A/B).&lt;/p&gt;

&lt;p&gt;See you there!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Two new CGAL releases</title>
   <link href="http://www.cgal.org/2022/07/18/new-releases/"/>
   <updated>2022-07-18T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2022/07/18/new-releases</id>
   <content type="html">
&lt;div&gt;

  &lt;p&gt;The CGAL Open Source Project is pleased to announce two new releases that were publish last Friday:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;/2022/07/15/cgal5.4.2&quot;&gt;CGAL-5.4.2&lt;/a&gt; is the second bug-fix release for CGAL-5.4, and&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/2022/07/15/cgal55&quot;&gt;CGAL-5.5&lt;/a&gt; is the most recent feature release of CGAL.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;The development of CGAL will now focus on the future CGAL-5.6 (planned for December 2022), with bug-fixes regularly backported to the branches for CGAL-5.4.x and CGAL-5.5.x.&lt;/p&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.5 released</title>
   <link href="http://www.cgal.org/2022/07/15/cgal55/"/>
   <updated>2022-07-15T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2022/07/15/cgal55</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.5&quot;&gt;Download CGAL-5.5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/index.html&quot;&gt;CGAL-5.5 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.5 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2022/01/31/cgal54&quot;&gt;CGAL 5.4&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;d-alpha-wrapping-new-package&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgAlphaWrap3&quot;&gt;3D Alpha Wrapping (new package)&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;This component takes a 3D triangle mesh, soup, or point set as input, and generates a valid
(watertight, intersection-free, and combinatorially 2-manifold) surface triangle mesh
that contains the input.
The algorithm proceeds by shrink-wrapping and refining a 3D Delaunay triangulation,
starting from a loose bounding box of the input.
Two user-defined parameters, alpha and offset, offer control over the maximum size of cavities
where the shrink-wrapping process can enter, and the tightness of the final surface mesh
to the input, respectively. Once combined, these parameters provide a means to trade fidelity
to the input for complexity of the output.&lt;/p&gt;

      &lt;p&gt;See also the &lt;a href=&quot;https://www.cgal.org/2022/05/18/alpha_wrap/&quot;&gt;announcement page&lt;/a&gt;.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-straight-skeleton-and-polygon-offsetting-breaking-change&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgStraightSkeleton2&quot;&gt;2D Straight Skeleton and Polygon Offsetting (breaking change)&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Fix the output of the function &lt;a href=&quot;https://doc.cgal.org/5.5/Straight_skeleton_2/group__PkgStraightSkeleton2OffsetFunctions.html#gaa159f093e5d6d7fdb62c1660a44f95fe&quot;&gt;CGAL::create_exterior_skeleton_and_offset_polygons_with_holes_2()&lt;/a&gt;
to not take into account the offset of the outer frame.&lt;/li&gt;
    &lt;li&gt;Fix the computation of the exterior offset of a polygon with holes that was not computing the offset of the holes&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-convex-hulls&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgConvexHull3&quot;&gt;3D Convex Hulls&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added an &lt;a href=&quot;https://doc.cgal.org/5.5/Convex_hull_3/group__PkgConvexHull3Functions.html#ga52fca4745c2ef0351063fbe66b035fd1&quot;&gt;overload of the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::convex_hull_3()&lt;/code&gt;&lt;/a&gt;, which writes the result in an indexed triangle set.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-polygons&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgPolygon2&quot;&gt;2D Polygons&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Add vertex, edge, and hole ranges.&lt;/li&gt;
    &lt;li&gt;The concept &lt;a href=&quot;https://doc.cgal.org/5.5/Polygon/classGeneralPolygonWithHoles__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GeneralPolygonWithHoles_2&lt;/code&gt;&lt;/a&gt; now requires the nested type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polygon_2&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;General_polygon_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-regularized-boolean-set-operations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgBooleanSetOperations2&quot;&gt;2D Regularized Boolean Set-Operations&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The concept &lt;a href=&quot;https://doc.cgal.org/5.5/Boolean_set_operations_2/classGeneralPolygonSetTraits__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GeneralPolygonSetTraits_2&lt;/code&gt;&lt;/a&gt; now requires the nested type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Construct_polygon_with_holes_2&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Construct_general_polygon_with_holes_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;combinatorial-maps&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgCombinatorialMaps&quot;&gt;Combinatorial Maps&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Removed old code deprecated in CGAL 4.9 and 4.10 (global functions, and information associated with darts).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgArrangementOnSurface2&quot;&gt;2D Arrangements&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Fixed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;intersect_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compare_y_at_x_right&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compare_y_at_x_left&lt;/code&gt; function objects of the traits class template &lt;a href=&quot;https://doc.cgal.org/5.5/Arrangement_on_surface_2/classCGAL_1_1Arr__geodesic__arc__on__sphere__traits__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_geodesic_arc_on_sphere_traits_2&lt;/code&gt;&lt;/a&gt; that handles geodesic arcs on sphere and applied a small syntactical fix to the tracing traits.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;tetrahedral-mesh-generation&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgMesh3&quot;&gt;Tetrahedral Mesh Generation&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function
&lt;a href=&quot;https://doc.cgal.org/5.5/Mesh_3/classCGAL_1_1Mesh__complex__3__in__triangulation__3.html#ace57c4e777da457c6e33b4f6e89949ce&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove_isolated_vertices()&lt;/code&gt;&lt;/a&gt;
as a post-processing step for the tetrahedral mesh generation.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgPolygonMeshProcessing&quot;&gt;Polygon Mesh Processing&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.5/Polygon_mesh_processing/group__PMP__orientation__grp.html#ga855b1c55c201b91ab04eebd2811a87fd&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::orient_triangle_soup_with_reference_triangle_soup()&lt;/code&gt;&lt;/a&gt;, which enables re-orienting the faces of a triangle soup based on the orientation of the nearest face in a reference triangle soup.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.5/Polygon_mesh_processing/group__PMP__orientation__grp.html#ga9ac9b9434084b64f3304df636c3178a3&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::compatible_orientations()&lt;/code&gt;&lt;/a&gt;, which enables to retrieve the (in)compatibility of orientations of faces from different connected components.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.5/Polygon_mesh_processing/group__PMP__meshing__grp.html#ga136c659162e5360354db5879db7431b4&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::tangential_relaxation()&lt;/code&gt;&lt;/a&gt;, which applies an area-based tangential mesh smoothing to the vertices of a surface triangle mesh.&lt;/li&gt;
    &lt;li&gt;Added the named parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;visitor&lt;/code&gt; to the function &lt;a href=&quot;https://doc.cgal.org/5.5/Polygon_mesh_processing/group__PMP__hole__filling__grp.html#gad2d3c43bce0ef90a16530478196d7f42&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;triangulate_hole()&lt;/code&gt;&lt;/a&gt;, which enables to track progress with callbacks.&lt;/li&gt;
    &lt;li&gt;Added more functions in the &lt;a href=&quot;https://doc.cgal.org/5.5/Polygon_mesh_processing/classPMPCorefinementVisitor.html&quot;&gt;visitor of the corefinement based methods&lt;/a&gt; to track progress.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-simplification&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgSurfaceMeshSimplification&quot;&gt;Surface Mesh Simplification&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Introduced four variations of the Garland-Heckbert simplification algorithm based on the probabilistic approach of Trettner and Kobbelt (Fast and Robust QEF Minimization using Probabilistic Quadrics): &lt;a href=&quot;https://doc.cgal.org/5.5/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1GarlandHeckbert__plane__policies.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GarlandHeckbert_plane_policies&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.5/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1GarlandHeckbert__probabilistic__plane__policies.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GarlandHeckbert_probabilistic_plane_policies&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.5/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1GarlandHeckbert__triangle__policies.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GarlandHeckbert_triangle_policies&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://doc.cgal.org/5.5/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1GarlandHeckbert__probabilistic__triangle__policies.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GarlandHeckbert_probabilistic_triangle_policies&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GarlandHeckbert_policies&lt;/code&gt; has been deprecated, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GarlandHeckbert_plane_policies&lt;/code&gt; replaces it.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgPointSetProcessing3&quot;&gt;Point Set Processing&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A new optional named parameter, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;min_points_per_cell&lt;/code&gt; has been added to &lt;a href=&quot;https://doc.cgal.org/5.5/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga7757ef9b3900e42fde26f5a0ac56e20f&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grid_simplify_point_set()&lt;/code&gt;&lt;/a&gt;. By adding a minimal number of points in a cell such that a point is retained, one can also filter out low density areas and outliers: in the case of densely sampled point clouds, this yields better results than using grid simplification and then outlier removal, while being very vast. The default value is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; to keep the previous behavior as default.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-spatial-searching&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgSpatialSearchingD&quot;&gt;dD Spatial Searching&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the member function &lt;a href=&quot;https://doc.cgal.org/5.5/Spatial_searching/classCGAL_1_1Kd__tree.html#ac2851b5cafb8d5cce0dc5fb107c8f13f&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write_graphviz()&lt;/code&gt;&lt;/a&gt; to the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kd_tree&lt;/code&gt; that writes the tree in a stream in the &lt;a href=&quot;https://graphviz.org/&quot;&gt;Graphviz&lt;/a&gt; format.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgBGL&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.5/BGL/structCGAL_1_1Face__filtered__graph.html#aa428541ebbdd35f9a6e9a3ffd60178df&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;invert_selection()&lt;/code&gt;&lt;/a&gt; in the class &lt;a href=&quot;https://doc.cgal.org/5.5/BGL/structCGAL_1_1Face__filtered__graph.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Face_filtered_graph&lt;/code&gt;&lt;/a&gt;, which toggles the selected status of a graph: selected faces are deselected, and unselected faces are selected.&lt;/li&gt;
  &lt;/ul&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.4.2 released</title>
   <link href="http://www.cgal.org/2022/07/15/cgal5.4.2/"/>
   <updated>2022-07-15T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2022/07/15/cgal5.4.2</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.4.2&quot;&gt;Download CGAL-5.4.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.4.2/Manual/index.html&quot;&gt;CGAL-5.4.2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.4.2 is a bug-fix release for &lt;a href=&quot;../../../../2022/01/31/cgal54&quot;&gt;CGAL 5.4&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2022/06/06/cgal541&quot;&gt;CGAL 5.4.1&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=label%3AMerged_in_5.4.2+-label%3AMerged_in_5.4.1&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Three new CGAL releases</title>
   <link href="http://www.cgal.org/news/2022/06/07/three_new_releases/"/>
   <updated>2022-06-07T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2022/06/07/three_new_releases</id>
   <content type="html">
&lt;div&gt;
  &lt;p&gt;The CGAL Open Source Project is pleased to announce today three new releases:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;/2022/06/06/cgal532&quot;&gt;CGAL-5.3.2&lt;/a&gt; is the second and last bug-fix release for CGAL-5.3,&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/2022/06/06/cgal541&quot;&gt;CGAL-5.4.1&lt;/a&gt; is the first bug-fix release for CGAL-5.4, and&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/2022/06/06/cgal55-beta1&quot;&gt;CGAL-5.5-beta1&lt;/a&gt; is the first beta release for CGAL-5.5.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;The development of CGAL will now focus on the future CGAL-5.6 (planned for December 2022), with bug-fixes regularly backported to the branches for CGAL-5.4.x and CGAL-5.5.x.&lt;/p&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.5 beta1 released</title>
   <link href="http://www.cgal.org/2022/06/06/cgal55-beta1/"/>
   <updated>2022-06-06T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2022/06/06/cgal55-beta1</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.5-beta1&quot;&gt;Download CGAL-5.5-beta1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/index.html&quot;&gt;CGAL-5.5-beta1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.5 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2022/01/31/cgal54&quot;&gt;CGAL 5.4&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;d-alpha-wrapping-new-package&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgAlphaWrap3&quot;&gt;3D Alpha Wrapping (new package)&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;This component takes a 3D triangle mesh, soup, or point set as input, and generates a valid
(watertight, intersection-free, and combinatorially 2-manifold) surface triangle mesh
that contains the input.
The algorithm proceeds by shrink-wrapping and refining a 3D Delaunay triangulation,
starting from a loose bounding box of the input.
Two user-defined parameters, alpha and offset, offer control over the maximum size of cavities
where the shrink-wrapping process can enter, and the tightness of the final surface mesh
to the input, respectively. Once combined, these parameters provide a means to trade fidelity
to the input for complexity of the output.&lt;/p&gt;

      &lt;p&gt;See also the &lt;a href=&quot;https://www.cgal.org/2022/05/18/alpha_wrap/&quot;&gt;announcement page&lt;/a&gt;.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-convex-hulls&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgConvexHull3&quot;&gt;3D Convex Hulls&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added an &lt;a href=&quot;https://doc.cgal.org/5.5/Convex_hull_3/group__PkgConvexHull3Functions.html#ga52fca4745c2ef0351063fbe66b035fd1&quot;&gt;overload of the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::convex_hull_3()&lt;/code&gt;&lt;/a&gt;, which writes the result in an indexed triangle set.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-polygons&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgPolygon2&quot;&gt;2D Polygons&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Add vertex, edge, and hole ranges.&lt;/li&gt;
    &lt;li&gt;The concept &lt;a href=&quot;https://doc.cgal.org/5.5/Polygon/classGeneralPolygonWithHoles__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GeneralPolygonWithHoles_2&lt;/code&gt;&lt;/a&gt; now requires the nested type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polygon_2&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;General_polygon_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-regularized-boolean-set-operations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgBooleanSetOperations2&quot;&gt;2D Regularized Boolean Set-Operations&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The concept &lt;a href=&quot;https://doc.cgal.org/5.5/Boolean_set_operations_2/classGeneralPolygonSetTraits__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GeneralPolygonSetTraits_2&lt;/code&gt;&lt;/a&gt; now requires the nested type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Construct_polygon_with_holes_2&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Construct_general_polygon_with_holes_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;combinatorial-maps&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgCombinatorialMaps&quot;&gt;Combinatorial Maps&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Removed old code deprecated in CGAL 4.9 and 4.10 (global functions, and information associated with darts).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgArrangementOnSurface2&quot;&gt;2D Arrangements&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Fixed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;intersect_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compare_y_at_x_right&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compare_y_at_x_left&lt;/code&gt; function objects of the traits class template &lt;a href=&quot;https://doc.cgal.org/5.5/Arrangement_on_surface_2/classCGAL_1_1Arr__geodesic__arc__on__sphere__traits__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_geodesic_arc_on_sphere_traits_2&lt;/code&gt;&lt;/a&gt; that handles geodesic arcs on sphere and applied a small syntactical fix to the tracing traits.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;tetrahedral-mesh-generation&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgMesh3&quot;&gt;Tetrahedral Mesh Generation&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function
&lt;a href=&quot;https://doc.cgal.org/5.5/Mesh_3/classCGAL_1_1Mesh__complex__3__in__triangulation__3.html#ace57c4e777da457c6e33b4f6e89949ce&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove_isolated_vertices()&lt;/code&gt;&lt;/a&gt;
as a post-processing step for the tetrahedral mesh generation.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgPolygonMeshProcessing&quot;&gt;Polygon Mesh Processing&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.5/Polygon_mesh_processing/group__PMP__orientation__grp.html#ga855b1c55c201b91ab04eebd2811a87fd&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::orient_triangle_soup_with_reference_triangle_soup()&lt;/code&gt;&lt;/a&gt;, which enables re-orienting the faces of a triangle soup based on the orientation of the nearest face in a reference triangle soup.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.5/Polygon_mesh_processing/group__PMP__orientation__grp.html#ga9ac9b9434084b64f3304df636c3178a3&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::compatible_orientations()&lt;/code&gt;&lt;/a&gt;, which enables to retrieve the (in)compatibility of orientations of faces from different connected components.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.5/Polygon_mesh_processing/group__PMP__meshing__grp.html#ga136c659162e5360354db5879db7431b4&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::tangential_relaxation()&lt;/code&gt;&lt;/a&gt;, which applies an area-based tangential mesh smoothing to the vertices of a surface triangle mesh.&lt;/li&gt;
    &lt;li&gt;Added the named parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;visitor&lt;/code&gt; to the function &lt;a href=&quot;https://doc.cgal.org/5.5/Polygon_mesh_processing/group__PMP__hole__filling__grp.html#gad2d3c43bce0ef90a16530478196d7f42&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;triangulate_hole()&lt;/code&gt;&lt;/a&gt;, which enables to track progress with callbacks.&lt;/li&gt;
    &lt;li&gt;Added more functions in the &lt;a href=&quot;https://doc.cgal.org/5.5/Polygon_mesh_processing/classPMPCorefinementVisitor.html&quot;&gt;visitor of the corefinement based methods&lt;/a&gt; to track progress.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-simplification&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgSurfaceMeshSimplification&quot;&gt;Surface Mesh Simplification&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Introduced four variations of the Garland-Heckbert simplification algorithm based on the probabilistic approach of Trettner and Kobbelt (Fast and Robust QEF Minimization using Probabilistic Quadrics): &lt;a href=&quot;https://doc.cgal.org/5.5/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1GarlandHeckbert__plane__policies.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GarlandHeckbert_plane_policies&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.5/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1GarlandHeckbert__probabilistic__plane__policies.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GarlandHeckbert_probabilistic_plane_policies&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.5/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1GarlandHeckbert__triangle__policies.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GarlandHeckbert_triangle_policies&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://doc.cgal.org/5.5/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1GarlandHeckbert__probabilistic__triangle__policies.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GarlandHeckbert_probabilistic_triangle_policies&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GarlandHeckbert_policies&lt;/code&gt; has been deprecated, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GarlandHeckbert_plane_policies&lt;/code&gt; replaces it.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgPointSetProcessing3&quot;&gt;Point Set Processing&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A new optional named parameter, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;min_points_per_cell&lt;/code&gt; has been added to &lt;a href=&quot;https://doc.cgal.org/5.5/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga7757ef9b3900e42fde26f5a0ac56e20f&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grid_simplify_point_set()&lt;/code&gt;&lt;/a&gt;. By adding a minimal number of points in a cell such that a point is retained, one can also filter out low density areas and outliers: in the case of densely sampled point clouds, this yields better results than using grid simplification and then outlier removal, while being very vast. The default value is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; to keep the previous behavior as default.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-spatial-searching&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgSpatialSearchingD&quot;&gt;dD Spatial Searching&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the member function &lt;a href=&quot;https://doc.cgal.org/5.5/Spatial_searching/classCGAL_1_1Kd__tree.html#ac2851b5cafb8d5cce0dc5fb107c8f13f&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write_graphviz()&lt;/code&gt;&lt;/a&gt; to the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kd_tree&lt;/code&gt; that writes the tree in a stream in the &lt;a href=&quot;https://graphviz.org/&quot;&gt;Graphviz&lt;/a&gt; format.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgBGL&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.5/BGL/structCGAL_1_1Face__filtered__graph.html#aa428541ebbdd35f9a6e9a3ffd60178df&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;invert_selection()&lt;/code&gt;&lt;/a&gt; in the class &lt;a href=&quot;https://doc.cgal.org/5.5/BGL/structCGAL_1_1Face__filtered__graph.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Face_filtered_graph&lt;/code&gt;&lt;/a&gt;, which toggles the selected status of a graph: selected faces are deselected, and unselected faces are selected.&lt;/li&gt;
  &lt;/ul&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.4.1 released</title>
   <link href="http://www.cgal.org/2022/06/06/cgal541/"/>
   <updated>2022-06-06T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2022/06/06/cgal541</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.4.1&quot;&gt;Download CGAL-5.4.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.4.1/Manual/index.html&quot;&gt;CGAL-5.4.1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.4.1 is a bug-fix release for &lt;a href=&quot;../../../../2022/01/31/cgal54&quot;&gt;CGAL 5.4&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2022/01/31/cgal54&quot;&gt;CGAL 5.4&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=label%3AMerged_in_5.4.1&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.3.2 released</title>
   <link href="http://www.cgal.org/2022/06/06/cgal532/"/>
   <updated>2022-06-06T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2022/06/06/cgal532</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.3.2&quot;&gt;Download CGAL-5.3.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.3.2/Manual/index.html&quot;&gt;CGAL-5.3.2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.3.2 is a bug-fix release for &lt;a href=&quot;../../../../2021/07/06/cgal53&quot;&gt;CGAL 5.3&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2021/12/13/cgal531&quot;&gt;CGAL 5.3.1&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=label%3AMerged_in_5.3.2+-label%3AMerged_in_5.3.1&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New in CGAL: 3D Alpha Wrapping</title>
   <link href="http://www.cgal.org/2022/05/18/alpha_wrap/"/>
   <updated>2022-05-18T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2022/05/18/alpha_wrap</id>
   <content type="html">
&lt;h3&gt;&lt;a href=&quot;https://fr.linkedin.com/in/c%C3%A9dric-portaneri-1516a1108&quot;&gt;Cédric Portaneri&lt;/a&gt;&amp;#42;,
    &lt;a href=&quot;https://geometryfactory.com/who-we-are/&quot;&gt;Mael Rouxel-Labbé&lt;/a&gt;&amp;deg;,
    &lt;a href=&quot;https://www.linkedin.com/in/mhsaar&quot;&gt;Michael Hemmer&lt;/a&gt;,
    &lt;a href=&quot;https://www-sop.inria.fr/members/David.Cohen-Steiner/&quot;&gt;David Cohen-Steiner&lt;/a&gt;&amp;#42;,
    &lt;a href=&quot;https://team.inria.fr/titane/pierre-alliez/&quot;&gt;Pierre Alliez&lt;/a&gt;&amp;#42;&lt;/h3&gt;
&lt;h4&gt;&amp;#42;&lt;a href=&quot;https://www.inria.fr&quot;&gt;INRIA Sophia Antipolis&lt;/a&gt;,
    &amp;deg;&lt;a href=&quot;http://www.geometryfactory.com&quot; target=&quot;_blank&quot;&gt;GeometryFactory&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/alpha_wrap_gallery.png&quot;&gt;&lt;img src=&quot;../../../../images/alpha_wrap_gallery.png&quot; style=&quot;max-width:95%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;br /&gt;&lt;small&gt;Input meshes (pink) and wraps (grey) (click to enlarge).&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Surface meshes are essential components in the majority of geometry processing and computer graphics
applications such as segmentation, remeshing, or simulation. The feasibility of an operation
and the quality of the results often depend on the validity and the quality of the mesh.
For these reasons, most applications require --- or prefer --- input meshes that are &lt;i&gt;valid&lt;/i&gt;,
i.e., watertight, combinatorially 2-manifold and orientable, as these properties imply well-defined
notions of interior/exterior and geodesic neighborhoods. Despite the crucial role played by meshes,
many mesh generation processes (manual design by humans, automated generation from flawed CAD models,
reconstruction from measurement data, ...) remain imperfect and can be responsible for a wide variety
of possible defects in meshes: duplicates, degeneracies, holes and gaps, self-intersections,
non-manifold features or inconsistent orientation. These defects generally compound into critical
issues such as inconsistent boundary representations of the object they are supposed to model,
significantly hampering further operations.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;The 3D Alpha Wrapping Package&lt;/h3&gt;

&lt;p&gt;With the next CGAL release, a new package will address the problem of generating a watertight
and orientable surface triangle mesh from a given defect-laden input. In addition to validity,
our method produces an output that strictly encloses the input. Such an enclosing property is mandatory
for applications related to conservative distance queries, collision avoidance, or motion planning.&lt;/p&gt;

&lt;p&gt;The method is fast, proven to terminate, and generic to the input data representation (triangle meshes,
soups, segments, points, ...).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;Algorithm&lt;/h4&gt;

&lt;p&gt;The core idea behind our approach is to detach the structure being carved from the input geometry:
instead of carving a triangulation whose vertices are points of the input, as it is the case in sculpting methods,
we start from an entirely new and coarse enclosing mesh, and interlace carving and refinement steps to create the final approximation.&lt;/p&gt;

&lt;p&gt;Our algorithm is carving operates on an underlying 3D Delaunay triangulation whose tetrahedral cells
are tagged &lt;tt&gt;inside&lt;/tt&gt; or &lt;tt&gt;outside&lt;/tt&gt;, and the resulting surface mesh
is defined as the set of Delaunay facets separating &lt;tt&gt;inside&lt;/tt&gt; from &lt;tt&gt;outside&lt;/tt&gt; Delaunay cells.
The carving step trims the mesh inward by tagging &lt;tt&gt;outside&lt;/tt&gt; a Delaunay cell that was formerly
tagged &lt;tt&gt;inside&lt;/tt&gt;. The refinement step is triggered when an upcoming carving step would expose
the input geometry, i.e., when the tetrahedron cell that is to be tagged &lt;tt&gt;outside&lt;/tt&gt; actually
intersects the input. In this configuration, carving is not performed and a Steiner point is instead
inserted into the Delaunay triangulation to refine the tetrahedron cell. The Steiner points added
during refinement operations do not lie directly on the input but rather on the &lt;i&gt;offset surface&lt;/i&gt;,
which is defined as a level-set of the unsigned distance field to the input. More specifically,
a Steiner point is computed either as the intersection of a dual Voronoi edge with the offset surface,
or as the projection of the circumcenter of a Delaunay cell onto the offset surface. Intuitively,
our method is devised to allocate on-demand new degrees of freedom for carving, in a manner that
favors low output complexity and well-shaped elements.

The figure below illustrates our algorithm at work in 2D on a soup of line segments
characterized by many defects such as intersections, gaps, and non-manifold features.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/alpha_wrap_overview.png&quot;&gt;&lt;img src=&quot;../../../../images/alpha_wrap_overview.png&quot; style=&quot;max-width:95%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;br /&gt;&lt;small&gt;Illustration of the algorithm in 2D. Input (red) and a few steps of the algorithm (click to enlarge).&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;Usage&lt;/h4&gt;

&lt;p&gt;Two parameters control the behavior of our algorithm: &lt;i&gt;alpha&lt;/i&gt; and &lt;i&gt;offset&lt;/i&gt;.
The parameter &lt;i&gt;alpha&lt;/i&gt; controls the minimum carving size, and thus the size of straits and holes
that cannot be traversed during carving. The parameter &lt;i&gt;\delta&lt;/i&gt; is the value of the distance field
level-set defining the offset surface. It controls the distance of the mesh vertices to the input,
and thus the tightness of the approximation (see Figure below). Both parameters
can be chosen independently and arbitrarily large or small, but must be strictly positive.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/alpha_wrap_bike.png&quot;&gt;&lt;img src=&quot;../../../../images/alpha_wrap_bike.png&quot; style=&quot;max-width:95%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;br /&gt;&lt;small&gt;Multiple wrappings of the bike model for various combinations of alpha and offset (click to enlarge).&lt;br /&gt;
             Alpha and offset impact the complexity-fidelity tradeoff.&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;Robustness&lt;/h4&gt;

&lt;p&gt;Our algorithm combines Delaunay refinement and carving techniques. Using these extendedly studied
techniques and data structures enabled us to create a method that is proven to terminate and
satisfy a number of conditions (validity, manifoldness, output encloses the input).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;Genericity&lt;/h4&gt;

&lt;p&gt;Our algorithm is made generic by using an &lt;i&gt;oracle&lt;/i&gt; class whose role is to answer a number
of geometric queries (such as &lt;i&gt;&quot;What is the distance between this 3D point and the input data?&quot;&lt;/i&gt;).
The oracle's API is fixed and as such it is possible to easily switching input representations 
by simply replacing one implementation of oracle - and thus one type of input data - by another.
In our implementation, we have even added the possibility to combine oracles; consequently,
different input representations can be mixed together in the same scene queried by the oracle.
The figure below illustrates such a setting on the blade model, where we compute the alpha wrap
on input data that combine points, polylines, and triangles.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/alpha_wrap_mixed.png&quot;&gt;&lt;img src=&quot;../../../../images/alpha_wrap_mixed.png&quot; style=&quot;max-width:95%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;br /&gt;&lt;small&gt;Single wrap of input data with different representation types: points, segments, triangles (click to enlarge).&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;Status&lt;/h3&gt;

&lt;p&gt;The package Alpha_wrap_3 is already integrated in CGAL's master branch
on the &lt;a href=&quot;https://github.com/CGAL/cgal/&quot;&gt;CGAL GitHub repository&lt;/a&gt;, and will be
officially released in the upcoming version of CGAL, CGAL 5.5, scheduled for June 2022.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.5/Manual/packages.html#PkgAlphaWrap3&quot;&gt;Documentation of the package Alpha_wrap_3&lt;/a&gt;
&lt;br /&gt;
&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/tree/master&quot;&gt;CGAL master branch on GitHub&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ SXSW</title>
   <link href="http://www.cgal.org/news/2022/04/01/sxsw/"/>
   <updated>2022-04-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2022/04/01/sxsw</id>
   <content type="html">
&lt;p&gt;South By Southwest was an eye opener for the three CGAL Editorial Board members who made the trip to Austin. Up to now we loved our annual pilgrimage to Siggraph, but that is now history! The diversity of the folks we met is breathtaking, and what we learned through presentations and discussions we had, invites quite some change to the CGAL Project.&lt;/p&gt;

&lt;h3&gt;CGAL and the Metaverse&lt;/h3&gt;

&lt;p&gt;We didn't come by accident to South By, but were invited by a manager of a software development team working for f**k (or m**a?), which heavily uses CGAL.
The goal of the invitation was to meet the team of &lt;s&gt;engineers&lt;/s&gt;metamates (programming geeks), but also to meet the users of their software (design geeks), as well as the future inhabitants of the metaverse (again, geeks). Meeting these end users showed us the importance of adding progress reporting and cancel features to, say, 3D Boolean operations (see pull request &lt;a href=&quot;https://github.com/CGAL/cgal/pull/6461&quot;&gt;PR 6461&lt;/a&gt;), although most South By attendees reacted allergic to the word &quot;cancel&quot;...&lt;/p&gt;

&lt;p&gt;While it is one thing to provide geometric algorithms to the makers of the Metaverse, it became clear that we have to make CGAL accessible to the avatars who will start to program within the metaverse using CGAL software components from the virtual CGAL store.
This means goodbye to C++, and hello visual and cerebral programming, or at least coming up with an intuitive binding as typing on a virtual keyboard in a virtual Emacs is not really a productive way to code inside the metaverse.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;mailto:info@cgal.org?subject=sxsw&quot;&gt;Drop us a line&lt;/a&gt; with a guess which CGAL data structure is the most heavily used in the following scene and get the chance to win a CGAL doodle (see next section).&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/VizvZM05fnc&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;Yacht Clubs, Doodles, and a CGAL NFT&lt;/h3&gt;

&lt;p&gt; While prices of yachts such as the Sheherazade are dropping fast these days, being a member of the &lt;a href=&quot;https://boredapeyachtclub.com/#/home&quot;&gt;Bored Ape Yacht Club&lt;/a&gt; remains a luxury for the happy few. &lt;a href=&quot;https://doodles.app/&quot;&gt;Doodles&lt;/a&gt; are more affordable non-fungible tokens (or NFT), and we convinced Scott Martin to design one hundred brand new CGAL focused NFT doodles.
Scott plans to combine their well-known characters with textures generated with the help of Voronoi diagrams, heat maps, and barycentric coordinates. These doodles will primarily be used by CGAL developers and users as visual ID on development platforms such as GitHub.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I never had imagined that the pattern on a giraffe is a Voronoi diagram!&lt;/p&gt;
 &lt;p&gt;&lt;small&gt;Scott Martin, Doodle Inc.&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While the price of the CGAL doodles will not skyrocket (one hundred NFTs is a lot for our niche community), we have one CGAL algorithm under development that will soon be distributed under the AGPL, and at the same time as an NFT with a single instance to be used by one of the customers of GeometryFactory, the CGAL company. As chances are high that some other company sees a more profitable use case for this NFT, it will make an offer, leading to a transaction where the CGAL Project gets a cut. In the worst case, the new CGAL component will end up in the safe of a rich collector, or on a floppy disk sent to the moon just like Jeff Koons &lt;a href=&quot;https://www.artnews.com/art-news/news/jeff-koons-nft-1234623176/&quot;&gt;plan for his latest artwork&lt;/a&gt;. Several successful transactions  may ultimately enable us to buy one of the bored apes -- and join their yacht club.

&lt;p&gt;The CGAL NFT will be on the Ethereum blockchain, and the idea came us while at the South By session &lt;a href=&quot;https://schedule.sxsw.com/2022/events/PP116975&quot;&gt;Blitzscaling&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Attribution&lt;/h3&gt;

&lt;p&gt;Pretty similar to &lt;i&gt;restitution&lt;/i&gt;, claims for physical objects as the &lt;a href=&quot;https://www.theguardian.com/commentisfree/2022/feb/05/parthenon-marbles-greece-restitution&quot;&gt;Partheon Marbles&lt;/a&gt; in the British Museum by Greece, &lt;i&gt;attribution&lt;/i&gt;, that is to giving a thing the correct name, is a major moral issue and was heavily discussed in Austin.
While &lt;i&gt;Apollonius graph&lt;/i&gt; and &lt;i&gt;Minkowski sum&lt;/i&gt; are acknowledged by
science historians to be correctly attributed, several historians have
serious doubts that the term &lt;i&gt;Delaunay triangulation&lt;/i&gt; is appropriate. Recent research shows that the characteristics of being &quot;the triangulation which maximizes the minimal angle&quot; was already described in one of the oldest and most famous Chinese mathematical texts, the &lt;a href=&quot;https://en.wikipedia.org/wiki/Zhoubi_Suanjing&quot;&gt;Zhoubi Suanjing&lt;/a&gt;.
It is not clear that Sonia Delaunay was aware of this, but &lt;i&gt;Ignorantia juris non excusat&lt;/i&gt;. And as we now know about it, we have to change -- the pull request is on the way.&lt;/p&gt;


&lt;p&gt;&lt;b&gt;This April joke came with a &lt;a href=&quot;https://cgal.github.io/cgal-web/April22/index.html&quot;&gt;gallery.&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL to participate in the Google Summer of Code 2022</title>
   <link href="http://www.cgal.org/news/2022/03/08/gsoc-2022-mentoring/"/>
   <updated>2022-03-08T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2022/03/08/gsoc-2022-mentoring</id>
   <content type="html">
&lt;p&gt;The CGAL Project is a &lt;a href=&quot;https://summerofcode.withgoogle.com/programs/2022/organizations/cgal-project&quot;&gt;mentoring organization&lt;/a&gt;
for the &lt;a href=&quot;https://summerofcode.withgoogle.com/programs/2022&quot;&gt;Google Summer of Code 2022&lt;/a&gt;.
Have a look at our &lt;a href=&quot;https://github.com/CGAL/cgal/wiki/Project-Ideas&quot;&gt;Project Ideas&lt;/a&gt; page.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.4 released</title>
   <link href="http://www.cgal.org/2022/01/31/cgal54/"/>
   <updated>2022-01-31T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2022/01/31/cgal54</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.4&quot;&gt;Download CGAL-5.4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/index.html&quot;&gt;CGAL-5.4 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.4 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2021/07/06/cgal53&quot;&gt;CGAL 5.3&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general-changes&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/general_intro.html&quot;&gt;General changes&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;Added the cmake target &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::CGAL_Basic_viewer&lt;/code&gt; to ease the compilation of programs using the basic viewer-based function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::draw()&lt;/code&gt;. This target will define the macro and link with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_Qt5&lt;/code&gt; target when linked with it.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;The kernel providing exact constructions and exact predicates (&lt;a href=&quot;https://doc.cgal.org/5.4/Kernel_23/classCGAL_1_1Exact__predicates__exact__constructions__kernel.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Exact_predicates_exact_constructions_kernel&lt;/code&gt;&lt;/a&gt;) is now thread-safe. See changes in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2D and 3D Linear Geometry Kernel&lt;/code&gt; for more details.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Geomview_stream&lt;/code&gt; and all the dependent features have been removed from CGAL. Those features were actually no longer supported since CGAL-5.3 but it was not properly announced.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;shape-regularization-new-package&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgShapeRegularization&quot;&gt;Shape Regularization&lt;/a&gt; (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package enables to regularize a set of segments and open or closed contours in 2D and a set of planes in 3D such that all input objects are rotated and aligned with respect to the user-specified conditions. In addition, it provides a global regularization framework that can be adjusted for the user needs and any type of geometric objects.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;weights-new-package&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgWeights&quot;&gt;Weights&lt;/a&gt; (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package provides a simple and unified interface to different types of weights. In particular, it groups all weights into three category: analytic weights including all basic weights which can be computed analytically for a query point with respect to its local neighbors in 2D and 3D; barycentric weights, including all weights which can be computed for a query point with respect to the vertices of a planar polygon; and weighting regions, including all weights which are used to balance other weights.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-generalized-barycentric-coordinates-major-changes&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgBarycentricCoordinates2&quot;&gt;2D Generalized Barycentric Coordinates&lt;/a&gt; (major changes)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The headers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Segment_coordinates_2.h&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangle_coordinates_2.h&lt;/code&gt; are renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;segment_coordinates_2.h&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;triangle_coordinates_2.h&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The classes &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Segment__coordinates__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Segment_coordinates_2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Triangle__coordinates__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangle_coordinates_2&lt;/code&gt;&lt;/a&gt; are deprecated. The free functions &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Segment__coordinates__2.html#a134d363dccaeecb5621fa608fac76eaf&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compute_segment_coordinates_2()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Triangle__coordinates__2.html#a958fee3ad9613d7bfa9d7a976aa3548f&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compute_triangle_coordinates_2()&lt;/code&gt;&lt;/a&gt; are deprecated as well. Instead, the free functions &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/group__PkgBarycentricCoordinates2RefFunctions.html#gab856ca68d37f58e6cdf74c8aac6f4245&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;segment_coordinates_2()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/group__PkgBarycentricCoordinates2RefFunctions.html#gaa378786f8996dbcefe7923ebb711e4dd&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;triangle_coordinates_2()&lt;/code&gt;&lt;/a&gt; should be used.&lt;/li&gt;
    &lt;li&gt;The enums &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/namespaceCGAL_1_1Barycentric__coordinates.html#aedeeb072a2024053a016afd15e591331&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Query_point_location&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/namespaceCGAL_1_1Barycentric__coordinates.html#a5e5682512438422f23d6080edc49c05b&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type_of_algorithm&lt;/code&gt;&lt;/a&gt; are deprecated. Instead, the enum &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/namespaceCGAL_1_1Barycentric__coordinates.html#a478bbcec416216b2274ee4b4e97b0e6c&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Computation_policy_2&lt;/code&gt;&lt;/a&gt; should be used.&lt;/li&gt;
    &lt;li&gt;The classes &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Wachspress__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wachspress_2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Discrete__harmonic__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Discrete_harmonic_2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Mean__value__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mean_value_2&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Generalized__barycentric__coordinates__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Generalized_barycentric_coordinates_2&lt;/code&gt;&lt;/a&gt; are deprecated. As consequence, the concept &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1BarycentricCoordinates__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BarycentricCoordinates_2&lt;/code&gt;&lt;/a&gt; is deprecated as well. Instead, the classes &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Wachspress__coordinates__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wachspress_coordinates_2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Discrete__harmonic__coordinates__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Discrete_harmonic_coordinates_2&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Mean__value__coordinates__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mean_value_coordinates_2&lt;/code&gt;&lt;/a&gt; should be used.&lt;/li&gt;
    &lt;li&gt;Added the class &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Harmonic__coordinates__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Harmonic_coordinates_2&lt;/code&gt;&lt;/a&gt; to compute approximate harmonic coordinates in 2D. These coordinates satisfy all properties of barycentric coordinates inside any simple polygon.&lt;/li&gt;
    &lt;li&gt;Added a new concept &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1DiscretizedDomain__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscretizedDomain_2&lt;/code&gt;&lt;/a&gt; and a model of this concept called &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Delaunay__domain__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delaunay_domain_2&lt;/code&gt;&lt;/a&gt;, which is based on the &lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgMesh2&quot;&gt;Mesh 2&lt;/a&gt; package. A model of this concept is required to use &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Harmonic__coordinates__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Harmonic_coordinates_2&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;Added free functions to compute Wachspress, discrete harmonic, and mean value coordinates.&lt;/li&gt;
    &lt;li&gt;All free functions and classes are now using ranges and property maps.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-linear-geometry-kernel&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgKernel23&quot;&gt;2D and 3D Linear Geometry Kernel&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;Most operations on &lt;a href=&quot;https://doc.cgal.org/5.4/Kernel_23/classCGAL_1_1Exact__predicates__exact__constructions__kernel.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Exact_predicates_exact_constructions_kernel&lt;/code&gt;&lt;/a&gt; objects are now thread-safe if &lt;a href=&quot;https://doc.cgal.org/5.4/Number_types/group__nt__cgal.html#ga0849ff44771b19582218ebdfa5614f64&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Exact_rational&lt;/code&gt;&lt;/a&gt; is &lt;a href=&quot;https://doc.cgal.org/5.3/Number_types/classmpq__class.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mpq_class&lt;/code&gt;&lt;/a&gt; (from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GMPXX&lt;/code&gt;), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::multiprecision::mpq_rational&lt;/code&gt; or &lt;a href=&quot;https://doc.cgal.org/5.3/Number_types/classCGAL_1_1MP__Float.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Quotient&amp;lt;CGAL::MP_Float&amp;gt;&lt;/code&gt;&lt;/a&gt;. The objects are not atomic though, so the usual restrictions on avoiding race conditions apply. For users who do not use threads, this can be disabled with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_HAS_NO_THREADS&lt;/code&gt;.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added documentation for the class &lt;a href=&quot;https://doc.cgal.org/5.4/Kernel_23/classCGAL_1_1Projection__traits__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projection_traits_3&lt;/code&gt;&lt;/a&gt;, which enables the use of 2D algorithms on the projections of 3D data onto an arbitrary plane.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;construct_centroid_2_object()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compute_determinant_2_object()&lt;/code&gt; in &lt;a href=&quot;https://doc.cgal.org/5.4/Kernel_23/classCGAL_1_1Projection__traits__xy__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projection_traits_xy_3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.4/Kernel_23/classCGAL_1_1Projection__traits__xz__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projection_traits_xz_3&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://doc.cgal.org/5.4/Kernel_23/classCGAL_1_1Projection__traits__yz__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projection_traits_yz_3&lt;/code&gt;&lt;/a&gt; classes.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added the functor &lt;a href=&quot;https://doc.cgal.org/5.4/Kernel_23/classKernel_1_1NonZeroCoordinateIndex__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NonZeroCoordinateIndex_3&lt;/code&gt;&lt;/a&gt; to the concept &lt;a href=&quot;https://doc.cgal.org/5.4/Kernel_23/classKernel.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt;&lt;/a&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int operator()(Vector_3)&lt;/code&gt; which returns the index of any coordinate of the vector different from zero, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt;.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-kernel&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgKernelD&quot;&gt;dD Kernel&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Most operations on &lt;a href=&quot;https://doc.cgal.org/5.4/Kernel_d/structCGAL_1_1Epeck__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epeck_d&lt;/code&gt;&lt;/a&gt; objects are now thread-safe, see 2D and 3D Linear Geometry Kernel for details.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgArrangementOnSurface2&quot;&gt;2D Arrangements&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Breaking Change:&lt;/strong&gt; The traits function objects &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compare_x_at_limit_2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compare_x_near_limit_2&lt;/code&gt; are renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compare_x_on_boundary_2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compare_x_near_boundary_2&lt;/code&gt;, respectively.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;A &lt;a href=&quot;https://doc.cgal.org/5.4/Arrangement_on_surface_2/group__PkgArrangementOnSurface2Concepts.html&quot;&gt;new hierarchy of traits concepts&lt;/a&gt; has been introduced. It captures all the valid combinations of boundary conditions for the 4 boundary sides of the parameter space. The 4 boundaries are Bottom, Top, Left, and Right. Each boundary side can be either contracted, identified, close, open, or oblivious. Not all possible combinations are valid. If one side is identified then the other must be as well. Two adjacent sides cannot be contracted.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;A new geometric traits, &lt;a href=&quot;https://doc.cgal.org/5.4/Arrangement_on_surface_2/classCGAL_1_1Arr__geodesic__arc__on__sphere__traits__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_geodesic_arc_on_sphere_traits_2&lt;/code&gt;&lt;/a&gt; has been introduced. It handles arcs of great circles embedded on the unit sphere.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-regularized-boolean-set-operations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgBooleanSetOperations2&quot;&gt;2D Regularized Boolean Set-Operations&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added an extra parameter (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UsePolylines&lt;/code&gt;) to all free functions ( &lt;a href=&quot;https://doc.cgal.org/5.4/Boolean_set_operations_2/group__boolean__complement.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;complement()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.4/Boolean_set_operations_2/group__boolean__do__intersect.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_intersect()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.4/Boolean_set_operations_2/group__boolean__intersection.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;intersection()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.4/Boolean_set_operations_2/group__boolean__join.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;join()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.4/Boolean_set_operations_2/group__boolean__difference.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;difference()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.4/Boolean_set_operations_2/group__boolean__symmetric__difference.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;symmetric_difference()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://doc.cgal.org/5.4/Boolean_set_operations_2/group__boolean__oriented__side.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oriented_side&lt;/code&gt;&lt;/a&gt;) to control whether to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polyline_traits_2&lt;/code&gt; as default traits. It is the new default as it provides better performances in general.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgMesh3&quot;&gt;3D Mesh Generation&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added support of weighted images for an improved quality of meshes generated from labeled images, along with a function &lt;a href=&quot;https://doc.cgal.org/5.4/Mesh_3/namespaceCGAL_1_1Mesh__3.html#ae5914bf77180ff8948c08046154ee727&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Mesh_3::generate_label_weights()&lt;/code&gt;&lt;/a&gt; to generate the weights.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgPolygonMeshProcessing&quot;&gt;Polygon Mesh Processing&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.4/Polygon_mesh_processing/group__measure__grp.html#ga10f7cd81645bafe936ac5eb4e58e67ef&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::match_faces()&lt;/code&gt;&lt;/a&gt;, which, given two polygon meshes, identifies their common faces as well as faces present in only either of them.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added the functions: &lt;a href=&quot;https://doc.cgal.org/5.4/Polygon_mesh_processing/group__PMP__distance__grp.html#ga6d4ecea831c33ac10eec42b5021fc183&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::bounded_error_Hausdorff_distance()&lt;/code&gt;&lt;/a&gt; that computes an estimate of the one-sided Hausdorff distance between two triangle meshes which is bounded by a user-specified error bound; &lt;a href=&quot;https://doc.cgal.org/5.4/Polygon_mesh_processing/group__PMP__distance__grp.html#ga9a7a682b5d9523135c8502e72117dffd&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::bounded_error_symmetric_Hausdorff_distance()&lt;/code&gt;&lt;/a&gt; that computes an estimate of the symmetric Hausdorff distance bounded by a user-specified error bound; and &lt;a href=&quot;https://doc.cgal.org/5.4/Polygon_mesh_processing/group__PMP__distance__grp.html#gab19e751107025a443e86baa9763aebf3&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::is_Hausdorff_distance_larger()&lt;/code&gt;&lt;/a&gt; that returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; if the bounded-error Hausdorff distance between two meshes is larger than the user-specified max distance.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added the functions &lt;a href=&quot;https://doc.cgal.org/5.4/Polygon_mesh_processing/group__measure__grp.html#ga30fa03722cd7aa599f6dcb115f54fec5&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::squared_edge_length()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.4/Polygon_mesh_processing/group__measure__grp.html#ga6eda3738815fd678df225f79ccfc3e03&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::squared_face_area()&lt;/code&gt;&lt;/a&gt;, which, compared to &lt;a href=&quot;https://doc.cgal.org/5.4/Polygon_mesh_processing/group__measure__grp.html#gae1674775d9fecada7f25710f425cff3a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::edge_length()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.4/Polygon_mesh_processing/group__measure__grp.html#ga6a1d7a825c09490b1e6613295343482b&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::face_area()&lt;/code&gt;&lt;/a&gt;, enable avoiding square-root operations.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added more functions in the &lt;a href=&quot;https://doc.cgal.org/5.4/Polygon_mesh_processing/classPMPCorefinementVisitor.html&quot;&gt;visitor of the corefinement based methods&lt;/a&gt; to track all vertex creations.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added an option to &lt;a href=&quot;https://doc.cgal.org/5.4/Polygon_mesh_processing/group__PMP__intersection__grp.html#gaf19c80ec12cbff7ebe9e69453f1d40b8&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::self_intersections()&lt;/code&gt;&lt;/a&gt; to report only a limited number of intersections (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maximum_number()&lt;/code&gt;).&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;the-heat-method&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgHeatMethod&quot;&gt;The Heat Method&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Added the functor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compute_squared_length_3&lt;/code&gt; providing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator(const Vector_3&amp;amp; v)&lt;/code&gt;, which computes the squared length of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt;, to the &lt;a href=&quot;https://doc.cgal.org/5.4/Heat_method_3/classHeatMethodTraits__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HeatMethodTraits_3&lt;/code&gt;&lt;/a&gt; concept.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgPointSetProcessing3&quot;&gt;Point Set Processing&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added support for &lt;a href=&quot;https://github.com/ethz-asl/libpointmatcher&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libpointmatcher::GenericDescriptorOutlierFilter&lt;/code&gt;&lt;/a&gt; that enables providing a map from a point to a weight associated with this point.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;shape-detection&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgShapeDetection&quot;&gt;Shape Detection&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added new shapes to the Region Growing algorithm on a point set: circles in 2D, spheres in 3D, and cylinders in 3D.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-solvers&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgSolverInterface&quot;&gt;CGAL and Solvers&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added support for the &lt;a href=&quot;https://osqp.org/&quot;&gt;OSQP solver&lt;/a&gt;. This solver enables to efficiently compute the convex Quadratic Programming (QP) problems arising in the context of several packages.&lt;/li&gt;
  &lt;/ul&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.4 beta1 released</title>
   <link href="http://www.cgal.org/2021/12/17/cgal54-beta1/"/>
   <updated>2021-12-17T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2021/12/17/cgal54-beta1</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.4-beta1&quot;&gt;Download CGAL-5.4-beta1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/index.html&quot;&gt;CGAL-5.4-beta1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.4 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2021/07/06/cgal53&quot;&gt;CGAL 5.3&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general-changes&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/general_intro.html&quot;&gt;General changes&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;Added the cmake target &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::CGAL_Basic_viewer&lt;/code&gt; to ease the compilation of programs using the basic viewer-based function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::draw()&lt;/code&gt;. This target will define the macro and link with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_Qt5&lt;/code&gt; target when linked with it.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;The kernel providing exact constructions and exact predicates (&lt;a href=&quot;https://doc.cgal.org/5.4/Kernel_23/classCGAL_1_1Exact__predicates__exact__constructions__kernel.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Exact_predicates_exact_constructions_kernel&lt;/code&gt;&lt;/a&gt;) is now thread-safe. See changes in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2D and 3D Linear Geometry Kernel&lt;/code&gt; for more details.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;shape-regularization-new-package&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgShapeRegularization&quot;&gt;Shape Regularization&lt;/a&gt; (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package enables to regularize a set of segments and open or closed contours in 2D and a set of planes in 3D such that all input objects are rotated and aligned with respect to the user-specified conditions. In addition, it provides a global regularization framework that can be adjusted for the user needs and any type of geometric objects.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;weights-new-package&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgWeights&quot;&gt;Weights&lt;/a&gt; (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package provides a simple and unified interface to different types of weights. In particular, it groups all weights into three category: analytic weights including all basic weights which can be computed analytically for a query point with respect to its local neighbors in 2D and 3D; barycentric weights, including all weights which can be computed for a query point with respect to the vertices of a planar polygon; and weighting regions, including all weights which are used to balance other weights.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-generalized-barycentric-coordinates-major-changes&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgBarycentricCoordinates2&quot;&gt;2D Generalized Barycentric Coordinates&lt;/a&gt; (major changes)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The headers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Segment_coordinates_2.h&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangle_coordinates_2.h&lt;/code&gt; are renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;segment_coordinates_2.h&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;triangle_coordinates_2.h&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The classes &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Segment__coordinates__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Segment_coordinates_2&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Triangle__coordinates__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangle_coordinates_2&lt;/code&gt;&lt;/a&gt; are deprecated. The free functions &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Segment__coordinates__2.html#a134d363dccaeecb5621fa608fac76eaf&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compute_segment_coordinates_2()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Triangle__coordinates__2.html#a958fee3ad9613d7bfa9d7a976aa3548f&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compute_triangle_coordinates_2()&lt;/code&gt;&lt;/a&gt; are deprecated as well. Instead, the free functions &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/group__PkgBarycentricCoordinates2RefFunctions.html#gab856ca68d37f58e6cdf74c8aac6f4245&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;segment_coordinates_2()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/group__PkgBarycentricCoordinates2RefFunctions.html#gaa378786f8996dbcefe7923ebb711e4dd&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;triangle_coordinates_2()&lt;/code&gt;&lt;/a&gt; should be used.&lt;/li&gt;
    &lt;li&gt;The enums &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/namespaceCGAL_1_1Barycentric__coordinates.html#aedeeb072a2024053a016afd15e591331&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Query_point_location&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/namespaceCGAL_1_1Barycentric__coordinates.html#a5e5682512438422f23d6080edc49c05b&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type_of_algorithm&lt;/code&gt;&lt;/a&gt; are deprecated. Instead, the enum &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/namespaceCGAL_1_1Barycentric__coordinates.html#a478bbcec416216b2274ee4b4e97b0e6c&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Computation_policy_2&lt;/code&gt;&lt;/a&gt; should be used.&lt;/li&gt;
    &lt;li&gt;The classes &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Wachspress__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wachspress_2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Discrete__harmonic__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Discrete_harmonic_2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Mean__value__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mean_value_2&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Generalized__barycentric__coordinates__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Generalized_barycentric_coordinates_2&lt;/code&gt;&lt;/a&gt; are deprecated. As consequence, the concept &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1BarycentricCoordinates__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BarycentricCoordinates_2&lt;/code&gt;&lt;/a&gt; is deprecated as well. Instead, the classes &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Wachspress__coordinates__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Wachspress_coordinates_2&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Discrete__harmonic__coordinates__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Discrete_harmonic_coordinates_2&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Mean__value__coordinates__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mean_value_coordinates_2&lt;/code&gt;&lt;/a&gt; should be used.&lt;/li&gt;
    &lt;li&gt;Added the class &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Harmonic__coordinates__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Harmonic_coordinates_2&lt;/code&gt;&lt;/a&gt; to compute approximate harmonic coordinates in 2D. These coordinates satisfy all properties of barycentric coordinates inside any simple polygon.&lt;/li&gt;
    &lt;li&gt;Added a new concept &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1DiscretizedDomain__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiscretizedDomain_2&lt;/code&gt;&lt;/a&gt; and a model of this concept called &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Delaunay__domain__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delaunay_domain_2&lt;/code&gt;&lt;/a&gt;, which is based on the &lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgMesh2&quot;&gt;Mesh 2&lt;/a&gt; package. A model of this concept is required to use &lt;a href=&quot;https://doc.cgal.org/5.4/Barycentric_coordinates_2/classCGAL_1_1Barycentric__coordinates_1_1Harmonic__coordinates__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Harmonic_coordinates_2&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;Added free functions to compute Wachspress, discrete harmonic, and mean value coordinates.&lt;/li&gt;
    &lt;li&gt;All free functions and classes are now using ranges and property maps.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-linear-geometry-kernel&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgKernel23&quot;&gt;2D and 3D Linear Geometry Kernel&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;Most operations on &lt;a href=&quot;https://doc.cgal.org/5.4/Kernel_23/classCGAL_1_1Exact__predicates__exact__constructions__kernel.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Exact_predicates_exact_constructions_kernel&lt;/code&gt;&lt;/a&gt; objects are now thread-safe if &lt;a href=&quot;https://doc.cgal.org/5.4/Number_types/group__nt__cgal.html#ga0849ff44771b19582218ebdfa5614f64&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Exact_rational&lt;/code&gt;&lt;/a&gt; is &lt;a href=&quot;https://doc.cgal.org/5.3/Number_types/classmpq__class.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mpq_class&lt;/code&gt;&lt;/a&gt; (from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GMPXX&lt;/code&gt;), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::multiprecision::mpq_rational&lt;/code&gt; or &lt;a href=&quot;https://doc.cgal.org/5.3/Number_types/classCGAL_1_1MP__Float.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Quotient&amp;lt;CGAL::MP_Float&amp;gt;&lt;/code&gt;&lt;/a&gt;. The objects are not atomic though, so the usual restrictions on avoiding race conditions apply. For users who do not use threads, this can be disabled with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_HAS_NO_THREADS&lt;/code&gt;.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added documentation for the class &lt;a href=&quot;https://doc.cgal.org/5.4/Kernel_23/classCGAL_1_1Projection__traits__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projection_traits_3&lt;/code&gt;&lt;/a&gt;, which enables the use of 2D algorithms on the projections of 3D data onto an arbitrary plane.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;construct_centroid_2_object()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compute_determinant_2_object()&lt;/code&gt; in &lt;a href=&quot;https://doc.cgal.org/5.4/Kernel_23/classCGAL_1_1Projection__traits__xy__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projection_traits_xy_3&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.4/Kernel_23/classCGAL_1_1Projection__traits__xz__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projection_traits_xz_3&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://doc.cgal.org/5.4/Kernel_23/classCGAL_1_1Projection__traits__yz__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projection_traits_yz_3&lt;/code&gt;&lt;/a&gt; classes.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added the functor &lt;a href=&quot;https://doc.cgal.org/5.4/Kernel_23/classKernel_1_1NonZeroCoordinateIndex__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NonZeroCoordinateIndex_3&lt;/code&gt;&lt;/a&gt; to the concept &lt;a href=&quot;https://doc.cgal.org/5.4/Kernel_23/classKernel.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt;&lt;/a&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int operator()(Vector_3)&lt;/code&gt; which returns the index of any coordinate of the vector different from zero, or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt;.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-kernel&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgKernelD&quot;&gt;dD Kernel&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Most operations on &lt;a href=&quot;https://doc.cgal.org/5.4/Kernel_d/structCGAL_1_1Epeck__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epeck_d&lt;/code&gt;&lt;/a&gt; objects are now thread-safe, see 2D and 3D Linear Geometry Kernel for details.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgArrangementOnSurface2&quot;&gt;2D Arrangements&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Breaking Change:&lt;/strong&gt; The traits function objects &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compare_x_at_limit_2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compare_x_near_limit_2&lt;/code&gt; are renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compare_x_on_boundary_2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compare_x_near_boundary_2&lt;/code&gt;, respectively.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;A &lt;a href=&quot;https://doc.cgal.org/5.4/Arrangement_on_surface_2/group__PkgArrangementOnSurface2Concepts.html&quot;&gt;new hierarchy of traits concepts&lt;/a&gt; has been introduced. It captures all the valid combinations of boundary conditions for the 4 boundary sides of the parameter space. The 4 boundaries are Bottom, Top, Left, and Right. Each boundary side can be either contracted, identified, close, open, or oblivious. Not all possible combinations are valid. If one side is identified then the other must be as well. Two adjacent sides cannot be contracted.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;A new geometric traits, &lt;a href=&quot;https://doc.cgal.org/5.4/Arrangement_on_surface_2/classCGAL_1_1Arr__geodesic__arc__on__sphere__traits__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_geodesic_arc_on_sphere_traits_2&lt;/code&gt;&lt;/a&gt; has been introduced. It handles arcs of great circles embedded on the unit sphere.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-regularized-boolean-set-operations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgBooleanSetOperations2&quot;&gt;2D Regularized Boolean Set-Operations&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added an extra parameter (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UsePolylines&lt;/code&gt;) to all free functions ( &lt;a href=&quot;https://doc.cgal.org/5.4/Boolean_set_operations_2/group__boolean__complement.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;complement()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.4/Boolean_set_operations_2/group__boolean__do__intersect.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_intersect()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.4/Boolean_set_operations_2/group__boolean__intersection.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;intersection()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.4/Boolean_set_operations_2/group__boolean__join.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;join()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.4/Boolean_set_operations_2/group__boolean__difference.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;difference()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/5.4/Boolean_set_operations_2/group__boolean__symmetric__difference.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;symmetric_difference()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://doc.cgal.org/5.4/Boolean_set_operations_2/group__boolean__oriented__side.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oriented_side&lt;/code&gt;&lt;/a&gt;) to control whether to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polyline_traits_2&lt;/code&gt; as default traits. It is the new default as it provides better performances in general.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgMesh3&quot;&gt;3D Mesh Generation&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added support of weighted images for an improved quality of meshes generated from labeled images, along with a function &lt;a href=&quot;https://doc.cgal.org/5.4/Mesh_3/namespaceCGAL_1_1Mesh__3.html#ae5914bf77180ff8948c08046154ee727&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Mesh_3::generate_label_weights()&lt;/code&gt;&lt;/a&gt; to generate the weights.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgPolygonMeshProcessing&quot;&gt;Polygon Mesh Processing&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.4/Polygon_mesh_processing/group__measure__grp.html#ga10f7cd81645bafe936ac5eb4e58e67ef&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::match_faces()&lt;/code&gt;&lt;/a&gt;, which, given two polygon meshes, identifies their common faces as well as faces present in only either of them.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added the functions: &lt;a href=&quot;https://doc.cgal.org/5.4/Polygon_mesh_processing/group__PMP__distance__grp.html#ga6d4ecea831c33ac10eec42b5021fc183&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::bounded_error_Hausdorff_distance()&lt;/code&gt;&lt;/a&gt; that computes an estimate of the one-sided Hausdorff distance between two triangle meshes which is bounded by a user-specified error bound; &lt;a href=&quot;https://doc.cgal.org/5.4/Polygon_mesh_processing/group__PMP__distance__grp.html#ga9a7a682b5d9523135c8502e72117dffd&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::bounded_error_symmetric_Hausdorff_distance()&lt;/code&gt;&lt;/a&gt; that computes an estimate of the symmetric Hausdorff distance bounded by a user-specified error bound; and &lt;a href=&quot;https://doc.cgal.org/5.4/Polygon_mesh_processing/group__PMP__distance__grp.html#gab19e751107025a443e86baa9763aebf3&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::is_Hausdorff_distance_larger()&lt;/code&gt;&lt;/a&gt; that returns &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;true&lt;/code&gt; if the bounded-error Hausdorff distance between two meshes is larger than the user-specified max distance.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added the functions &lt;a href=&quot;https://doc.cgal.org/5.4/Polygon_mesh_processing/group__measure__grp.html#ga30fa03722cd7aa599f6dcb115f54fec5&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::squared_edge_length()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.4/Polygon_mesh_processing/group__measure__grp.html#ga6eda3738815fd678df225f79ccfc3e03&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::squared_face_area()&lt;/code&gt;&lt;/a&gt;, which, compared to &lt;a href=&quot;https://doc.cgal.org/5.4/Polygon_mesh_processing/group__measure__grp.html#gae1674775d9fecada7f25710f425cff3a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::edge_length()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/5.4/Polygon_mesh_processing/group__measure__grp.html#ga6a1d7a825c09490b1e6613295343482b&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::face_area()&lt;/code&gt;&lt;/a&gt;, enable avoiding square-root operations.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added more functions in the &lt;a href=&quot;https://doc.cgal.org/5.4/Polygon_mesh_processing/classPMPCorefinementVisitor.html&quot;&gt;visitor of the corefinement based methods&lt;/a&gt; to track all vertex creations.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;Added an option to &lt;a href=&quot;https://doc.cgal.org/5.4/Polygon_mesh_processing/group__PMP__intersection__grp.html#gaf19c80ec12cbff7ebe9e69453f1d40b8&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::self_intersections()&lt;/code&gt;&lt;/a&gt; to report only a limited number of intersections (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;maximum_number()&lt;/code&gt;).&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;the-heat-method&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgHeatMethod&quot;&gt;The Heat Method&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Added the functor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compute_squared_length_3&lt;/code&gt; providing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator(const Vector_3&amp;amp; v)&lt;/code&gt;, which computes the squared length of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;v&lt;/code&gt;, to the &lt;a href=&quot;https://doc.cgal.org/5.4/Heat_method_3/classHeatMethodTraits__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HeatMethodTraits_3&lt;/code&gt;&lt;/a&gt; concept.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgPointSetProcessing3&quot;&gt;Point Set Processing&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added support for &lt;a href=&quot;https://github.com/ethz-asl/libpointmatcher&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libpointmatcher::GenericDescriptorOutlierFilter&lt;/code&gt;&lt;/a&gt; that enables providing a map from a point to a weight associated with this point.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;shape-detection&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgShapeDetection&quot;&gt;Shape Detection&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added new shapes to the Region Growing algorithm on a point set: circles in 2D, spheres in 3D, and cylinders in 3D.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-solvers&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgSolverInterface&quot;&gt;CGAL and Solvers&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added support for the &lt;a href=&quot;https://osqp.org/&quot;&gt;OSQP solver&lt;/a&gt;. This solver enables to efficiently compute the convex Quadratic Programming (QP) problems arising in the context of several packages.&lt;/li&gt;
  &lt;/ul&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Two new CGAL releases</title>
   <link href="http://www.cgal.org/news/2021/12/13/two_new_releases/"/>
   <updated>2021-12-13T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2021/12/13/two_new_releases</id>
   <content type="html">
&lt;div&gt;
  &lt;p&gt;The CGAL Open Source Project is pleased to announce today two new releases:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;/2021/12/13/cgal524&quot;&gt;CGAL-5.2.4&lt;/a&gt; is the fourth and last bug-fix release for CGAL-5.2, and&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/2021/12/13/cgal531&quot;&gt;CGAL-5.3.1&lt;/a&gt; is the most recent feature release of CGAL.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;The beta release CGAL-5.4-beta1 will be published soon, probably this week, and the final version of CGAL-5.4 is planned early 2022.&lt;/p&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.3.1 released</title>
   <link href="http://www.cgal.org/2021/12/13/cgal531/"/>
   <updated>2021-12-13T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2021/12/13/cgal531</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.3.1&quot;&gt;Download CGAL-5.3.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.3.1/Manual/index.html&quot;&gt;CGAL-5.3.1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.3.1 is a bug-fix release for &lt;a href=&quot;../../../../2021/07/06/cgal53&quot;&gt;CGAL 5.3&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2021/07/06/cgal53&quot;&gt;CGAL 5.3&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=label%3AMerged_in_5.3.1&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.2.4 released</title>
   <link href="http://www.cgal.org/2021/12/13/cgal524/"/>
   <updated>2021-12-13T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2021/12/13/cgal524</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.2.4&quot;&gt;Download CGAL-5.2.4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.2.4/Manual/index.html&quot;&gt;CGAL-5.2.4 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.2.4 is a bug-fix release for &lt;a href=&quot;../../../../2020/12/22/cgal52&quot;&gt;CGAL 5.2&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2021/07/06/cgal523&quot;&gt;CGAL 5.2.3&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=label%3AMerged_in_5.2.4+-label%3AMerged_in_5.2.3&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New in CGAL: Shape Regularization package</title>
   <link href="http://www.cgal.org/2021/11/16/shape-regularization/"/>
   <updated>2021-11-16T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2021/11/16/shape-regularization</id>
   <content type="html">
&lt;h3&gt;&lt;a href=&quot;https://geometryfactory.com/who-we-are/&quot;&gt;Dmitry Anisimov&lt;/a&gt;&amp;deg;,
    &lt;a href=&quot;https://sytov.net/about/&quot;&gt;Gennadii Sytov&lt;/a&gt;,
    &lt;a href=&quot;https://geometryfactory.com/who-we-are/&quot;&gt;Simon Giraudot&lt;/a&gt;&amp;deg;,
    &lt;a href=&quot;https://www-sop.inria.fr/members/Jean-Philippe.Bauchet/&quot;&gt;Jean-Philippe Bauchet&lt;/a&gt;&amp;#42;,
    &lt;a href=&quot;https://www-sop.inria.fr/members/Florent.Lafarge/&quot;&gt;Florent Lafarge&lt;/a&gt;&amp;#42;&lt;/h3&gt;
&lt;h4&gt;&amp;deg;&lt;a href=&quot;http://www.geometryfactory.com&quot; target=&quot;_blank&quot;&gt;GeometryFactory&lt;/a&gt;,
    &amp;#42;&lt;a href=&quot;https://www.inria.fr&quot;&gt;INRIA Sophia Antipolis&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;A typical reconstruction pipeline from a point set includes a *shape regularization* step.
During this step, geometric shapes, which have been detected in the previous steps,
such as lines and planes, are being regularized. Usually, three types of regularities
among these shapes are reinforced:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;i&gt;Parallelism:&lt;/i&gt; near parallel shapes are made exactly parallel.&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Orthogonality:&lt;/i&gt; near orthogonal shapes are made exactly orthogonal.&lt;/li&gt;
&lt;li&gt;&lt;i&gt;Collinearity:&lt;/i&gt; collinear shapes are made exactly collinear.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With the next CGAL release, a new package will add one more step towards a robust and component-based reconstruction pipeline.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt; The Shape Regularization Package&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/shape_regularisation/80.1.svg&quot;&gt;&lt;img src=&quot;../../../../images/shape_regularisation/80.1.svg&quot; style=&quot;max-width:50%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;This new CGAL package enables to regularize a set of segments and open or closed contours in 2D
and a set of planes in 3D such that all input objects are rotated and aligned with respect
to user-specified conditions. In addition, it provides a global regularization framework
that can be adjusted to user needs and for any type of geometric objects.
This package can also be used in conjunction with the &lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Shape_detection/index.html&quot;&gt;Shape Detection&lt;/a&gt; package.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;Segments&lt;/h4&gt;

&lt;p&gt;Given a set of unordered 2D segments, users can reinforce the three types of regularities above
among these segments. This regularization component is based on the global regularization framework.
We call this framework *QP Regularization* because at its core is a *Quadratic Programming (QP)* global
regularization algorithm. Segments are regularized twofold. The first two types of regularities:
parallelism and orthogonality make a part of so-called *angle-based regularization* because angles
are being adjusted while the third regularity: collinearity makes a part of so-called *offset-based
regularization* because the distance between segments is adjusted. The offset regularization
is performed after angle regularization. In the figure below, a set of 2D segments before (red)
and after (green) the angle and offset regularization are depicted.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/shape_regularisation/80.2.svg&quot;&gt;&lt;img src=&quot;../../../../images/shape_regularisation/80.2.svg&quot; style=&quot;max-width:50%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;The example below illustrates how to achieve the result from this figure using shape regularization in CGAL.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#include &amp;lt;CGAL/Simple_cartesian.h&amp;gt;
#include &amp;lt;CGAL/Shape_regularization/regularize_segments.h&amp;gt;

using Kernel = CGAL::Simple_cartesian&amp;lt;double&amp;gt;;
using Point_2 = typename Kernel::Point_2;
using Segment_2 = typename Kernel::Segment_2;

int main()
{
  // Create input segments.
  std::vector&amp;lt;Segment_2&amp;gt; segments =
  {
    Segment_2(Point_2(0.2, 0.0), Point_2(1.2, 0.0)),
    Segment_2(Point_2(1.2, 0.1), Point_2(2.2, 0.1)),
    Segment_2(Point_2(2.2, 0.0), Point_2(2.0, 2.0)),
    Segment_2(Point_2(2.0, 2.0), Point_2(1.0, 2.0)),
    Segment_2(Point_2(1.0, 1.9), Point_2(0.0, 1.9)),
    Segment_2(Point_2(0.0, 2.0), Point_2(0.2, 0.0))
  };

  // Regularize all segments: both angles and offsets.
  CGAL::Shape_regularization::Segments::regularize_segments(segments);

  return EXIT_SUCCESS
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;Contours&lt;/h4&gt;

&lt;p&gt;Given a set of ordered 2D points connected by segments, which form a *contour*, closed or open,
users can reinforce the three regularities above among consecutive edges of this contour.
When regularizing contours, we assume that each contour has at least one principal direction
that is a reference direction towards which the contour edges are rotated.
Given a set of such directions either estimated or user-specified, each edge is made either parallel
or orthogonal to these direction(s). In the figure below, a closed contour
before (red) and after (green)regularization is depicted. The principal direction
is the direction of the longest edge.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/shape_regularisation/80.13.svg&quot;&gt;&lt;img src=&quot;../../../../images/shape_regularisation/80.13.svg&quot; style=&quot;max-width:50%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;The example below shows the most straightforward entry point to the CGAL algorithm,
where we regularize a simple closed contour.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
#include &amp;lt;CGAL/Simple_cartesian.h&amp;gt;
#include &amp;lt;CGAL/Shape_regularization/regularize_contours.h&amp;gt;

using Kernel = CGAL::Simple_cartesian&amp;lt;double&amp;gt;;
using Point_2 = typename Kernel::Point_2;

int main()
{
  // Create input contour.
  const std::vector&amp;lt;Point_2&amp;gt; contour =
  {
    Point_2(0.00,  0.00),
    Point_2(0.50, -0.05),
    Point_2(1.00,  0.00),
    Point_2(1.05,  0.50),
    Point_2(1.00,  1.00),
    Point_2(0.00,  1.00)
  };

  // Regularize this contour.
  std::vector&amp;lt;Point_2&amp;gt; regularized;
  CGAL::Shape_regularization::Contours::regularize_closed_contour(contour, std::back_inserter(regularized));

  return EXIT_SUCCESS;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;Planes&lt;/h4&gt;

&lt;p&gt;An old hierarchical plane regularization algorithm that has been a part of CGAL
&lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Shape_detection/index.html&quot;&gt;Shape Detection&lt;/a&gt;
component is refactored and its API is improved. The algorithm enables to regularize a set of planes in 3D.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;Performance&lt;/h4&gt;

&lt;p&gt;The performance of the shape regularization for segments based on the global QP regularization framework
mostly depends on the used QP solver. The plot below shows how the computation time depends on the number
of input segments when using the external &lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Manual/thirdparty.html#thirdpartyOSQP&quot;&gt;OSQP&lt;/a&gt;) solver.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/shape_regularisation/80.10.svg&quot;&gt;&lt;img src=&quot;../../../../images/shape_regularisation/80.10.svg&quot; style=&quot;max-width:50%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Time in seconds to regularize angles (solid red) and offsets (solid green) without regrouping input segments
and with the groups of 10 segments for angles (dashed red) and offsets (dashed green).&lt;/p&gt;

&lt;p&gt;The contour regularization algorithms, both closed and open, have, in practice, a near-linear time behavior
with respect to the number of contour vertices as it can be seen from the plot below.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/shape_regularisation/80.16.svg&quot;&gt;&lt;img src=&quot;../../../../images/shape_regularisation/80.16.svg&quot; style=&quot;max-width:50%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Time in seconds to regularize closed (red) and open (green) contours.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;Status&lt;/h3&gt;

&lt;p&gt;The package Shape_Regularization is already integrated in CGAL's master branch
on the &lt;a href=&quot;https://github.com/CGAL/cgal/&quot;&gt;CGAL GitHub repository&lt;/a&gt;, and will be
officially released in the upcoming version of CGAL, CGAL 5.4, scheduled for December 2021.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.4/Manual/packages.html#PkgShapeRegularization&quot;&gt;Documentation of the package Shape_Regularization&lt;/a&gt;
&lt;br /&gt;
&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/tree/master&quot;&gt;CGAL master branch on GitHub&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Three new CGAL releases</title>
   <link href="http://www.cgal.org/news/2021/07/06/three_new_releases/"/>
   <updated>2021-07-06T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2021/07/06/three_new_releases</id>
   <content type="html">
&lt;div&gt;
  &lt;p&gt;The CGAL Open Source Project is pleased to announce today three new releases:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;/2021/07/06/cgal515&quot;&gt;CGAL-5.1.5&lt;/a&gt; is the fifth and last bug-fix release for CGAL-5.1,&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/2021/07/06/cgal523&quot;&gt;CGAL-5.2.2&lt;/a&gt; is the third bug-fix release for CGAL-5.3, and&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/2021/07/06/cgal53&quot;&gt;CGAL-5.3&lt;/a&gt; is the most recent feature release of CGAL.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;The development of CGAL will now focus on the future CGAL-5.4 (planned for December 2021), with bug-fixes regularly backported to the branches for CGAL-5.2.x and CGAL-5.3.x.&lt;/p&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.3 released</title>
   <link href="http://www.cgal.org/2021/07/06/cgal53/"/>
   <updated>2021-07-06T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2021/07/06/cgal53</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.3&quot;&gt;Download CGAL-5.3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/index.html&quot;&gt;CGAL-5.3 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.3 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2020/12/22/cgal52&quot;&gt;CGAL 5.2&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general-changes&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/general_intro.html&quot;&gt;General changes&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;The support for the compiled version of CGAL is dropped. Only the header-only version is supported.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;On Windows, the type used for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exact_rational&lt;/code&gt;, in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epick&lt;/code&gt; and indirectly (through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lazy_exact_nt&lt;/code&gt;)
   &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epeck&lt;/code&gt; may now be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::multiprecision::mpq_rational&lt;/code&gt;, as has been the case on other platforms
   for several releases. This depends on various options and is added to a list that includes
   &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mpq_class&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Gmpq&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;leda_rational&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Quotient&amp;lt;CGAL::MP_Float&amp;gt;&lt;/code&gt;.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;quadtrees-octrees-and-orthtrees-new-package&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgOrthtree&quot;&gt;Quadtrees, Octrees, and Orthtrees&lt;/a&gt; (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package implements a tree data structure in which each node encloses a hypercubic section
of space and each non-leave node has hypercubic children whose edge lengths are half its edge length.
Such a data structure is known as a quadtree in 2D, an octree in 3D, and is generalized
as an “orthtree” in higher dimensions.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulations-on-the-sphere-new-package&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgTriangulationOnSphere2&quot;&gt;Triangulations on the Sphere&lt;/a&gt; (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package enables the construction and manipulation of Delaunay triangulations on the 2-sphere.
Triangulations are built incrementally and can be modified by insertion or removal of vertices.
Point location querying and primitives to build the dual Voronoi diagram are provided.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;file-input--output&quot;&gt;File Input / Output&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Point set, polygon soup, and polygon mesh file I/O functions have been harmonized and documented:
      &lt;ul&gt;
        &lt;li&gt;Point set I/O functions can be found in the packages &lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgPolygonMeshProcessing&quot;&gt;Point_set_processing_3&lt;/a&gt;, and &lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgPointSet3&quot;&gt;Point_set_3&lt;/a&gt;.&lt;/li&gt;
        &lt;li&gt;Polygon mesh I/O functions can be found in the package &lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgBGL&quot;&gt;BGL&lt;/a&gt;.&lt;/li&gt;
        &lt;li&gt;Polygon soup I/O can be found in the package &lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgStreamSupport&quot;&gt;Stream_support&lt;/a&gt;.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;A comprehensive list of the supported file formats is available in the Stream_support package
&lt;a href=&quot;https://doc.cgal.org/5.3/Stream_support/index.html#IOstreamSupportedFormats&quot;&gt;here&lt;/a&gt;;
inversely, the following &lt;a href=&quot;https://doc.cgal.org/5.3/Stream_support/IOStreamSupportedFileFormats.html&quot;&gt;page&lt;/a&gt;
can be used to find out which CGAL data structures can be used given a specific file format.&lt;/p&gt;

  &lt;h3 id=&quot;requirements&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/thirdparty.html&quot;&gt;Requirements&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The CMake minimal version is now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.14&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The GNU compiler g++ versions 6 and 7 are no longer tested. Only version 8.3 or later are supported&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-linear-geometry-kernel&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgKernel23&quot;&gt;2D and 3D Linear Geometry Kernel&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_translation()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_scaling()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_reflection()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_rotation()&lt;/code&gt; to the classes
&lt;a href=&quot;https://doc.cgal.org/5.3/Kernel_23/classCGAL_1_1Aff__transformation__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Aff_transformation_2&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.3/Kernel_23/classCGAL_1_1Aff__transformation__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Aff_transformation_3&lt;/code&gt;&lt;/a&gt;,
which enable determining if the transformations use a specialized representation internally.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-regularized-boolean-set-operations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgBooleanSetOperations2&quot;&gt;2D Regularized Boolean Set-Operations&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added documentation for the free functions &lt;a href=&quot;https://doc.cgal.org/5.3/Boolean_set_operations_2/group__boolean__oriented__side.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oriented_side(const Point_2&amp;amp; p, ....)&lt;/code&gt;&lt;/a&gt;
that accept a point and a polygon.&lt;/li&gt;
    &lt;li&gt;Documentation has been improved across the whole package.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgPolygonMeshProcessing&quot;&gt;Polygon Mesh Processing&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the class &lt;a href=&quot;https://doc.cgal.org/5.3/Polygon_mesh_processing/structCGAL_1_1Polyhedral__envelope.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polyhedral_envelope&lt;/code&gt;&lt;/a&gt;,
providing a way to quickly check if a primitive (point, segment, or triangle)
is within a polyhedral envelope around a set of triangles. It is based on the work of
Bolun Wang, Teseo Schneider, Yixin Hu, Marco Attene, and Daniele Panozzo.
“Exact and efficient polyhedral envelope containment check.” (ACM Trans. Graph., 39-4, July 2020).&lt;/li&gt;
    &lt;li&gt;Added more functions in the &lt;a href=&quot;https://doc.cgal.org/5.3/Polygon_mesh_processing/classPMPCorefinementVisitor.html&quot;&gt;visitor of the corefinement based methods&lt;/a&gt;
to track all edge creations.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-topology&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgSurfaceMeshTopologySummary&quot;&gt;Surface Mesh Topology&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.3/Surface_mesh_topology/classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology.html#a8d7c4cba2cf2cff542f5cd93117233db&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Surface_mesh_topology::Curves_on_surface_topology::is_homotopic_to_simple_cycle()&lt;/code&gt;&lt;/a&gt;,
which can be used to determine whehter a closed path on a surface mesh can be continously
transformed to a cycle without self intersection.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-simplification&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgSurfaceMeshSimplification&quot;&gt;Surface Mesh Simplification&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added a filtering mechanism so that costly tests get only applied to the next candidate for the edge collapse.&lt;/li&gt;
    &lt;li&gt;Added the class &lt;a href=&quot;https://doc.cgal.org/5.3/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1Polyhedral__envelope__filter.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polyhedral_envelope_filter&lt;/code&gt;&lt;/a&gt;,
which enables to perform mesh simplification  inside a polyhedral envelope of the input mesh.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-polyline-simplification&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgPolylineSimplification2&quot;&gt;2D Polyline Simplification&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;When polylines have common subsequences of vertices, these subsequences may now be simplifified simultaneously.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-triangulations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgTriangulations&quot;&gt;dD Triangulations&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.3/Triangulation/classCGAL_1_1Regular__triangulation.html#aa8df2d138f341939e834bcdd7cb6c71a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_if_in_star()&lt;/code&gt;&lt;/a&gt;
to the class &lt;a href=&quot;https://doc.cgal.org/5.3/Triangulation/classCGAL_1_1Regular__triangulation.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Regular_triangulation&lt;/code&gt;&lt;/a&gt;,
which enables users to insert a point &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; in a regular triangulation on the condition that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt;
appears post-insertion in the star of a user-specified, existing vertex.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-alpha-shapes&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgAlphaShapes2&quot;&gt;2D and 3D Alpha Shapes&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The following deprecated classes have been removed: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alpha_shape_euclidean_traits_2&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Weighted_alpha_shape_euclidean_traits_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alpha_shape_euclidean_traits_3&lt;/code&gt;, and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Weighted_alpha_shape_euclidean_traits_3&lt;/code&gt;. All CGAL kernel can be used directly as models
of the concepts of the 2D and 3D Alpha Shape packages.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;classification&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgClassification&quot;&gt;Classification&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: the support for TensorFlow has been dropped; the
classifier &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::TensorFlow::Neural_network_classifier&lt;/code&gt; has been removed.&lt;/li&gt;
  &lt;/ul&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.2.3 released</title>
   <link href="http://www.cgal.org/2021/07/06/cgal523/"/>
   <updated>2021-07-06T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2021/07/06/cgal523</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.2.3&quot;&gt;Download CGAL-5.2.3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.2.3/Manual/index.html&quot;&gt;CGAL-5.2.3 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.2.3 is a bug-fix release for &lt;a href=&quot;../../../../2020/12/22/cgal52&quot;&gt;CGAL 5.2&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2021/06/02/cgal522&quot;&gt;CGAL 5.2.2&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=label%3AMerged_in_5.2.3+-label%3AMerged_in_5.2.2&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.1.5 released</title>
   <link href="http://www.cgal.org/2021/07/06/cgal515/"/>
   <updated>2021-07-06T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2021/07/06/cgal515</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.1.5&quot;&gt;Download CGAL-5.1.5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.1.5/Manual/index.html&quot;&gt;CGAL-5.1.5 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.1.5 is a bug-fix release for &lt;a href=&quot;../../../../2020/09/08/cgal51&quot;&gt;CGAL 5.1&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2021/06/02/cgal514&quot;&gt;CGAL 5.1.4&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=label%3AMerged_in_5.1.5+-label%3AMerged_in_5.1.4&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New in CGAL: Triangulations on the Sphere</title>
   <link href="http://www.cgal.org/2021/06/21/Triangulations_on_the_sphere/"/>
   <updated>2021-06-21T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2021/06/21/Triangulations_on_the_sphere</id>
   <content type="html">
&lt;h3&gt;&lt;a href=&quot;https://geometryfactory.com/who-we-are/&quot;&gt;Mael Rouxel-Labbé&lt;/a&gt;&amp;deg;,
&lt;a href=&quot;https://members.loria.fr/Monique.Teillaud/&quot;&gt;Monique Teillaud&lt;/a&gt;&amp;#42;,
and Claudia Werner&amp;#42;&lt;/h3&gt;
&lt;h4&gt;&amp;deg;&lt;a href=&quot;http://www.geometryfactory.com&quot; target=&quot;_blank&quot;&gt;GeometryFactory&lt;/a&gt;, &amp;#42;&lt;a href=&quot;https://www.inria.fr&quot;&gt;INRIA&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;The Delaunay triangulation, along with its dual – the Voronoi diagram, are some of the most
well-known structures of computational geometry. In fact first defined in a periodic setting,
these structures have been since extended to numerous domains: the Euclidean or hyperbolic spaces,
periodic tilings, any Riemannian manifold, etc. A domain that is particularly of interest
in geographic information systems, geology or structural molecular biology is the sphere.&lt;/p&gt;

&lt;p&gt;One could of course simply construct a triangulation of a set of points on the sphere using
the 3D embedding and a 3D Delaunay triangulation, however this would incur needless costs, especially
as this would be a degenerate configuration: all points are on the same Delaunay ball.
The construction of triangulations of the sphere as 2D triangulations has in addition
an obvious advantage over 3D triangulations: the Delaunay &quot;in-sphere&quot; test, that is given a face,
whether another point is within or outside the circumscribing ball of this face trivially reduces
to an orientation test of the points in 3D.&lt;/p&gt;

&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/ToS2-in_sphere.png&quot;&gt;&lt;img src=&quot;../../../../images/ToS2-in_sphere.png&quot; style=&quot;max-width:50%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;In the above figure, the Delaunay property on the sphere is illustrated: the circumscribing circle (in green)
on the sphere of the Delaunay face p1p2p3 is empty. This circle is also the intersection
of the supporting plane of the face with the sphere, and checking the Delaunay property is simply
figuring whether a point is above or below a plane!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;2D Triangulations on the Sphere&lt;/h3&gt;

&lt;p&gt;Joining the ever-growing family of CGAL triangulations is a new triangulation package: &lt;b&gt;2D Triangulations on the Sphere&lt;/b&gt;.
This package enables the construction of Delaunay triangulations and Voronoi diagrams on the 2-sphere.
It supports point insertion, location, and removal. Its API is similar to that of the other triangulation
packages of CGAL (&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PartTriangulationsAndDelaunayTriangulations&quot;&gt;2D
and 3D triangulations, hyperbolic triangulations, periodic triangulations, ...&lt;a /&gt;).

&lt;br /&gt;&lt;br /&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/ToS2.png&quot;&gt;&lt;img src=&quot;../../../../images/ToS2.png&quot; style=&quot;max-width:95%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;br /&gt;&lt;small&gt;Delaunay triangulations and Voronoi diagrams of radar data on Earth (click to enlarge).&lt;/small&gt;
&lt;/div&gt;

&lt;br /&gt;
&lt;p&gt;&lt;/p&gt;

&lt;br /&gt;
&lt;h3&gt;Status&lt;/h3&gt;

&lt;p&gt;The package Triangulation_on_sphere_2 is already integrated in CGAL's master branch
on the &lt;a href=&quot;https://github.com/CGAL/cgal/&quot;&gt;CGAL GitHub repository&lt;/a&gt;, and will be
officially released in the upcoming version of CGAL, CGAL 5.3, scheduled for June 2021.&lt;/p&gt;

&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgTriangulationOnSphere2&quot;&gt;Documentation of the package Triangulation_on_sphere_2&lt;/a&gt;
&lt;br /&gt;
&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/tree/master&quot;&gt;CGAL master branch on GitHub&lt;/a&gt;
&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.3 beta1 released</title>
   <link href="http://www.cgal.org/2021/06/04/cgal53-beta1/"/>
   <updated>2021-06-04T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2021/06/04/cgal53-beta1</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.3-beta1&quot;&gt;Download CGAL-5.3-beta1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/index.html&quot;&gt;CGAL-5.3-beta1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.3 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2020/12/22/cgal52&quot;&gt;CGAL 5.2&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;quadtrees-octrees-and-orthtrees-new-package&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgOrthtree&quot;&gt;Quadtrees, Octrees, and Orthtrees&lt;/a&gt; (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package implements a tree data structure in which each node encloses a hypercubic section
of space and each non-leave node has hypercubic children whose edge lengths are half its edge length.
Such a data structure is known as a quadtree in 2D, an octree in 3D, and is generalized
as an “orthtree” in higher dimensions.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulations-on-the-sphere-new-package&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgTriangulationOnSphere2&quot;&gt;Triangulations on the Sphere&lt;/a&gt; (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package enables the construction and manipulation of Delaunay triangulations on the 2-sphere.
Triangulations are built incrementally and can be modified by insertion or removal of vertices.
Point location querying and primitives to build the dual Voronoi diagram are provided.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;file-input--output&quot;&gt;File Input / Output&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Point set, polygon soup, and polygon mesh file I/O functions have been harmonized and documented:
      &lt;ul&gt;
        &lt;li&gt;Point set I/O functions can be found in the packages &lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgPolygonMeshProcessing&quot;&gt;Point_set_processing_3&lt;/a&gt;, and &lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgPointSet3&quot;&gt;Point_set_3&lt;/a&gt;.&lt;/li&gt;
        &lt;li&gt;Polygon mesh I/O functions can be found in the package &lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgBGL&quot;&gt;BGL&lt;/a&gt;.&lt;/li&gt;
        &lt;li&gt;Polygon soup I/O can be found in the package &lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgStreamSupport&quot;&gt;Stream_support&lt;/a&gt;.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;A comprehensive list of the supported file formats is available in the Stream_support package
&lt;a href=&quot;https://doc.cgal.org/5.3/Stream_support/index.html#IOstreamSupportedFormats&quot;&gt;here&lt;/a&gt;;
inversely, the following &lt;a href=&quot;https://doc.cgal.org/5.3/Stream_support/IOStreamSupportedFileFormats.html&quot;&gt;page&lt;/a&gt;
can be used to find out which CGAL data structures can be used given a specific file format.&lt;/p&gt;

  &lt;h3 id=&quot;requirements&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/thirdparty.html&quot;&gt;Requirements&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The CMake minimal version is now &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3.14&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The GNU compiler g++ versions 6 and 7 are no longer tested. Only version 8.3 or later are supported&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-linear-geometry-kernel&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgKernel23&quot;&gt;2D and 3D Linear Geometry Kernel&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_translation()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_scaling()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_reflection()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_rotation()&lt;/code&gt; to the classes
&lt;a href=&quot;https://doc.cgal.org/5.3/Kernel_23/classCGAL_1_1Aff__transformation__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Aff_transformation_2&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.3/Kernel_23/classCGAL_1_1Aff__transformation__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Aff_transformation_3&lt;/code&gt;&lt;/a&gt;,
which enable determining if the transformations use a specialized representation internally.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-regularized-boolean-set-operations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgBooleanSetOperations2&quot;&gt;2D Regularized Boolean Set-Operations&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added documentation for the free functions &lt;a href=&quot;https://doc.cgal.org/5.3/Boolean_set_operations_2/group__boolean__oriented__side.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;oriented_side(const Point_2&amp;amp; p, ....)&lt;/code&gt;&lt;/a&gt;
that accept a point and a polygon.&lt;/li&gt;
    &lt;li&gt;Documentation has been improved across the whole package.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgPolygonMeshProcessing&quot;&gt;Polygon Mesh Processing&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the class &lt;a href=&quot;https://doc.cgal.org/5.3/Polygon_mesh_processing/structCGAL_1_1Polyhedral__envelope.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polyhedral_envelope&lt;/code&gt;&lt;/a&gt;,
providing a way to quickly check if a primitive (point, segment, or triangle)
is within a polyhedral envelope around a set of triangles. It is based on the work of
Bolun Wang, Teseo Schneider, Yixin Hu, Marco Attene, and Daniele Panozzo.
“Exact and efficient polyhedral envelope containment check.” (ACM Trans. Graph., 39-4, July 2020).&lt;/li&gt;
    &lt;li&gt;Added more functions in the &lt;a href=&quot;https://doc.cgal.org/5.3/Polygon_mesh_processing/classPMPCorefinementVisitor.html&quot;&gt;visitor of the corefinement based methods&lt;/a&gt;
to track all edge creations.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-topology&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgSurfaceMeshTopologySummary&quot;&gt;Surface Mesh Topology&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.3/Surface_mesh_topology/classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology.html#a8d7c4cba2cf2cff542f5cd93117233db&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Surface_mesh_topology::Curves_on_surface_topology::is_homotopic_to_simple_cycle()&lt;/code&gt;&lt;/a&gt;,
which can be used to determine whehter a closed path on a surface mesh can be continously
transformed to a cycle without self intersection.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-simplification&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgSurfaceMeshSimplification&quot;&gt;Surface Mesh Simplification&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added a filtering mechanism so that costly tests get only applied to the next candidate for the edge collapse.&lt;/li&gt;
    &lt;li&gt;Added the class &lt;a href=&quot;https://doc.cgal.org/5.3/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1Polyhedral__envelope__filter.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polyhedral_envelope_filter&lt;/code&gt;&lt;/a&gt;,
which enables to perform mesh simplification  inside a polyhedral envelope of the input mesh.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-polyline-simplification&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgPolylineSimplification2&quot;&gt;2D Polyline Simplification&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;When polylines have common subsequences of vertices, these subsequences may now be simplifified simultaneously.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-triangulations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgTriangulations&quot;&gt;dD Triangulations&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.3/Triangulation/classCGAL_1_1Regular__triangulation.html#aa8df2d138f341939e834bcdd7cb6c71a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_if_in_star()&lt;/code&gt;&lt;/a&gt;
to the class &lt;a href=&quot;https://doc.cgal.org/5.3/Triangulation/classCGAL_1_1Regular__triangulation.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Regular_triangulation&lt;/code&gt;&lt;/a&gt;,
which enables users to insert a point &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt; in a regular triangulation on the condition that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;p&lt;/code&gt;
appears post-insertion in the star of a user-specified, existing vertex.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-alpha-shapes&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgAlphaShapes2&quot;&gt;2D and 3D Alpha Shapes&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The following deprecated classes have been removed: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alpha_shape_euclidean_traits_2&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Weighted_alpha_shape_euclidean_traits_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alpha_shape_euclidean_traits_3&lt;/code&gt;, and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Weighted_alpha_shape_euclidean_traits_3&lt;/code&gt;. All CGAL kernel can be used directly as models
of the concepts of the 2D and 3D Alpha Shape packages.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;classification&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.3/Manual/packages.html#PkgClassification&quot;&gt;Classification&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: the support for TensorFlow has been dropped; the
classifier &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::TensorFlow::Neural_network_classifier&lt;/code&gt; has been removed.&lt;/li&gt;
  &lt;/ul&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Two bug-fix releases</title>
   <link href="http://www.cgal.org/news/2021/06/02/new_bugfix_releases/"/>
   <updated>2021-06-02T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2021/06/02/new_bugfix_releases</id>
   <content type="html">
&lt;div&gt;
  &lt;p&gt;The CGAL Open Source Project is pleased to announce today two new releases:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;/2021/06/02/cgal514&quot;&gt;CGAL-5.1.4&lt;/a&gt; is the fourth bug-fix release for CGAL-5.1, and&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/2021/06/02/cgal522&quot;&gt;CGAL-5.2.2&lt;/a&gt; is the second bug-fix release for CGAL-5.2.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;The first beta release of CGAL-5.3 (CGAL-5.3-beta1) is planned for this week. The development of CGAL will then focus on the future CGAL-5.4 (planned for December 2021), with bug-fixes regularly backported to the branches for CGAL-5.2.x and CGAL-5.3.x.&lt;/p&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.2.2 released</title>
   <link href="http://www.cgal.org/2021/06/02/cgal522/"/>
   <updated>2021-06-02T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2021/06/02/cgal522</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.2.2&quot;&gt;Download CGAL-5.2.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.2.2/Manual/index.html&quot;&gt;CGAL-5.2.2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.2.2 is a bug-fix release for &lt;a href=&quot;../../../../2020/12/22/cgal52&quot;&gt;CGAL 5.2&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2021/03/17/cgal521&quot;&gt;CGAL 5.2.1&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=label%3AMerged_in_5.2.2+-label%3AMerged_in_5.2.1&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.1.4 released</title>
   <link href="http://www.cgal.org/2021/06/02/cgal514/"/>
   <updated>2021-06-02T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2021/06/02/cgal514</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.1.4&quot;&gt;Download CGAL-5.1.4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.1.4/Manual/index.html&quot;&gt;CGAL-5.1.4 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.1.4 is a bug-fix release for &lt;a href=&quot;../../../../2020/09/08/cgal51&quot;&gt;CGAL 5.1&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2021/03/17/cgal513&quot;&gt;CGAL 5.1.3&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=label%3AMerged_in_5.1.4+-label%3AMerged_in_5.1.3&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New in CGAL: Orthtree package</title>
   <link href="http://www.cgal.org/2021/04/27/Orthtree/"/>
   <updated>2021-04-27T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2021/04/27/Orthtree</id>
   <content type="html">
&lt;h3&gt;
    &lt;a href=&quot;https://github.com/JacksonCampolattaro&quot;&gt;Jackson Campolattaro&lt;/a&gt;,
    &lt;a href=&quot;https://github.com/sgiraudot&quot;&gt;Simon Giraudot&lt;/a&gt;,
    &lt;a href=&quot;https://www.linkedin.com/in/c%C3%A9dric-portaneri-1516a1108/&quot;&gt;Cédric Portaneri&lt;/a&gt;,
    &lt;a href=&quot;https://www.linkedin.com/in/tong-zhao-8613a8116/&quot;&gt;Tong Zhao&lt;/a&gt;,
    &lt;a href=&quot;https://team.inria.fr/titane/pierre-alliez/&quot;&gt;Pierre Alliez&lt;/a&gt;
&lt;/h3&gt;
&lt;h4&gt;
    &lt;a href=&quot;https://geometryfactory.com/&quot;&gt;GeometryFactory&lt;/a&gt;,
    &lt;a href=&quot;https://www.inria.fr/&quot;&gt;Inria&lt;/a&gt;
&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Tree data structures for partitioning space are a common tool to improve the performance of spatial searches and
related tasks. CGAL provides a variety of tree structures suited to different purposes, including the
&lt;a href=&quot;https://doc.cgal.org/latest/Spatial_searching/classCGAL_1_1Kd__tree.html&quot;&gt;kD tree&lt;/a&gt; and the
&lt;a href=&quot;https://doc.cgal.org/latest/AABB_tree/index.html&quot;&gt;AABB tree&lt;/a&gt;. In the next release, three new classic
structures will be available: the quadtree, the octree, and the orthtree (the natural generalization to higher dimensions).&lt;/p&gt;

&lt;h3&gt;The Orthtree Package&lt;/h3&gt;

&lt;p&gt;CGAL’s newest package, &lt;b&gt;Orthtree&lt;/b&gt;, provides a collection of functions for building and refining trees, performing traversals of their
nodes and searches using different query types.&lt;/p&gt;

&lt;p&gt;Most features are templated such that users can finely tune the behavior of
the tree. For example, users can define their own patterns for traversal of the tree, or criteria for refining its
structure.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;../../../../images/orthtree.png&quot;&gt;&lt;img src=&quot;../../../../images/orthtree.png&quot; /&gt;&lt;/a&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;An orthtree is especially useful in situations where the kD Tree is not an option, for example when bounding boxes 
cannot have high aspect-ratios. The RANSAC algorithm used by
CGAL’s &lt;a href=&quot;https://doc.cgal.org/latest/Shape_detection/index.html&quot;&gt;Shape Detection package&lt;/a&gt;
previously depended on its own octree implementation for this reason, and it now uses this package.&lt;/p&gt;

&lt;h4&gt;Performance&lt;/h4&gt;

&lt;p float=&quot;left&quot;&gt;
    &lt;a href=&quot;../../../../images/orthtree_construction_benchmark.png&quot;&gt;&lt;img src=&quot;../../../../images/orthtree_construction_benchmark.png&quot; size=&quot;50%&quot; /&gt;&lt;/a&gt;
    &lt;a href=&quot;../../../../images/orthtree_nearest_neighbor_benchmark.png&quot;&gt;&lt;img src=&quot;../../../../images/orthtree_nearest_neighbor_benchmark.png&quot; size=&quot;50%&quot; /&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;The octree can be constructed linearly faster than the kDTree, but individual searches are linearly slower on average.
This may make it a worthwhile option in situations where the tree must be reconstructed often, or is only used a small
number of times.&lt;/p&gt;

&lt;h4&gt;Usage&lt;/h4&gt;

&lt;p&gt;Building a new octree and refining it with the default criteria can be done with only a few lines of code:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;../../../../images/octree_construction_example.png&quot;&gt;&lt;img src=&quot;../../../../images/octree_construction_example.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Once the tree is constructed, queries can be performed:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;../../../../images/octree_query_example.png&quot;&gt;&lt;img src=&quot;../../../../images/octree_query_example.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The tree can also be traversed manually, or with the help of a traversal function:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;../../../../images/octree_traversal_example.png&quot;&gt;&lt;img src=&quot;../../../../images/octree_traversal_example.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Status and links&lt;/h3&gt;
&lt;p&gt;The package &lt;em&gt;Orthtree&lt;/em&gt; is available in CGAL's master branch and will be part of the upcoming CGAL 5.3 release.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Orthtree/index.html&quot;&gt;Documentation of the package
Octree&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/tree/master&quot;&gt;CGAL master branch on GitHub&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL User Portrait: Clubhouse</title>
   <link href="http://www.cgal.org/news/2021/04/01/Clubhouse/"/>
   <updated>2021-04-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2021/04/01/Clubhouse</id>
   <content type="html">
&lt;p&gt;You probably wouldn't have imagined that &lt;em&gt;Alpha Exploration&lt;/em&gt;, which runs
&lt;a href=&quot;https://apps.apple.com/us/app/id1503133294&quot;&gt;Clubhouse&lt;/a&gt;, is a user of CGAL.
You can learn all about how Alpha Exploration and other companies use it in our
Clubhouse room &quot;Geometry meets Industry&quot;.&lt;/p&gt;

&lt;h3&gt;The Room&lt;/h3&gt;

&lt;p&gt;This room is hosted by cgal.org and we have invited a handful of industrial CGAL users.
We do not have CEOs as guests, but a lineup of six VPs of Engineering who are dealing with geometric
computing on an every day basis. They work in the application areas of autonomous cars,
animation, health care, defense, web mapping, and social networks. You will be amazed.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&quot;Geometry without images?!&quot; you may think, but you will understand quickly that to see
is not always that important. Lean back, close your eyes, and imagine a triangle...&lt;/p&gt;
 &lt;p&gt;&lt;small&gt;Rohan Seth, CTO of Alpha Exploration&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In case you are already a Clubhouse Member just join us on Sunday 18th of April at 6:00pm Paris time.&lt;/p&gt;

&lt;h3&gt;Talk Your Way Past the Bouncer&lt;/h3&gt;

&lt;p&gt;In case you are not a member, nothing is lost yet.   As a host, cgal.org has a quota
of hundred invitations to hand out, twenty of them with an open mic, that is you get the chance
to raise hand and interact with our guests.&lt;/p&gt;

&lt;p&gt;To apply, please drop a mail at
&lt;a href=&quot;mailto:clubhouse@cgal.org?subject=Please%20let%20me%20in&quot;&gt;clubhouse@cgal.org&lt;/a&gt;,
and let us know if you want to listen or speak.
Don't send us your CV, but also more than just your email address - after all we have to make a
choice. What are your achievements? What burning question do you have? Or whatever you can imagine
to convince us to pick you. We will strive for a mixed audience, and only for those of you  who want to speak,
we will organize a short interview to hear if you really come across.&lt;/p&gt;

&lt;h3&gt;GDPR&lt;/h3&gt;

&lt;p&gt;Concerning the personal information you share with cgal.org, we respect the European GDPR
Regulations. This may or may not be the case when you register in Clubhouse, once you get chosen.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;This April joke came with a &lt;a href=&quot;https://cgal.github.io/cgal-web/April21/index.html&quot;&gt;gallery.&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.2.1 released</title>
   <link href="http://www.cgal.org/2021/03/17/cgal521/"/>
   <updated>2021-03-17T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2021/03/17/cgal521</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.2.1&quot;&gt;Download CGAL-5.2.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.2.1/Manual/index.html&quot;&gt;CGAL-5.2.1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.2.1 is a bug-fix release for &lt;a href=&quot;../../../../2020/12/22/cgal52&quot;&gt;CGAL 5.2&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2020/12/22/cgal52&quot;&gt;CGAL 5.2&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=label%3AMerged_in_5.2.1&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.1.3 released</title>
   <link href="http://www.cgal.org/2021/03/17/cgal513/"/>
   <updated>2021-03-17T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2021/03/17/cgal513</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.1.3&quot;&gt;Download CGAL-5.1.3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.1.3/Manual/index.html&quot;&gt;CGAL-5.1.3 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.1.3 is a bug-fix release for &lt;a href=&quot;../../../../2020/09/08/cgal51&quot;&gt;CGAL 5.1&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2020/12/22/cgal512&quot;&gt;CGAL 5.1.2&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=label%3AMerged_in_5.1.3+-label%3AMerged_in_5.1.2&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.2 released</title>
   <link href="http://www.cgal.org/2020/12/22/cgal52/"/>
   <updated>2020-12-22T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2020/12/22/cgal52</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.2&quot;&gt;Download CGAL-5.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.2/Manual/index.html&quot;&gt;CGAL-5.2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.2 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2020/09/08/cgal51&quot;&gt;CGAL 5.1&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;dd-geometry-kernel&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.2/Manual/packages.html#PkgKernelD&quot;&gt;dD Geometry Kernel&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The kernels &lt;a href=&quot;https://doc.cgal.org/5.2/Kernel_d/structCGAL_1_1Epick__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epick_d&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.2/Kernel_d/structCGAL_1_1Epeck__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epeck_d&lt;/code&gt;&lt;/a&gt; gain two new functors:
&lt;a href=&quot;https://doc.cgal.org/5.2/Kernel_d/classCGAL_1_1Epeck__d_1_1Compute__power__product__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compute_power_product_d&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.2/Kernel_d/classCGAL_1_1Epeck__d_1_1Construct__power__sphere__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Construct_power_sphere_d&lt;/code&gt;&lt;/a&gt;,
to deal with weighted points.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.2/Manual/packages.html#PkgBGL&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a convenience header, &lt;a href=&quot;https://doc.cgal.org/5.2/BGL/graph__traits__inheritance__macros_8h.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL/boost/graph/graph_traits_inheritance_macros.h&lt;/code&gt;&lt;/a&gt;,
which enables easily making any class inheriting from a model of a face graph concept, a model of the same concept.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.2/BGL/group__PkgBGLEulerOperations.html#ga7dc63595108097b6e28b04fe962135f0&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;can_add_face()&lt;/code&gt;&lt;/a&gt;,
which tests whether a new face defined by a range of vertices can be added.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-fast-intersection-and-distance-computation-aabb-tree&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.2/Manual/packages.html#PkgAABBTree&quot;&gt;3D Fast Intersection and Distance Computation (AABB Tree)&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the move constructor and the assignment operator to the
&lt;a href=&quot;https://doc.cgal.org/5.2/AABB_tree/classCGAL_1_1AABB__tree.html&quot;&gt;AABB Tree&lt;/a&gt; class.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.2/Manual/packages.html#PkgArrangementOnSurface2&quot;&gt;2D Arrangements&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Replaced the use of legacy
&lt;a href=&quot;https://doc.cgal.org/5.2/STL_Extension/classCGAL_1_1Object.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;&lt;/a&gt;
to modern &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::variant&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Changed make-x-monotone return type from legacy
&lt;a href=&quot;https://doc.cgal.org/5.2/STL_Extension/classCGAL_1_1Object.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;&lt;/a&gt;
to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::variant&lt;/code&gt; in all traits concepts and models.
As there exists an implicit conversion from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::variant&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;,
the new code is backward compatible. However, it is recommended that all calls
to the make-x-monotone functions are fixed to use the new return type.&lt;/li&gt;
    &lt;li&gt;Changed &lt;a href=&quot;https://doc.cgal.org/5.2/Arrangement_on_surface_2/group__PkgArrangementOnSurface2Funcs.html#gae20b2917f6de15db9bf025f83abf8e89&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decompose()&lt;/code&gt;&lt;/a&gt;
interface to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::variant&lt;/code&gt; instead of legacy
&lt;a href=&quot;https://doc.cgal.org/5.2/STL_Extension/classCGAL_1_1Object.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;&lt;/a&gt;
As explained above, the code is backward compatible. However, it is recommended
that all calls to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decompose()&lt;/code&gt; are fixed to use the new interface.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.2/Manual/packages.html#PkgSurfaceMesh&quot;&gt;Surface Mesh&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.2/Surface_mesh/classCGAL_1_1Surface__mesh.html#aad000a07a5ada30536f194b28b59d111&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clear_without_removing_property_maps()&lt;/code&gt;&lt;/a&gt;
to clear a mesh but keep all the created property maps added.&lt;/li&gt;
    &lt;li&gt;Added the functions &lt;a href=&quot;https://doc.cgal.org/5.2/Surface_mesh/classCGAL_1_1Surface__mesh.html#a2a3dd8c01f7fba7b640d85bfd1c41d90&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove_property_maps&amp;lt;Index_type&amp;gt;()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.2/Surface_mesh/classCGAL_1_1Surface__mesh.html#a5696da09300f3d0eafed117668bb3bec&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove_all_property_maps()&lt;/code&gt;&lt;/a&gt;
to remove all added property maps by index type or all of them respectively.&lt;/li&gt;
    &lt;li&gt;Added the functions &lt;a href=&quot;https://doc.cgal.org/5.2/Surface_mesh/classCGAL_1_1Surface__mesh.html#a40ada5068bf6d529a511c46767dfd21d&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set_recycle_garbage()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.2/Surface_mesh/classCGAL_1_1Surface__mesh.html#a081a87aaf7e56e6b4f9afba99967f8f4&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;does_recycle_garbage()&lt;/code&gt;&lt;/a&gt;
to the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Surface_mesh&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.2/Manual/packages.html#PkgPolygonMeshProcessing&quot;&gt;Polygon Mesh Processing&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a visitor to the functions
&lt;a href=&quot;https://doc.cgal.org/5.2/Polygon_mesh_processing/group__PMP__meshing__grp.html#ga70d65044f8c7309c24ade88fa280124a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::triangulate_face()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.2/Polygon_mesh_processing/group__PMP__meshing__grp.html#gacaaff4d520500c530d9c3d5ebe2a0760&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::triangulate_faces()&lt;/code&gt;&lt;/a&gt;,
that enables the user to keep track of the newly created faces through the triangulation process.&lt;/li&gt;
    &lt;li&gt;Added an option in &lt;a href=&quot;https://doc.cgal.org/5.2/Polygon_mesh_processing/group__PMP__corefinement__grp.html#ga6447dee822aaf92016f34512ce0b3456&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::corefine()&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://doc.cgal.org/5.2/Polygon_mesh_processing/group__PMP__corefinement__grp.html#gaa491feee9e41f725332bea0ea1215578&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::split()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.2/Polygon_mesh_processing/group__PMP__corefinement__grp.html#ga30082762ba2d947cba304e2884d96a99&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::clip()&lt;/code&gt;&lt;/a&gt;
functions, which enable the operations to be performed on a mesh with
self-intersections present in the intersection area.&lt;/li&gt;
    &lt;li&gt;Added an optional range parameter to &lt;a href=&quot;https://doc.cgal.org/5.2/Polygon_mesh_processing/group__PMP__repairing__grp.html#ga8ae4352e67d2b099994ac8990c13bd41&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::stitch_borders()&lt;/code&gt;&lt;/a&gt;,
which can be used to specify which boundary cycles are eligible for stitching.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-parameterization&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.2/Manual/packages.html#PkgSurfaceMeshParameterization&quot;&gt;Surface Mesh Parameterization&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a new parameterization method, &lt;a href=&quot;https://doc.cgal.org/5.2/Surface_mesh_parameterization/index.html#title11&quot;&gt;Iterative Authalic Parameterization&lt;/a&gt;.
It is based on the work of Jain, Hardik, Manuel Wollhaf, and Olaf Hellwich,
“Learning to Reconstruct Symmetric Shapes using Planar Parameterization of 3D Surface.”
(IEEE International Conference on Computer Vision Workshops, 2019).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;classification&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.2/Manual/packages.html#PkgClassification&quot;&gt;Classification&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: new IO format for the &lt;a href=&quot;https://doc.cgal.org/5.2/Classification/classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETHZ::Random_Forest&lt;/code&gt;&lt;/a&gt; classifier:
a conversion function from the outdated format to the new one is provided.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;Added new functions to the class &lt;a href=&quot;https://doc.cgal.org/5.2/Classification/classCGAL_1_1Classification_1_1Evaluation.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Classification::Evaluation&lt;/code&gt;&lt;/a&gt;:
&lt;a href=&quot;https://doc.cgal.org/5.2/Classification/classCGAL_1_1Classification_1_1Evaluation.html#a20c5fc43af44c96ce0cae40375be934f&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;append()&lt;/code&gt;&lt;/a&gt;
to enrich the evaluation with additional results;
&lt;a href=&quot;https://doc.cgal.org/5.2/Classification/classCGAL_1_1Classification_1_1Evaluation.html#a706a85bb1deefee350ce71855bc023e9&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;confusion()&lt;/code&gt;&lt;/a&gt;
to access the confusion matrix;
output functions to save the evaluation to and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASCII&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML&lt;/code&gt; stream.&lt;/li&gt;
    &lt;li&gt;Added a new operator, &lt;a href=&quot;https://doc.cgal.org/5.2/Classification/group__PkgClassificationFeature.html#gaf4b1504270f25061f63f05743a17e5d1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Classification::feature_cast&amp;lt;&amp;gt;&lt;/code&gt;&lt;/a&gt;,
for easy conversions.&lt;/li&gt;
    &lt;li&gt;The classes &lt;a href=&quot;https://doc.cgal.org/5.2/Classification/classCGAL_1_1Classification_1_1Feature__set.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Classification::Feature_set&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.2/Classification/classCGAL_1_1Classification_1_1Label__set.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Classification::Label_set&lt;/code&gt;&lt;/a&gt;
are now models of the concept &lt;a href=&quot;https://doc.cgal.org/5.2/Circulator/classRange.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Range&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;The class &lt;a href=&quot;https://doc.cgal.org/5.2/Classification/classCGAL_1_1Classification_1_1Label.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Classification::Label&lt;/code&gt;&lt;/a&gt;
now has attributes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;standard_index&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;color&lt;/code&gt;,
with automatic selection if the ASPRS standard names are used.&lt;/li&gt;
    &lt;li&gt;Added new functions in &lt;a href=&quot;https://doc.cgal.org/5.2/Classification/classCGAL_1_1Classification_1_1Point__set__feature__generator.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Classification::Point_set_feature_iterator&lt;/code&gt;&lt;/a&gt;,
to enable users to select which features should be generated.&lt;/li&gt;
    &lt;li&gt;Added a new function, &lt;a href=&quot;https://doc.cgal.org/5.2/Classification/classCGAL_1_1Classification_1_1Label__set.html#adeb3b046f640c091b1f123e982386e43&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Classification::Label_set::is_valid_ground_truth()&lt;/code&gt;&lt;/a&gt;,
to help users check if a ground truth matches a given label set.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.2/Manual/packages.html#PkgPointSetProcessing3&quot;&gt;Point Set Processing&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a function &lt;a href=&quot;https://doc.cgal.org/5.2/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga221d4efde44f42aefe153cb927138efe&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::scanline_orient_normals()&lt;/code&gt;&lt;/a&gt;,
which orients a point cloud by estimating a line of sight.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-convex-hulls&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.2/Manual/packages.html#PkgConvexHull3&quot;&gt;3D Convex Hulls&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.2/Convex_hull_3/group__PkgConvexHull3Functions.html#ga9a1ead3126e42fbf46ef269466cddc8f&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::halfspace_intersection_interior_point_3()&lt;/code&gt;&lt;/a&gt;,
which can be used to retrieve the point that is the most interior a convex closed volume
defined by the intersection of a set of halfspaces.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.2/Manual/packages.html#PkgTriangulation3&quot;&gt;3D Triangulations&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added new classes and functions to visit the cells and simplices intersected by a line segment,
see Sections &lt;a href=&quot;https://doc.cgal.org/5.2/Triangulation_3/classCGAL_1_1Triangulation__3.html#amgrp0d087ed77bb99ca595c92d2cd2ab59b9&quot;&gt;Segment Cell Iterator&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.2/Triangulation_3/classCGAL_1_1Triangulation__3.html#amgrp2447c1d2dce281951a0a4d8aecd3f35d&quot;&gt;Segment Simplex Iterator&lt;/a&gt;, respectively.&lt;/li&gt;
  &lt;/ul&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.1.2 released</title>
   <link href="http://www.cgal.org/2020/12/22/cgal512/"/>
   <updated>2020-12-22T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2020/12/22/cgal512</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.1.2&quot;&gt;Download CGAL-5.1.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.1.2/Manual/index.html&quot;&gt;CGAL-5.1.2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.1.2 is a bug-fix release for &lt;a href=&quot;../../../../2020/09/08/cgal51&quot;&gt;CGAL 5.1&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2020/11/16/cgal511&quot;&gt;CGAL 5.1.1&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/pulls?q=label%3AMerged_in_5.1.2+-label%3AMerged_in_5.1.1&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.2 beta1 released</title>
   <link href="http://www.cgal.org/2020/11/18/cgal52-beta1/"/>
   <updated>2020-11-18T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2020/11/18/cgal52-beta1</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.2-beta1&quot;&gt;Download CGAL-5.2-beta1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.2/Manual/index.html&quot;&gt;CGAL-5.2-beta1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.2 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2020/09/08/cgal51&quot;&gt;CGAL 5.1&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;dd-geometry-kernel&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.2/Manual/packages.html#PkgKernelD&quot;&gt;dD Geometry Kernel&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The kernels &lt;a href=&quot;https://doc.cgal.org/5.2/Kernel_d/structCGAL_1_1Epick__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epick_d&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.2/Kernel_d/structCGAL_1_1Epeck__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epeck_d&lt;/code&gt;&lt;/a&gt; gain two new functors:
&lt;a href=&quot;https://doc.cgal.org/5.2/Kernel_d/classCGAL_1_1Epeck__d_1_1Compute__power__product__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compute_power_product_d&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.2/Kernel_d/classCGAL_1_1Epeck__d_1_1Construct__power__sphere__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Construct_power_sphere_d&lt;/code&gt;&lt;/a&gt;,
to deal with weighted points.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.2/Manual/packages.html#PkgBGL&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a convenience header, &lt;a href=&quot;https://doc.cgal.org/5.2/BGL/graph__traits__inheritance__macros_8h.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL/boost/graph/graph_traits_inheritance_macros.h&lt;/code&gt;&lt;/a&gt;,
which enables easily making any class inheriting from a model of a face graph concept, a model of the same concept.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.2/BGL/group__PkgBGLEulerOperations.html#ga7dc63595108097b6e28b04fe962135f0&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;can_add_face()&lt;/code&gt;&lt;/a&gt;,
which tests whether a new face defined by a range of vertices can be added.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-fast-intersection-and-distance-computation-aabb-tree&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.2/Manual/packages.html#PkgAABBTree&quot;&gt;3D Fast Intersection and Distance Computation (AABB Tree)&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the move constructor and the assignment operator to the
&lt;a href=&quot;https://doc.cgal.org/5.2/AABB_tree/classCGAL_1_1AABB__tree.html&quot;&gt;AABB Tree&lt;/a&gt; class.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.2/Manual/packages.html#PkgArrangementOnSurface2&quot;&gt;2D Arrangements&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Replaced the use of legacy
&lt;a href=&quot;https://doc.cgal.org/5.2/STL_Extension/classCGAL_1_1Object.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;&lt;/a&gt;
to modern &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::variant&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Changed make-x-monotone return type from legacy
&lt;a href=&quot;https://doc.cgal.org/5.2/STL_Extension/classCGAL_1_1Object.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;&lt;/a&gt;
to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::variant&lt;/code&gt; in all traits concepts and models.
As there exists an implicit conversion from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::variant&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;,
the new code is backward compatible. However, it is recommended that all calls
to the make-x-monotone functions are fixed to use the new return type.&lt;/li&gt;
    &lt;li&gt;Changed &lt;a href=&quot;https://doc.cgal.org/5.2/Arrangement_on_surface_2/group__PkgArrangementOnSurface2Funcs.html#gae20b2917f6de15db9bf025f83abf8e89&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decompose()&lt;/code&gt;&lt;/a&gt;
interface to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::variant&lt;/code&gt; instead of legacy
&lt;a href=&quot;https://doc.cgal.org/5.2/STL_Extension/classCGAL_1_1Object.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;&lt;/a&gt;
As explained above, the code is backward compatible. However, it is recommended
that all calls to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decompose()&lt;/code&gt; are fixed to use the new interface.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.2/Manual/packages.html#PkgSurfaceMesh&quot;&gt;Surface Mesh&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.2/Surface_mesh/classCGAL_1_1Surface__mesh.html#aad000a07a5ada30536f194b28b59d111&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clear_without_removing_property_maps()&lt;/code&gt;&lt;/a&gt;
to clear a mesh but keep all the created property maps added.&lt;/li&gt;
    &lt;li&gt;Added the functions &lt;a href=&quot;https://doc.cgal.org/5.2/Surface_mesh/classCGAL_1_1Surface__mesh.html#a2a3dd8c01f7fba7b640d85bfd1c41d90&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove_property_maps&amp;lt;Index_type&amp;gt;()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.2/Surface_mesh/classCGAL_1_1Surface__mesh.html#a5696da09300f3d0eafed117668bb3bec&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove_all_property_maps()&lt;/code&gt;&lt;/a&gt;
to remove all added property maps by index type or all of them respectively.&lt;/li&gt;
    &lt;li&gt;Added the functions &lt;a href=&quot;https://doc.cgal.org/5.2/Surface_mesh/classCGAL_1_1Surface__mesh.html#a40ada5068bf6d529a511c46767dfd21d&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set_recycle_garbage()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.2/Surface_mesh/classCGAL_1_1Surface__mesh.html#a081a87aaf7e56e6b4f9afba99967f8f4&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;does_recycle_garbage()&lt;/code&gt;&lt;/a&gt;
to the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Surface_mesh&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.2/Manual/packages.html#PkgPolygonMeshProcessing&quot;&gt;Polygon Mesh Processing&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a visitor to the functions
&lt;a href=&quot;https://doc.cgal.org/5.2/Polygon_mesh_processing/group__PMP__meshing__grp.html#ga70d65044f8c7309c24ade88fa280124a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::triangulate_face()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.2/Polygon_mesh_processing/group__PMP__meshing__grp.html#gacaaff4d520500c530d9c3d5ebe2a0760&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::triangulate_faces()&lt;/code&gt;&lt;/a&gt;,
that enables the user to keep track of the newly created faces through the triangulation process.&lt;/li&gt;
    &lt;li&gt;Added an option in &lt;a href=&quot;https://doc.cgal.org/5.2/Polygon_mesh_processing/group__PMP__corefinement__grp.html#ga6447dee822aaf92016f34512ce0b3456&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::corefine()&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://doc.cgal.org/5.2/Polygon_mesh_processing/group__PMP__corefinement__grp.html#gaa491feee9e41f725332bea0ea1215578&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::split()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.2/Polygon_mesh_processing/group__PMP__corefinement__grp.html#ga30082762ba2d947cba304e2884d96a99&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::clip()&lt;/code&gt;&lt;/a&gt;
functions, which enable the operations to be performed on a mesh with
self-intersections present in the intersection area.&lt;/li&gt;
    &lt;li&gt;Added an optional range parameter to &lt;a href=&quot;https://doc.cgal.org/5.2/Polygon_mesh_processing/group__PMP__repairing__grp.html#ga8ae4352e67d2b099994ac8990c13bd41&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::stitch_borders()&lt;/code&gt;&lt;/a&gt;,
which can be used to specify which boundary cycles are eligible for stitching.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-parameterization&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.2/Manual/packages.html#PkgSurfaceMeshParameterization&quot;&gt;Surface Mesh Parameterization&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a new parameterization method, &lt;a href=&quot;https://doc.cgal.org/5.2/Surface_mesh_parameterization/index.html#title11&quot;&gt;Iterative Authalic Parameterization&lt;/a&gt;.
It is based on the work of Jain, Hardik, Manuel Wollhaf, and Olaf Hellwich,
“Learning to Reconstruct Symmetric Shapes using Planar Parameterization of 3D Surface.”
(IEEE International Conference on Computer Vision Workshops, 2019).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;classification&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.2/Manual/packages.html#PkgClassification&quot;&gt;Classification&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: new IO format for the &lt;a href=&quot;https://doc.cgal.org/5.2/Classification/classCGAL_1_1Classification_1_1ETHZ_1_1Random__forest__classifier.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETHZ::Random_Forest&lt;/code&gt;&lt;/a&gt; classifier:
a conversion function from the outdated format to the new one is provided.&lt;/p&gt;
    &lt;/li&gt;
    &lt;li&gt;Added new functions to the class &lt;a href=&quot;https://doc.cgal.org/5.2/Classification/classCGAL_1_1Classification_1_1Evaluation.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Classification::Evaluation&lt;/code&gt;&lt;/a&gt;:
&lt;a href=&quot;https://doc.cgal.org/5.2/Classification/classCGAL_1_1Classification_1_1Evaluation.html#a20c5fc43af44c96ce0cae40375be934f&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;append()&lt;/code&gt;&lt;/a&gt;
to enrich the evaluation with additional results;
&lt;a href=&quot;https://doc.cgal.org/5.2/Classification/classCGAL_1_1Classification_1_1Evaluation.html#a706a85bb1deefee350ce71855bc023e9&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;confusion()&lt;/code&gt;&lt;/a&gt;
to access the confusion matrix;
output functions to save the evaluation to and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ASCII&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HTML&lt;/code&gt; stream.&lt;/li&gt;
    &lt;li&gt;Added a new operator, &lt;a href=&quot;https://doc.cgal.org/5.2/Classification/group__PkgClassificationFeature.html#gaf4b1504270f25061f63f05743a17e5d1&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Classification::feature_cast&amp;lt;&amp;gt;&lt;/code&gt;&lt;/a&gt;,
for easy conversions.&lt;/li&gt;
    &lt;li&gt;The classes &lt;a href=&quot;https://doc.cgal.org/5.2/Classification/classCGAL_1_1Classification_1_1Feature__set.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Classification::Feature_set&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.2/Classification/classCGAL_1_1Classification_1_1Label__set.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Classification::Label_set&lt;/code&gt;&lt;/a&gt;
are now models of the concept &lt;a href=&quot;https://doc.cgal.org/5.2/Circulator/classRange.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Range&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;The class &lt;a href=&quot;https://doc.cgal.org/5.2/Classification/classCGAL_1_1Classification_1_1Label.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Classification::Label&lt;/code&gt;&lt;/a&gt;
now has attributes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;standard_index&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;color&lt;/code&gt;,
with automatic selection if the ASPRS standard names are used.&lt;/li&gt;
    &lt;li&gt;Added new functions in &lt;a href=&quot;https://doc.cgal.org/5.2/Classification/classCGAL_1_1Classification_1_1Point__set__feature__generator.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Classification::Point_set_feature_iterator&lt;/code&gt;&lt;/a&gt;,
to enable users to select which features should be generated.&lt;/li&gt;
    &lt;li&gt;Added a new function, &lt;a href=&quot;https://doc.cgal.org/5.2/Classification/classCGAL_1_1Classification_1_1Label__set.html#adeb3b046f640c091b1f123e982386e43&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Classification::Label_set::is_valid_ground_truth()&lt;/code&gt;&lt;/a&gt;,
to help users check if a ground truth matches a given label set.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.2/Manual/packages.html#PkgPointSetProcessing3&quot;&gt;Point Set Processing&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a function &lt;a href=&quot;https://doc.cgal.org/5.2/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga221d4efde44f42aefe153cb927138efe&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::scanline_orient_normals()&lt;/code&gt;&lt;/a&gt;,
which orients a point cloud by estimating a line of sight.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-convex-hulls&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.2/Manual/packages.html#PkgConvexHull3&quot;&gt;3D Convex Hulls&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.2/Convex_hull_3/group__PkgConvexHull3Functions.html#ga9a1ead3126e42fbf46ef269466cddc8f&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::halfspace_intersection_interior_point_3()&lt;/code&gt;&lt;/a&gt;,
which can be used to retrieve the point that is the most interior a convex closed volume
defined by the intersection of a set of halfspaces.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.2/Manual/packages.html#PkgTriangulation3&quot;&gt;3D Triangulations&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added new classes and functions to visit the cells and simplices intersected by a line segment,
see Sections &lt;a href=&quot;https://doc.cgal.org/5.2/Triangulation_3/classCGAL_1_1Triangulation__3.html#amgrp0d087ed77bb99ca595c92d2cd2ab59b9&quot;&gt;Segment Cell Iterator&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.2/Triangulation_3/classCGAL_1_1Triangulation__3.html#amgrp2447c1d2dce281951a0a4d8aecd3f35d&quot;&gt;Segment Simplex Iterator&lt;/a&gt;, respectively.&lt;/li&gt;
  &lt;/ul&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Two bug-fix releases</title>
   <link href="http://www.cgal.org/news/2020/11/16/new_bugfix_releases/"/>
   <updated>2020-11-16T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2020/11/16/new_bugfix_releases</id>
   <content type="html">
&lt;div&gt;
  &lt;p&gt;The CGAL Open Source Project is pleased to announce today two new releases:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;/2020/11/16/cgal504&quot;&gt;CGAL-5.0.4&lt;/a&gt; is the fourth (and last) bug-fix release for CGAL-5.0, and&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/2020/11/16/cgal511&quot;&gt;CGAL-5.1.1&lt;/a&gt; is the first bug-fix release for CGAL-5.1.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;The first beta release of CGAL-5.2 (CGAL-5.2-beta1) is planned for this week. The development of CGAL will then focus on the future CGAL-5.3 (planned for June 2021), with bug-fixes regularly backported to the branches for CGAL-5.1.x and CGAL-5.2.&lt;/p&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.1.1 released</title>
   <link href="http://www.cgal.org/2020/11/16/cgal511/"/>
   <updated>2020-11-16T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2020/11/16/cgal511</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.1.1&quot;&gt;Download CGAL-5.1.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.1.1/Manual/index.html&quot;&gt;CGAL-5.1.1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.1.1 is a bug-fix release for &lt;a href=&quot;../../../../2020/09/08/cgal51&quot;&gt;CGAL 5.1&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2020/09/08/cgal51&quot;&gt;CGAL 5.1&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=label%3AMerged_in_5.1.1&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.0.4 released</title>
   <link href="http://www.cgal.org/2020/11/16/cgal504/"/>
   <updated>2020-11-16T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2020/11/16/cgal504</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.0.4&quot;&gt;Download CGAL-5.0.4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.0.4/Manual/index.html&quot;&gt;CGAL-5.0.4 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.0.4 is a bug-fix release for &lt;a href=&quot;../../../../2019/11/08/cgal50&quot;&gt;CGAL 5.0&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2020/08/03/cgal503&quot;&gt;CGAL 5.0.3&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=label%3AMerged_in_5.0.4+-label%3AMerged_in_5.0.3&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.1 released</title>
   <link href="http://www.cgal.org/2020/09/08/cgal51/"/>
   <updated>2020-09-08T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2020/09/08/cgal51</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/v5.1&quot;&gt;Download CGAL-5.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/index.html&quot;&gt;CGAL-5.1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.1 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2019/11/08/cgal50&quot;&gt;CGAL 5.0&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;tetrahedral-remeshing-new-package&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgTetrahedralRemeshing&quot;&gt;Tetrahedral Remeshing&lt;/a&gt; (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;This package implements a tetrahedral isotropic remeshing algorithm,
that improves the quality of tetrahedra in terms of dihedral angles,
while targeting a given edge length.&lt;/p&gt;

      &lt;p&gt;See also the associated &lt;a href=&quot;https://www.cgal.org/2020/08/07/Tetrahedral-remeshing/&quot;&gt;blog entry&lt;/a&gt;.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-topology-new-package&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgSurfaceMeshTopologySummary&quot;&gt;Surface Mesh Topology&lt;/a&gt; (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package enables the computation of some topological invariants of surfaces, such as:
      &lt;ul&gt;
        &lt;li&gt;test if two (closed) curves on a combinatorial surface are homotopic. Users can choose
between free homotopy and homotopy with fixed endpoints;&lt;/li&gt;
        &lt;li&gt;test is a curve is contractible;&lt;/li&gt;
        &lt;li&gt;compute shortest non-contractible cycles on a surface, with or without weights on edges.&lt;/li&gt;
      &lt;/ul&gt;

      &lt;p&gt;See also the associated &lt;a href=&quot;https://www.cgal.org/2020/05/08/Surface_mesh_topology/&quot;&gt;blog entry&lt;/a&gt;.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;optimal-bounding-box-new-package&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgOptimalBoundingBox&quot;&gt;Optimal Bounding Box&lt;/a&gt; (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;This package implements an optimization algorithm that aims to construct a close approximation
of the &lt;em&gt;optimal bounding box&lt;/em&gt; of a mesh or a point set, which is defined as the smallest
(in terms of volume) bounding box that contains a given mesh or point set.&lt;/p&gt;

      &lt;p&gt;See also the associated &lt;a href=&quot;https://www.cgal.org/2020/04/20/Optimal_bounding_box/&quot;&gt;blog entry&lt;/a&gt;.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The CGAL_Core library no longer requires &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Boost.Thread&lt;/code&gt;, even if the g++ compiler is used.&lt;/li&gt;
    &lt;li&gt;The minimal supported version of Boost is now 1.66.0.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;tutorials&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/tutorials.html&quot;&gt;Tutorials&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Two new, detailed tutorials have been added:
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/tuto_reconstruction.html&quot;&gt;Surface Reconstruction from Point Clouds&lt;/a&gt;,
which goes over a typical full processing pipeline in a CGAL environment.&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/tuto_gis.html&quot;&gt;Geographic Information Systems (GIS)&lt;/a&gt;,
which demonstrates usage of CGAL data structures and algorithms in the context of a typical GIS application.&lt;/li&gt;
      &lt;/ul&gt;

      &lt;p&gt;Both tutorials provide complete code.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-linear-geometry-kernel&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgKernel23&quot;&gt;2D and 3D Linear Geometry Kernel&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the functor &lt;a href=&quot;https://doc.cgal.org/5.1/Kernel_23/classKernel_1_1CompareSignedDistanceToLine__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CompareSignedDistanceToLine_2&lt;/code&gt;&lt;/a&gt;
to the 2D/3D &lt;a href=&quot;https://doc.cgal.org/5.1/Kernel_23/classKernel.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt;&lt;/a&gt; concept to compare
the signed distance of two points to a line, or the line passing through two given points.
Corresponding functors in the model (&lt;a href=&quot;https://doc.cgal.org/5.1/Kernel_23/classKernel.html#a066d07dd592ac36ba7ee90988abd349f&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compare_signed_distance_to_line_2&lt;/code&gt;&lt;/a&gt;) are also added.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-geometry-kernel&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgKernelD&quot;&gt;dD Geometry Kernel&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The kernels &lt;a href=&quot;https://doc.cgal.org/5.1/Kernel_d/structCGAL_1_1Epick__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epick_d&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/Kernel_d/structCGAL_1_1Epeck__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epeck_d&lt;/code&gt;&lt;/a&gt; gain two new functors:
&lt;a href=&quot;https://doc.cgal.org/5.1/Kernel_d/classCGAL_1_1Epeck__d_1_1Power__side__of__bounded__power__sphere__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Power_side_of_bounded_power_sphere_d&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/Kernel_d/classCGAL_1_1Epeck__d_1_1Compute__squared__radius__smallest__orthogonal__sphere__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compute_squared_radius_smallest_orthogonal_sphere_d&lt;/code&gt;&lt;/a&gt;.
Those are essential for the computation of weighted alpha-complexes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgSurfaceMesh&quot;&gt;Surface Mesh&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The function &lt;a href=&quot;https://doc.cgal.org/5.1/Surface_mesh/classCGAL_1_1Surface__mesh.html#a247d4ad3e6b106ae22e5306203812642&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Surface_mesh::clear()&lt;/code&gt;&lt;/a&gt;
now removes all non-default properties instead of just emptying them.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgBGL&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/BGL/group__PkgBGLPartition.html#ga79c3f58b577af51d1140450729d38f22&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::alpha_expansion_graphcut()&lt;/code&gt;&lt;/a&gt;,
which regularizes a multi-label partition over a user-defined graph.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/BGL/group__PkgBGLSelectionFct.html#gac71322b0cc7d7d59447531d5e5e345b6&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::regularize_face_selection_borders()&lt;/code&gt;&lt;/a&gt;,
which uses this alpha expansion graphcut to regularize the borders of a selected faces on a triangle mesh.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/BGL/group__BGLGraphExternalIndices.html#ga1a22cf8bdde32fcdf1a4a78966eed630&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::set_triangulation_ids()&lt;/code&gt;&lt;/a&gt;,
which must be used to initialize vertex, edge, and face indices of a triangulation meant to be used with BGL algorithms.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-fast-intersection-and-distance-computation&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgAABBTree&quot;&gt;3D Fast Intersection and Distance Computation&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The behavior of the internal search tree used to accelerate distance queries has changed:
usage of the internal search tree will now be enabled by default, and its construction
will be triggered by the first distance query. Automatic construction and usage can be disabled
by calling &lt;a href=&quot;https://doc.cgal.org/5.1/AABB_tree/classCGAL_1_1AABB__tree.html#abde62f52ccdf411847151aa5000ba4a4&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::AABB_tree::do_not_accelerate_distance_queries()&lt;/code&gt;&lt;/a&gt;
before the first distance query, and the tree can be built at any moment by calling
&lt;a href=&quot;https://doc.cgal.org/5.1/AABB_tree/classCGAL_1_1AABB__tree.html#a5d3877d3f2afbd09341eb4b8c230080b&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::AABB_tree::accelerate_distance_queries()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: &lt;a href=&quot;https://doc.cgal.org/5.1/AABB_tree/classCGAL_1_1AABB__tree.html#a5d3877d3f2afbd09341eb4b8c230080b&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::AABB_tree::accelerate_distance_queries()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/AABB_tree/classCGAL_1_1AABB__tree.html#abde62f52ccdf411847151aa5000ba4a4&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::AABB_tree::do_not_accelerate_distance_queries()&lt;/code&gt;&lt;/a&gt;
are no longer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const&lt;/code&gt; functions.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgArrangementOnSurface2&quot;&gt;2D Arrangements&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Changed intersection return type from legacy &lt;a href=&quot;https://doc.cgal.org/5.1/STL_Extension/classCGAL_1_1Object.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;&lt;/a&gt;
to modern &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::variant&lt;/code&gt; in all traits concepts and models.
As there exists an implicit conversion from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::variant&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;, the
new code is backward compatible. However, it is recommended that all calls
to the intersection functions are fixed to use the new return type.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-regularized-boolean-set-operations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgBooleanSetOperations2&quot;&gt;2D Regularized Boolean Set-Operations&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Changed intersection return type from legacy &lt;a href=&quot;https://doc.cgal.org/5.1/STL_Extension/classCGAL_1_1Object.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;&lt;/a&gt;
to modern &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::variant&lt;/code&gt; in the concept &lt;a href=&quot;https://doc.cgal.org/5.1/Boolean_set_operations_2/namespaceArrDirectionalTraits.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrDirectionalTraits::Intersect_2&lt;/code&gt;&lt;/a&gt;
and its models.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-minkowski-sums&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgMinkowskiSum2&quot;&gt;2D Minkowski Sums&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Changed intersection return type from legacy &lt;a href=&quot;https://doc.cgal.org/5.1/STL_Extension/classCGAL_1_1Object.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;&lt;/a&gt;
to modern &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::variant&lt;/code&gt; in the (internally used) model &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_labeled_traits_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-spatial-searching&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgSpatialSearchingD&quot;&gt;dD Spatial Searching&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The kd-tree can now be built in parallel: &lt;a href=&quot;https://doc.cgal.org/5.1/Spatial_searching/classCGAL_1_1Kd__tree.html#a8559dbe4d7136fbc8ebab5ee290cbe06&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Kd_tree::build()&lt;/code&gt;&lt;/a&gt;
is given an optional template parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConcurrencyTag&lt;/code&gt; (default
value remains &lt;a href=&quot;https://doc.cgal.org/5.1/STL_Extension/structCGAL_1_1Sequential__tag.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Sequential_tag&lt;/code&gt;&lt;/a&gt;
for backward compatibility).&lt;/li&gt;
    &lt;li&gt;Improved the performance of the kd-tree in some cases:
      &lt;ul&gt;
        &lt;li&gt;Not storing the points coordinates inside the tree usually
generates a lot of cache misses, leading to non-optimal
performance. This is the case for example
when indices are stored inside the tree, or to a lesser extent when the points
coordinates are stored in a dynamically allocated array (e.g., &lt;a href=&quot;https://doc.cgal.org/5.1/Kernel_d/structCGAL_1_1Epick__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epick_d&lt;/code&gt;&lt;/a&gt;
with dynamic dimension) — we says “to a lesser extent” because the points
are re-created by the kd-tree in a cache-friendly order after its construction,
so the coordinates are more likely to be stored in a near-optimal order
on the heap.
In these cases, the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EnablePointsCache&lt;/code&gt; template parameter of the
&lt;a href=&quot;https://doc.cgal.org/5.1/Spatial_searching/classCGAL_1_1Kd__tree.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Kd_tree&lt;/code&gt;&lt;/a&gt;
class can be set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Tag_true&lt;/code&gt;. The points coordinates
will then be cached in an optimal way. This will increase memory
consumption but provides better search performance. See the updated
&lt;a href=&quot;https://doc.cgal.org/5.1/Spatial_searching/classGeneralDistance.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GeneralDistance&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/Spatial_searching/classFuzzyQueryItem.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FuzzyQueryItem&lt;/code&gt;&lt;/a&gt;
concepts for additional requirements when using such a cache.&lt;/li&gt;
        &lt;li&gt;In most cases (e.g., Euclidean distance), the distance computation
algorithm knows before its end that the distance will be greater
than or equal to some given value. This is used in the (orthogonal)
k-NN search to interrupt some distance computations before its end,
saving precious milliseconds, in particular in medium-to-high dimension.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;intersecting-sequences-of-dd-iso-oriented-boxes&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgBoxIntersectionD&quot;&gt;Intersecting Sequences of dD Iso-oriented Boxes&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added parallel versions of the functions
&lt;a href=&quot;https://doc.cgal.org/5.1/Box_intersection_d/group__PkgBoxIntersectionD__box__intersection__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::box_intersection_d()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/Box_intersection_d/group__PkgBoxIntersectionD__box__self__intersection__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::box_self_intersection_d()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;spatial-sorting&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgSpatialSorting&quot;&gt;Spatial Sorting&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added parallel versions of the functions
&lt;a href=&quot;https://doc.cgal.org/5.1/Spatial_sorting/group__PkgSpatialSortingFunctions.html#ga9da67204747ac19dff65f9c9ff2fca9e&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::hilbert_sort()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/Spatial_sorting/group__PkgSpatialSortingFunctions.html#ga7c597c11a3b3859234ff68526cead84d&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::spatial_sort()&lt;/code&gt;&lt;/a&gt;
in 2D and 3D when the median policy is used.
The parallel versions use up to four threads in 2D, and up to eight threads in 3D.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-convex-hulls&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgConvexHull3&quot;&gt;3D Convex Hulls&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A new overload for &lt;a href=&quot;https://doc.cgal.org/5.1/Convex_hull_3/group__PkgConvexHull3Functions.html#gaa02a3013808fc9a2e5e2f42b9fde8e30&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::convex_hull_3()&lt;/code&gt;&lt;/a&gt;
that takes a model of &lt;a href=&quot;https://doc.cgal.org/5.1/BGL/classVertexListGraph.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VertexListGraph&lt;/code&gt;&lt;/a&gt; has been added.&lt;/li&gt;
    &lt;li&gt;The long-deprecated function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::convex_hull_3_to_polyhedron_3()&lt;/code&gt; has been removed.
The function &lt;a href=&quot;https://doc.cgal.org/5.1/Convex_hull_3/group__PkgConvexHull3Functions.html#ga2750f7f197588ed643679835c748c671&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::convex_hull_3_to_face_graph()&lt;/code&gt;&lt;/a&gt;
should be used instead.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgPolygonMeshProcessing&quot;&gt;Polygon Mesh Processing&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__orientation__grp.html#ga133e58280959c152770525f27bb42b91&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::volume_connected_component()&lt;/code&gt;&lt;/a&gt;,
which can be used to get information about the nesting of the connected components of a given triangle mesh and about
the volumes defined.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__repairing__grp.html#gac544fcaba1d59d330a3a1536caff392a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::remove_connected_components_of_negligible_size()&lt;/code&gt;&lt;/a&gt;,
which can be used to remove connected components whose area or volume is under a certain threshold.
Area and volume thresholds are either specified by the user or deduced from the bounding box of the mesh.&lt;/li&gt;
    &lt;li&gt;Added a new named parameter for &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__keep__connected__components__grp.html#ga48e7b3e6922ee78cf8ce801e3e325d9a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::keep_large_connected_components()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__repairing__grp.html#gac544fcaba1d59d330a3a1536caff392a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::remove_connected_components_of_negligible_size&lt;/code&gt;&lt;/a&gt;,
which can be used to perform a dry run of the operation, meaning that the function will return the number of connected
components that would be removed with the specified threshold, but without actually removing them.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__corefinement__grp.html#gaa491feee9e41f725332bea0ea1215578&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::split()&lt;/code&gt;&lt;/a&gt;,
which can be used to split meshes along a mesh or a plane.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__keep__connected__components__grp.html#ga9ddd1e4b915a4232b1ce5611985302aa&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::split_connected_components()&lt;/code&gt;&lt;/a&gt;
to split a single mesh containing several connected components into several meshes containing one connected component.&lt;/li&gt;
    &lt;li&gt;Added the functions &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__orientation__grp.html#gae25c1198a89c53d5df2f29dd57fda5ca&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::merge_reversible_connected_components()&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__orientation__grp.html#ga2aa4f7b500dc51d1fc4747705a050946&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::duplicate_non_manifold_edges_in_polygon_soup()&lt;/code&gt;&lt;/a&gt;,
and &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__orientation__grp.html#ga31779672b3afd660664fc9a6c4fdf74d&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::orient_triangle_soup_with_reference_triangle_mesh()&lt;/code&gt;&lt;/a&gt;,
which can be helpful when repairing a polygon soup.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__distance__grp.html#gac7af41d13bf1a7c30852be266ac81db5&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::sample_triangle_soup()&lt;/code&gt;&lt;/a&gt;,
which generates points on a triangle soup surface.&lt;/li&gt;
    &lt;li&gt;Added parallel versions of the functions &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__intersection__grp.html#gad9fe5d8b433545b69154f43935a11a3b&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::does_self_intersect()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__intersection__grp.html#gaf19c80ec12cbff7ebe9e69453f1d40b8&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::self_intersections()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;The function &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__repairing__grp.html#ga8ae4352e67d2b099994ac8990c13bd41&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::stitch_borders()&lt;/code&gt;&lt;/a&gt;
now returns the number of halfedge pairs that were stitched.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__repairing__grp.html#ga76648a509409ff3c3ad3f71eff8ce9d9&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::polygon_mesh_to_polygon_soup()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;The function &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__repairing__grp.html#ga0dec58e8a0112791f72ebbe77bac074b&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::polygon_soup_to_polygon_mesh&lt;/code&gt;&lt;/a&gt;
now allows passing a point map (for the point range) and a vertex point map (for the polygon mesh) via named parameters.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgPointSetProcessing3&quot;&gt;Point Set Processing&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; &lt;a href=&quot;https://doc.cgal.org/5.1/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga1ab1dcee59caadde50572c5a504cc41a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::remove_outliers()&lt;/code&gt;&lt;/a&gt;
has been parallelized and thus has a new template parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConcurrencyTag&lt;/code&gt;.
To update your code simply add as first template parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Sequential_tag&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Parallel_tag&lt;/code&gt;
when calling this function.&lt;/li&gt;
    &lt;li&gt;Add a function &lt;a href=&quot;https://doc.cgal.org/5.1/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#gafee41d60b5a257ae034e9157d0af8e46&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::cluster_point_set()&lt;/code&gt;&lt;/a&gt;
that segments a point cloud into connected components based on a distance threshold.&lt;/li&gt;
    &lt;li&gt;Added wrapper functions for registration:
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#gab81663c718960780ddb176aad845e8cd&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::OpenGR::compute_registration_transformation()&lt;/code&gt;&lt;/a&gt;,
which computes the registration transformation for two point sets using the Super4PCS algorithm
implemented in the third party library &lt;a href=&quot;https://storm-irit.github.io/OpenGR/index.html&quot;&gt;OpenGR&lt;/a&gt;.&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga6194087f512e4e23dd945a9364d0931d&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::OpenGR::register_point_sets()&lt;/code&gt;&lt;/a&gt;,
which computes the registration transformation for two point sets using the Super4PCS algorithm
implemented in the third party library &lt;a href=&quot;https://storm-irit.github.io/OpenGR/index.html&quot;&gt;OpenGR&lt;/a&gt;,
and registers the points sets by transforming the data point set using the computed transformation.&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#gaf75af5c1634fa83fa05a33e95570b127&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::pointmatcher::compute_registration_transformation()&lt;/code&gt;&lt;/a&gt;
computes the registration transformation for two point sets using ICP algorithm implemented
in the third party library &lt;a href=&quot;https://github.com/ethz-asl/libpointmatcher&quot;&gt;libpointmatcher&lt;/a&gt;.&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#gaa222278e20a3ce41930d37326cd54ef9&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::pointmatcher::register_point_sets()&lt;/code&gt;&lt;/a&gt;,
which computes the registration transformation for two point sets using ICP algorithm implemented
in the third party library &lt;a href=&quot;https://github.com/ethz-asl/libpointmatcher&quot;&gt;libpointmatcher&lt;/a&gt;, and registers
the points sets by transforming the data point set using the computed transformation.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgTriangulation2&quot;&gt;2D Triangulations&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;To fix an inconsistency between code and documentation and to clarify which types of intersections
are truly allowed in constrained Delaunay triangulations, the tag &lt;a href=&quot;https://doc.cgal.org/5.1/Triangulation_2/structCGAL_1_1No__intersection__tag.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::No_intersection_tag&lt;/code&gt;&lt;/a&gt;
has been deprecated in favor of two new tags: &lt;a href=&quot;https://doc.cgal.org/5.1/Triangulation_2/structCGAL_1_1No__constraint__intersection__tag.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::No_constraint_intersection_tag&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/Triangulation_2/structCGAL_1_1No__constraint__intersection__requiring__constructions__tag.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::No_constraint_intersection_requiring_constructions_tag&lt;/code&gt;&lt;/a&gt;.
The latter is equivalent to the now-deprecated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::No_intersection_tag&lt;/code&gt;, and allows constraints
to intersect as long as no new point has to be created to represent that intersection (for example,
the intersection of two constraint segments in a ‘T’-like junction is an existing point
and as such does not require any new construction). The former tag, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::No_constraint_intersection_tag&lt;/code&gt;,
does not allow any intersection, except for the configuration of two constraints having a single
common endpoints, for convience.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/Triangulation_2/classCGAL_1_1Constrained__triangulation__plus__2.html#adea77f5db5cd4dfae302e4502f1caa85&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::split_subconstraint_graph_into_constraints()&lt;/code&gt;&lt;/a&gt;
to &lt;a href=&quot;https://doc.cgal.org/5.1/Triangulation_2/classCGAL_1_1Constrained__triangulation__plus__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Constrained_triangulation_plus_2&lt;/code&gt;&lt;/a&gt; to initialize the constraints
from a soup of disconnected segments that should first be split into polylines.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations-1&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgTriangulation3&quot;&gt;3D Triangulations&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The member function &lt;a href=&quot;https://doc.cgal.org/5.1/Triangulation_3/group__PkgIOTriangulation3.html#gadd94d0613e2dd9cdd2e88d2c74d5b1c8&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_3::file_input()&lt;/code&gt;&lt;/a&gt;
have been added. It allows to load a &lt;a href=&quot;https://doc.cgal.org/5.1/Triangulation_3/classCGAL_1_1Triangulation__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_3&lt;/code&gt;&lt;/a&gt;
from an input stream, using functors to create vertices and cells.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulation-data-structure&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgTDS3&quot;&gt;3D Triangulation Data Structure&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The member function &lt;a href=&quot;https://doc.cgal.org/5.1/TDS_3/group__PkgIOTDS3.html#ga381446a02a9240cc83e79c48b37cd119&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::TDS_3::file_input()&lt;/code&gt;&lt;/a&gt;
have been added. It allows to load a &lt;a href=&quot;https://doc.cgal.org/5.1/TDS_3/classCGAL_1_1Triangulation__data__structure__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_data_structure_3&lt;/code&gt;&lt;/a&gt;
from an input stream, using functors to create vertices and cells.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-simplification&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgSurfaceMeshSimplification&quot;&gt;Surface Mesh Simplification&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a &lt;a href=&quot;https://doc.cgal.org/5.1/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1GarlandHeckbert__policies.html&quot;&gt;new simplification method&lt;/a&gt;
based on the quadric error defined by Garland and Heckbert.&lt;/li&gt;
    &lt;li&gt;The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EdgeProfile&lt;/code&gt; has been removed. This concept was not actually in use as the CGAL-provided model &lt;a href=&quot;https://doc.cgal.org/5.1/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1Edge__profile.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Edge_profile&lt;/code&gt;&lt;/a&gt;
was imposed to the user. Other concepts have been clarified to reflect the fact that the API uses this particular class.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;stl-extensions-for-cgal&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgSTLExtension&quot;&gt;STL Extensions for CGAL&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a new concurrency tag: &lt;a href=&quot;https://doc.cgal.org/5.1/STL_Extension/structCGAL_1_1Parallel__if__available__tag.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Parallel_if_available_tag&lt;/code&gt;&lt;/a&gt;.
This tag is a convenience typedef to &lt;a href=&quot;https://doc.cgal.org/5.1/STL_Extension/structCGAL_1_1Parallel__tag.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Parallel_tag&lt;/code&gt;&lt;/a&gt;
if the third party library TBB has been found and linked with, and to
&lt;a href=&quot;https://doc.cgal.org/5.1/STL_Extension/structCGAL_1_1Sequential__tag.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Sequential_tag&lt;/code&gt;&lt;/a&gt; otherwise.&lt;/li&gt;
  &lt;/ul&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>New in CGAL: Tetrahedral Remeshing</title>
   <link href="http://www.cgal.org/2020/08/07/Tetrahedral-remeshing/"/>
   <updated>2020-08-07T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2020/08/07/Tetrahedral-remeshing</id>
   <content type="html">
&lt;h3&gt;&lt;a href=&quot;https://geometryfactory.com/who-we-are/&quot;&gt;Jane Tournois&lt;/a&gt;,
&lt;a href=&quot;https://www.lirmm.fr/~nfaraj/&quot;&gt;Noura Faraj&lt;/a&gt;,
&lt;a href=&quot;https://perso.telecom-paristech.fr/jthiery/&quot;&gt;Jean-Marc Thiery&lt;/a&gt;,
&lt;a href=&quot;https://perso.telecom-paristech.fr/boubek/&quot;&gt;Tamy Boubekeur&lt;/a&gt;.
&lt;/h3&gt;
&lt;h4&gt;&lt;a href=&quot;https://geometryfactory.com/&quot;&gt;GeometryFactory&lt;/a&gt;, &lt;a href=&quot;https://www.telecom-paris.fr/en/home&quot;&gt;Telecom Paris&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3&gt;Tetrahedral Isotropic Remeshing&lt;/h3&gt;

&lt;p&gt;This new package implements the uniform version of the
&lt;a href=&quot;https://perso.telecom-paristech.fr/boubek/papers/MADVolumeRemesher/&quot;&gt;Multi-Material Adaptive Volume Remesher&lt;/a&gt;
algorithm described by Noura Faraj et al. for quality tetrahedral remeshing. This practical iterative remeshing algorithm
is designed to remesh multi-material tetrahedral meshes, by iteratively performing a sequence of elementary operations
such as edge splits, edge collapses, edge flips, and vertex relocations following a Laplacian smoothing.
The algorithm results in high-quality uniform isotropic meshes, with the user-defined uniform sizing field,
while preserving the materials, the input geometric curve and surface features, and the topology of the feature complex.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/Tet_remeshing_star.png&quot;&gt;&lt;img src=&quot;../../../../images/Tet_remeshing_star.png&quot; style=&quot;max-width:80%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;small&gt;&lt;b&gt;Left:&lt;/b&gt; Tetrahedral mesh generated by CGAL's tetrahedral mesh generation algorithm. Dihedral angles are in [12, 162].&lt;br /&gt;
            &lt;b&gt;Middle:&lt;/b&gt; The same mesh after remeshing with the same size parameter. Dihedral angles are in [17.7, 149].&lt;br /&gt;
            &lt;b&gt;Right:&lt;/b&gt; The same mesh after remeshing with an as coarse as possible size parameter. Dihedral angles are in [45, 95].&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;Several options are available to tune the remeshing process for the user’s needs :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;remesh only a subregion of the mesh,&lt;/li&gt;
  &lt;li&gt;remesh or preserve the input surfaces and feature polylines,&lt;/li&gt;
  &lt;li&gt;preserve a set of facets and a set of edges from being remeshed,&lt;/li&gt;
  &lt;li&gt;perform smoothing on feature polylines.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;See &lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Tetrahedral_remeshing/group__PkgTetrahedralRemeshingRef.html#gae4686577872290e0335439edafb27a7b&quot;&gt;CGAL::tetrahedral_isotropic_remeshing()&lt;/a&gt; for the complete API and list of options.
&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;Improve a Tetrahedral Mesh Quality&lt;/h3&gt;
&lt;p&gt;
Tetrahedral mesh generation can lead to over-refinement in some undesired places, e.g. where geometry is a thin volume and/or a polyline
incident to sharp dihedral angles formed by the surface.
Tetrahedral remeshing fixes those over-refinements while keeping the geometry and topology of the feature complex.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/Tet_remeshing_cheese_and_closups.png&quot;&gt;&lt;img src=&quot;../../../../images/Tet_remeshing_cheese_and_closups.png&quot; style=&quot;max-width:80%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;small&gt;&lt;b&gt;Top:&lt;/b&gt; Tetrahedral mesh with closeups on overly dense regions.&lt;br /&gt;
            &lt;b&gt;Bottom:&lt;/b&gt; Tetrahedral mesh after isotropic remeshing, with closeups on the same regions.&lt;/small&gt;
&lt;/div&gt;

&lt;h3&gt;CGAL&lt;/h3&gt;
&lt;p&gt;The package &lt;em&gt;Tetrahedral Remeshing&lt;/em&gt; is already integrated in CGAL's master branch
on the &lt;a href=&quot;https://github.com/CGAL/cgal/&quot;&gt;CGAL GitHub repository&lt;/a&gt;, and will be
officially released in the upcoming version of CGAL, CGAL 5.1, scheduled for September 2020.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Tetrahedral_remeshing/index.html&quot;&gt;Documentation of the package Tetrahedral Remeshing&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/tree/master&quot;&gt;CGAL master branch on GitHub&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.0.3 released</title>
   <link href="http://www.cgal.org/2020/08/03/cgal503/"/>
   <updated>2020-08-03T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2020/08/03/cgal503</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-5.0.3&quot;&gt;Download CGAL-5.0.3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.0.3/Manual/index.html&quot;&gt;CGAL-5.0.3 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.0.3 is a bug-fix release for &lt;a href=&quot;../../../../2019/11/08/cgal50&quot;&gt;CGAL 5.0&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2020/02/25/cgal502&quot;&gt;CGAL 5.0.2&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=label%3AMerged_in_5.0.3+-label%3AMerged_in_5.0.2&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.1 beta2 released</title>
   <link href="http://www.cgal.org/2020/07/28/cgal51-beta2/"/>
   <updated>2020-07-28T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2020/07/28/cgal51-beta2</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-5.1-beta2&quot;&gt;Download CGAL-5.1-beta2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/index.html&quot;&gt;CGAL-5.1-beta2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.1 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2019/11/08/cgal50&quot;&gt;CGAL 5.0&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;tetrahedral-remeshing-new-package&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgTetrahedralRemeshing&quot;&gt;Tetrahedral Remeshing&lt;/a&gt; (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package implements a tetrahedral isotropic remeshing algorithm,
that improves the quality of tetrahedra in terms of dihedral angles,
while targeting a given edge length.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-topology-new-package&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgSurfaceMeshTopologySummary&quot;&gt;Surface Mesh Topology&lt;/a&gt; (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package enables the computation of some topological invariants of surfaces, such as:
      &lt;ul&gt;
        &lt;li&gt;test if two (closed) curves on a combinatorial surface are homotopic. Users can choose
between free homotopy and homotopy with fixed endpoints;&lt;/li&gt;
        &lt;li&gt;test is a curve is contractible;&lt;/li&gt;
        &lt;li&gt;compute shortest non-contractible cycles on a surface, with or without weights on edges.&lt;/li&gt;
      &lt;/ul&gt;

      &lt;p&gt;See also the associated &lt;a href=&quot;https://www.cgal.org/2020/05/08/Surface_mesh_topology/&quot;&gt;blog entry&lt;/a&gt;.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;optimal-bounding-box-new-package&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgOptimalBoundingBox&quot;&gt;Optimal Bounding Box&lt;/a&gt; (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;This package implements an optimization algorithm that aims to construct a close approximation
of the &lt;em&gt;optimal bounding box&lt;/em&gt; of a mesh or a point set, which is defined as the smallest
(in terms of volume) bounding box that contains a given mesh or point set.&lt;/p&gt;

      &lt;p&gt;See also the associated &lt;a href=&quot;https://www.cgal.org/2020/04/20/Optimal_bounding_box/&quot;&gt;blog entry&lt;/a&gt;.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The CGAL_Core library no longer requires &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Boost.Thread&lt;/code&gt;, even if the g++ compiler is used.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;tutorials&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/tutorials.html&quot;&gt;Tutorials&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Two new, detailed tutorials have been added:
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/tuto_reconstruction.html&quot;&gt;Surface Reconstruction from Point Clouds&lt;/a&gt;,
which goes over a typical full processing pipeline in a CGAL environment.&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/tuto_gis.html&quot;&gt;Geographic Information Systems (GIS)&lt;/a&gt;,
which demonstrates usage of CGAL data structures and algorithms in the context of a typical GIS application.&lt;/li&gt;
      &lt;/ul&gt;

      &lt;p&gt;Both tutorials provide complete code.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-linear-geometry-kernel&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgKernel23&quot;&gt;2D and 3D Linear Geometry Kernel&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the functor &lt;a href=&quot;https://doc.cgal.org/5.1/Kernel_23/classKernel_1_1CompareSignedDistanceToLine__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CompareSignedDistanceToLine_2&lt;/code&gt;&lt;/a&gt;
to the 2D/3D &lt;a href=&quot;https://doc.cgal.org/5.1/Kernel_23/classKernel.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt;&lt;/a&gt; concept to compare
the signed distance of two points to a line, or the line passing through two given points.
Corresponding functors in the model (&lt;a href=&quot;https://doc.cgal.org/5.1/Kernel_23/classKernel.html#a066d07dd592ac36ba7ee90988abd349f&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compare_signed_distance_to_line_2&lt;/code&gt;&lt;/a&gt;) are also added.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-geometry-kernel&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgKernelD&quot;&gt;dD Geometry Kernel&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The kernels &lt;a href=&quot;https://doc.cgal.org/5.1/Kernel_d/structCGAL_1_1Epick__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epick_d&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/Kernel_d/structCGAL_1_1Epeck__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epeck_d&lt;/code&gt;&lt;/a&gt; gain two new functors:
&lt;a href=&quot;https://doc.cgal.org/5.1/Kernel_d/classCGAL_1_1Epeck__d_1_1Power__side__of__bounded__power__sphere__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Power_side_of_bounded_power_sphere_d&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/Kernel_d/classCGAL_1_1Epeck__d_1_1Compute__squared__radius__smallest__orthogonal__sphere__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compute_squared_radius_smallest_orthogonal_sphere_d&lt;/code&gt;&lt;/a&gt;.
Those are essential for the computation of weighted alpha-complexes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgSurfaceMesh&quot;&gt;Surface Mesh&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The function &lt;a href=&quot;https://doc.cgal.org/5.1/Surface_mesh/classCGAL_1_1Surface__mesh.html#a247d4ad3e6b106ae22e5306203812642&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Surface_mesh::clear()&lt;/code&gt;&lt;/a&gt;
now removes all non-default properties instead of just emptying them.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgBGL&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/BGL/group__PkgBGLPartition.html#ga79c3f58b577af51d1140450729d38f22&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::alpha_expansion_graphcut()&lt;/code&gt;&lt;/a&gt;,
which regularizes a multi-label partition over a user-defined graph.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/BGL/group__PkgBGLSelectionFct.html#gac71322b0cc7d7d59447531d5e5e345b6&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::regularize_face_selection_borders()&lt;/code&gt;&lt;/a&gt;,
which uses this alpha expansion graphcut to regularize the borders of a selected faces on a triangle mesh.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/BGL/group__BGLGraphExternalIndices.html#ga1a22cf8bdde32fcdf1a4a78966eed630&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::set_triangulation_ids()&lt;/code&gt;&lt;/a&gt;,
which must be used to initialize vertex, edge, and face indices of a triangulation meant to be used with BGL algorithms.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-fast-intersection-and-distance-computation&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgAABBTree&quot;&gt;3D Fast Intersection and Distance Computation&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The behavior of the internal search tree used to accelerate distance queries has changed:
usage of the internal search tree will now be enabled by default, and its construction
will be triggered by the first distance query. Automatic construction and usage can be disabled
by calling &lt;a href=&quot;https://doc.cgal.org/5.1/AABB_tree/classCGAL_1_1AABB__tree.html#abde62f52ccdf411847151aa5000ba4a4&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::AABB_tree::do_not_accelerate_distance_queries()&lt;/code&gt;&lt;/a&gt;
before the first distance query, and the tree can be built at any moment by calling
&lt;a href=&quot;https://doc.cgal.org/5.1/AABB_tree/classCGAL_1_1AABB__tree.html#a5d3877d3f2afbd09341eb4b8c230080b&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::AABB_tree::accelerate_distance_queries()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: &lt;a href=&quot;https://doc.cgal.org/5.1/AABB_tree/classCGAL_1_1AABB__tree.html#a5d3877d3f2afbd09341eb4b8c230080b&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::AABB_tree::accelerate_distance_queries()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/AABB_tree/classCGAL_1_1AABB__tree.html#abde62f52ccdf411847151aa5000ba4a4&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::AABB_tree::do_not_accelerate_distance_queries()&lt;/code&gt;&lt;/a&gt;
are no longer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const&lt;/code&gt; functions.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgArrangementOnSurface2&quot;&gt;2D Arrangements&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Changed intersection return type from legacy &lt;a href=&quot;https://doc.cgal.org/5.1/STL_Extension/classCGAL_1_1Object.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;&lt;/a&gt;
to modern &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::variant&lt;/code&gt; in all traits concepts and models.
As there exists an implicit conversion from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::variant&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;, the
new code is backward compatible. However, it is recommended that all calls
to the intersection functions are fixed to use the new return type.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-regularized-boolean-set-operations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgBooleanSetOperations2&quot;&gt;2D Regularized Boolean Set-Operations&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Changed intersection return type from legacy &lt;a href=&quot;https://doc.cgal.org/5.1/STL_Extension/classCGAL_1_1Object.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;&lt;/a&gt;
to modern &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::variant&lt;/code&gt; in the concept &lt;a href=&quot;https://doc.cgal.org/5.1/Boolean_set_operations_2/namespaceArrDirectionalTraits.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrDirectionalTraits::Intersect_2&lt;/code&gt;&lt;/a&gt;
and its models.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-minkowski-sums&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgMinkowskiSum2&quot;&gt;2D Minkowski Sums&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Changed intersection return type from legacy &lt;a href=&quot;https://doc.cgal.org/5.1/STL_Extension/classCGAL_1_1Object.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;&lt;/a&gt;
to modern &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::variant&lt;/code&gt; in the (internally used) model &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_labeled_traits_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-spatial-searching&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgSpatialSearchingD&quot;&gt;dD Spatial Searching&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The kd-tree can now be built in parallel: &lt;a href=&quot;https://doc.cgal.org/5.1/Spatial_searching/classCGAL_1_1Kd__tree.html#a8559dbe4d7136fbc8ebab5ee290cbe06&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Kd_tree::build()&lt;/code&gt;&lt;/a&gt;
is given an optional template parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConcurrencyTag&lt;/code&gt; (default
value remains &lt;a href=&quot;https://doc.cgal.org/5.1/STL_Extension/structCGAL_1_1Sequential__tag.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Sequential_tag&lt;/code&gt;&lt;/a&gt;
for backward compatibility).&lt;/li&gt;
    &lt;li&gt;Improved the performance of the kd-tree in some cases:
      &lt;ul&gt;
        &lt;li&gt;Not storing the points coordinates inside the tree usually
generates a lot of cache misses, leading to non-optimal
performance. This is the case for example
when indices are stored inside the tree, or to a lesser extent when the points
coordinates are stored in a dynamically allocated array (e.g., &lt;a href=&quot;https://doc.cgal.org/5.1/Kernel_d/structCGAL_1_1Epick__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epick_d&lt;/code&gt;&lt;/a&gt;
with dynamic dimension) — we says “to a lesser extent” because the points
are re-created by the kd-tree in a cache-friendly order after its construction,
so the coordinates are more likely to be stored in a near-optimal order
on the heap.
In these cases, the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EnablePointsCache&lt;/code&gt; template parameter of the
&lt;a href=&quot;https://doc.cgal.org/5.1/Spatial_searching/classCGAL_1_1Kd__tree.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Kd_tree&lt;/code&gt;&lt;/a&gt;
class can be set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Tag_true&lt;/code&gt;. The points coordinates
will then be cached in an optimal way. This will increase memory
consumption but provides better search performance. See the updated
&lt;a href=&quot;https://doc.cgal.org/5.1/Spatial_searching/classGeneralDistance.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GeneralDistance&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/Spatial_searching/classFuzzyQueryItem.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FuzzyQueryItem&lt;/code&gt;&lt;/a&gt;
concepts for additional requirements when using such a cache.&lt;/li&gt;
        &lt;li&gt;In most cases (e.g., Euclidean distance), the distance computation
algorithm knows before its end that the distance will be greater
than or equal to some given value. This is used in the (orthogonal)
k-NN search to interrupt some distance computations before its end,
saving precious milliseconds, in particular in medium-to-high dimension.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;intersecting-sequences-of-dd-iso-oriented-boxes&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgBoxIntersectionD&quot;&gt;Intersecting Sequences of dD Iso-oriented Boxes&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added parallel versions of the functions
&lt;a href=&quot;https://doc.cgal.org/5.1/Box_intersection_d/group__PkgBoxIntersectionD__box__intersection__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::box_intersection_d()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/Box_intersection_d/group__PkgBoxIntersectionD__box__self__intersection__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::box_self_intersection_d()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;spatial-sorting&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgSpatialSorting&quot;&gt;Spatial Sorting&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added parallel versions of the functions
&lt;a href=&quot;https://doc.cgal.org/5.1/Spatial_sorting/group__PkgSpatialSortingFunctions.html#ga9da67204747ac19dff65f9c9ff2fca9e&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::hilbert_sort()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/Spatial_sorting/group__PkgSpatialSortingFunctions.html#ga7c597c11a3b3859234ff68526cead84d&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::spatial_sort()&lt;/code&gt;&lt;/a&gt;
in 2D and 3D when the median policy is used.
The parallel versions use up to four threads in 2D, and up to eight threads in 3D.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-convex-hulls&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgConvexHull3&quot;&gt;3D Convex Hulls&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A new overload for &lt;a href=&quot;https://doc.cgal.org/5.1/Convex_hull_3/group__PkgConvexHull3Functions.html#gaa02a3013808fc9a2e5e2f42b9fde8e30&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::convex_hull_3()&lt;/code&gt;&lt;/a&gt;
that takes a model of &lt;a href=&quot;https://doc.cgal.org/5.1/BGL/classVertexListGraph.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VertexListGraph&lt;/code&gt;&lt;/a&gt; has been added.&lt;/li&gt;
    &lt;li&gt;The long-deprecated function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::convex_hull_3_to_polyhedron_3()&lt;/code&gt; has been removed.
The function &lt;a href=&quot;https://doc.cgal.org/5.1/Convex_hull_3/group__PkgConvexHull3Functions.html#ga2750f7f197588ed643679835c748c671&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::convex_hull_3_to_face_graph()&lt;/code&gt;&lt;/a&gt;
should be used instead.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgPolygonMeshProcessing&quot;&gt;Polygon Mesh Processing&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__orientation__grp.html#ga133e58280959c152770525f27bb42b91&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::volume_connected_component()&lt;/code&gt;&lt;/a&gt;,
which can be used to get information about the nesting of the connected components of a given triangle mesh and about
the volumes defined.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__repairing__grp.html#gac544fcaba1d59d330a3a1536caff392a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::remove_connected_components_of_negligible_size()&lt;/code&gt;&lt;/a&gt;,
which can be used to remove connected components whose area or volume is under a certain threshold.
Area and volume thresholds are either specified by the user or deduced from the bounding box of the mesh.&lt;/li&gt;
    &lt;li&gt;Added a new named parameter for &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__keep__connected__components__grp.html#ga48e7b3e6922ee78cf8ce801e3e325d9a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::keep_large_connected_components()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__repairing__grp.html#gac544fcaba1d59d330a3a1536caff392a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::remove_connected_components_of_negligible_size&lt;/code&gt;&lt;/a&gt;,
which can be used to perform a dry run of the operation, meaning that the function will return the number of connected
components that would be removed with the specified threshold, but without actually removing them.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__corefinement__grp.html#gaa491feee9e41f725332bea0ea1215578&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::split()&lt;/code&gt;&lt;/a&gt;,
which can be used to split meshes along a mesh or a plane.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__keep__connected__components__grp.html#ga9ddd1e4b915a4232b1ce5611985302aa&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::split_connected_components()&lt;/code&gt;&lt;/a&gt;
to split a single mesh containing several connected components into several meshes containing one connected component.&lt;/li&gt;
    &lt;li&gt;Added the functions &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__orientation__grp.html#gae25c1198a89c53d5df2f29dd57fda5ca&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::merge_reversible_connected_components()&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__orientation__grp.html#ga2aa4f7b500dc51d1fc4747705a050946&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::duplicate_non_manifold_edges_in_polygon_soup()&lt;/code&gt;&lt;/a&gt;,
and &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__orientation__grp.html#ga31779672b3afd660664fc9a6c4fdf74d&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::orient_triangle_soup_with_reference_triangle_mesh()&lt;/code&gt;&lt;/a&gt;,
which can be helpful when repairing a polygon soup.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__distance__grp.html#gac7af41d13bf1a7c30852be266ac81db5&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::sample_triangle_soup()&lt;/code&gt;&lt;/a&gt;,
which generates points on a triangle soup surface.&lt;/li&gt;
    &lt;li&gt;Added parallel versions of the functions &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__intersection__grp.html#gad9fe5d8b433545b69154f43935a11a3b&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::does_self_intersect()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__intersection__grp.html#gaf19c80ec12cbff7ebe9e69453f1d40b8&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::self_intersections()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;The function &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__repairing__grp.html#ga8ae4352e67d2b099994ac8990c13bd41&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::stitch_borders()&lt;/code&gt;&lt;/a&gt;
now returns the number of halfedge pairs that were stitched.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__repairing__grp.html#ga76648a509409ff3c3ad3f71eff8ce9d9&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::polygon_mesh_to_polygon_soup()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;The function &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__repairing__grp.html#ga0dec58e8a0112791f72ebbe77bac074b&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::polygon_soup_to_polygon_mesh&lt;/code&gt;&lt;/a&gt;
now allows passing a point map (for the point range) and a vertex point map (for the polygon mesh) via named parameters.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgPointSetProcessing3&quot;&gt;Point Set Processing&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; &lt;a href=&quot;https://doc.cgal.org/5.1/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga1ab1dcee59caadde50572c5a504cc41a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::remove_outliers()&lt;/code&gt;&lt;/a&gt;
has been parallelized and thus has a new template parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConcurrencyTag&lt;/code&gt;.
To update your code simply add as first template parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Sequential_tag&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Parallel_tag&lt;/code&gt;
when calling this function.&lt;/li&gt;
    &lt;li&gt;Add a function &lt;a href=&quot;https://doc.cgal.org/5.1/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#gafee41d60b5a257ae034e9157d0af8e46&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::cluster_point_set()&lt;/code&gt;&lt;/a&gt;
that segments a point cloud into connected components based on a distance threshold.&lt;/li&gt;
    &lt;li&gt;Added wrapper functions for registration:
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#gab81663c718960780ddb176aad845e8cd&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::OpenGR::compute_registration_transformation()&lt;/code&gt;&lt;/a&gt;,
which computes the registration transformation for two point sets using the Super4PCS algorithm
implemented in the third party library &lt;a href=&quot;https://storm-irit.github.io/OpenGR/index.html&quot;&gt;OpenGR&lt;/a&gt;.&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga6194087f512e4e23dd945a9364d0931d&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::OpenGR::register_point_sets()&lt;/code&gt;&lt;/a&gt;,
which computes the registration transformation for two point sets using the Super4PCS algorithm
implemented in the third party library &lt;a href=&quot;https://storm-irit.github.io/OpenGR/index.html&quot;&gt;OpenGR&lt;/a&gt;,
and registers the points sets by transforming the data point set using the computed transformation.&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#gaf75af5c1634fa83fa05a33e95570b127&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::pointmatcher::compute_registration_transformation()&lt;/code&gt;&lt;/a&gt;
computes the registration transformation for two point sets using ICP algorithm implemented
in the third party library &lt;a href=&quot;https://github.com/ethz-asl/libpointmatcher&quot;&gt;libpointmatcher&lt;/a&gt;.&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#gaa222278e20a3ce41930d37326cd54ef9&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::pointmatcher::register_point_sets()&lt;/code&gt;&lt;/a&gt;,
which computes the registration transformation for two point sets using ICP algorithm implemented
in the third party library &lt;a href=&quot;https://github.com/ethz-asl/libpointmatcher&quot;&gt;libpointmatcher&lt;/a&gt;, and registers
the points sets by transforming the data point set using the computed transformation.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgTriangulation2&quot;&gt;2D Triangulations&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;To fix an inconsistency between code and documentation and to clarify which types of intersections
are truly allowed in constrained Delaunay triangulations, the tag &lt;a href=&quot;https://doc.cgal.org/5.1/Triangulation_2/structCGAL_1_1No__intersection__tag.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::No_intersection_tag&lt;/code&gt;&lt;/a&gt;
has been deprecated in favor of two new tags: &lt;a href=&quot;https://doc.cgal.org/5.1/Triangulation_2/structCGAL_1_1No__constraint__intersection__tag.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::No_constraint_intersection_tag&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/Triangulation_2/structCGAL_1_1No__constraint__intersection__requiring__constructions__tag.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::No_constraint_intersection_requiring_constructions_tag&lt;/code&gt;&lt;/a&gt;.
The latter is equivalent to the now-deprecated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::No_intersection_tag&lt;/code&gt;, and allows constraints
to intersect as long as no new point has to be created to represent that intersection (for example,
the intersection of two constraint segments in a ‘T’-like junction is an existing point
and as such does not require any new construction). The former tag, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::No_constraint_intersection_tag&lt;/code&gt;,
does not allow any intersection, except for the configuration of two constraints having a single
common endpoints, for convience.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/Triangulation_2/classCGAL_1_1Constrained__triangulation__plus__2.html#adea77f5db5cd4dfae302e4502f1caa85&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::split_subconstraint_graph_into_constraints()&lt;/code&gt;&lt;/a&gt;
to &lt;a href=&quot;https://doc.cgal.org/5.1/Triangulation_2/classCGAL_1_1Constrained__triangulation__plus__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Constrained_triangulation_plus_2&lt;/code&gt;&lt;/a&gt; to initialize the constraints
from a soup of disconnected segments that should first be split into polylines.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations-1&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgTriangulation3&quot;&gt;3D Triangulations&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The member function &lt;a href=&quot;https://doc.cgal.org/5.1/Triangulation_3/group__PkgIOTriangulation3.html#gadd94d0613e2dd9cdd2e88d2c74d5b1c8&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_3::file_input()&lt;/code&gt;&lt;/a&gt;
have been added. It allows to load a &lt;a href=&quot;https://doc.cgal.org/5.1/Triangulation_3/classCGAL_1_1Triangulation__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_3&lt;/code&gt;&lt;/a&gt;
from an input stream, using functors to create vertices and cells.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulation-data-structure&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgTDS3&quot;&gt;3D Triangulation Data Structure&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The member function &lt;a href=&quot;https://doc.cgal.org/5.1/TDS_3/group__PkgIOTDS3.html#ga381446a02a9240cc83e79c48b37cd119&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::TDS_3::file_input()&lt;/code&gt;&lt;/a&gt;
have been added. It allows to load a &lt;a href=&quot;https://doc.cgal.org/5.1/TDS_3/classCGAL_1_1Triangulation__data__structure__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_data_structure_3&lt;/code&gt;&lt;/a&gt;
from an input stream, using functors to create vertices and cells.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-simplification&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgSurfaceMeshSimplification&quot;&gt;Surface Mesh Simplification&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a &lt;a href=&quot;https://doc.cgal.org/5.1/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1GarlandHeckbert__policies.html&quot;&gt;new simplification method&lt;/a&gt;
based on the quadric error defined by Garland and Heckbert.&lt;/li&gt;
    &lt;li&gt;The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EdgeProfile&lt;/code&gt; has been removed. This concept was not actually in use as the CGAL-provided model &lt;a href=&quot;https://doc.cgal.org/5.1/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1Edge__profile.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Edge_profile&lt;/code&gt;&lt;/a&gt;
was imposed to the user. Other concepts have been clarified to reflect the fact that the API uses this particular class.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;stl-extensions-for-cgal&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgSTLExtension&quot;&gt;STL Extensions for CGAL&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a new concurrency tag: &lt;a href=&quot;https://doc.cgal.org/5.1/STL_Extension/structCGAL_1_1Parallel__if__available__tag.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Parallel_if_available_tag&lt;/code&gt;&lt;/a&gt;.
This tag is a convenience typedef to &lt;a href=&quot;https://doc.cgal.org/5.1/STL_Extension/structCGAL_1_1Parallel__tag.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Parallel_tag&lt;/code&gt;&lt;/a&gt;
if the third party library TBB has been found and linked with, and to
&lt;a href=&quot;https://doc.cgal.org/5.1/STL_Extension/structCGAL_1_1Sequential__tag.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Sequential_tag&lt;/code&gt;&lt;/a&gt; otherwise.&lt;/li&gt;
  &lt;/ul&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.1 beta1 released</title>
   <link href="http://www.cgal.org/2020/06/09/cgal51-beta1/"/>
   <updated>2020-06-09T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2020/06/09/cgal51-beta1</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-5.1-beta1&quot;&gt;Download CGAL-5.1-beta1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/index.html&quot;&gt;CGAL-5.1-beta1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.1 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2019/11/08/cgal50&quot;&gt;CGAL 5.0&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;tetrahedral-remeshing-new-package&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgTetrahedralRemeshing&quot;&gt;Tetrahedral Remeshing&lt;/a&gt; (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package implements a tetrahedral isotropic remeshing algorithm,
that improves the quality of tetrahedra in terms of dihedral angles,
while targeting a given edge length.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-topology-new-package&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgSurfaceMeshTopologySummary&quot;&gt;Surface Mesh Topology&lt;/a&gt; (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package enables the computation of some topological invariants of surfaces, such as:
      &lt;ul&gt;
        &lt;li&gt;test if two (closed) curves on a combinatorial surface are homotopic. Users can choose
between free homotopy and homotopy with fixed endpoints;&lt;/li&gt;
        &lt;li&gt;test is a curve is contractible;&lt;/li&gt;
        &lt;li&gt;compute shortest non-contractible cycles on a surface, with or without weights on edges.&lt;/li&gt;
      &lt;/ul&gt;

      &lt;p&gt;See also the associated &lt;a href=&quot;https://www.cgal.org/2020/05/08/Surface_mesh_topology/&quot;&gt;blog entry&lt;/a&gt;.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;optimal-bounding-box-new-package&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgOptimalBoundingBox&quot;&gt;Optimal Bounding Box&lt;/a&gt; (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;This package implements an optimization algorithm that aims to construct a close approximation
of the &lt;em&gt;optimal bounding box&lt;/em&gt; of a mesh or a point set, which is defined as the smallest
(in terms of volume) bounding box that contains a given mesh or point set.&lt;/p&gt;

      &lt;p&gt;See also the associated &lt;a href=&quot;https://www.cgal.org/2020/04/20/Optimal_bounding_box/&quot;&gt;blog entry&lt;/a&gt;.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;tutorials&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/tutorials.html&quot;&gt;Tutorials&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Two new, detailed tutorials have been added:
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/tuto_reconstruction.html&quot;&gt;Surface Reconstruction from Point Clouds&lt;/a&gt;,
which goes over a typical full processing pipeline in a CGAL environment.&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/tuto_gis.html&quot;&gt;Geographic Information Systems (GIS)&lt;/a&gt;,
which demonstrates usage of CGAL data structures and algorithms in the context of a typical GIS application.&lt;/li&gt;
      &lt;/ul&gt;

      &lt;p&gt;Both tutorials provide complete code.&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-linear-geometry-kernel&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgKernel23&quot;&gt;2D and 3D Linear Geometry Kernel&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the functor &lt;a href=&quot;https://doc.cgal.org/5.1/Kernel_23/classKernel_1_1CompareSignedDistanceToLine__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CompareSignedDistanceToLine_2&lt;/code&gt;&lt;/a&gt;
to the 2D/3D &lt;a href=&quot;https://doc.cgal.org/5.1/Kernel_23/classKernel.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt;&lt;/a&gt; concept to compare
the signed distance of two points to a line, or the line passing through two given points.
Corresponding functors in the model (&lt;a href=&quot;https://doc.cgal.org/5.1/Kernel_23/classKernel.html#a066d07dd592ac36ba7ee90988abd349f&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compare_signed_distance_to_line_2&lt;/code&gt;&lt;/a&gt;) are also added.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-geometry-kernel&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgKernelD&quot;&gt;dD Geometry Kernel&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The kernels &lt;a href=&quot;https://doc.cgal.org/5.1/Kernel_d/structCGAL_1_1Epick__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epick_d&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/Kernel_d/structCGAL_1_1Epeck__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epeck_d&lt;/code&gt;&lt;/a&gt; gain two new functors:
&lt;a href=&quot;https://doc.cgal.org/5.1/Kernel_d/classCGAL_1_1Epeck__d_1_1Power__side__of__bounded__power__sphere__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Power_side_of_bounded_power_sphere_d&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/Kernel_d/classCGAL_1_1Epeck__d_1_1Compute__squared__radius__smallest__orthogonal__sphere__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compute_squared_radius_smallest_orthogonal_sphere_d&lt;/code&gt;&lt;/a&gt;.
Those are essential for the computation of weighted alpha-complexes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgSurfaceMesh&quot;&gt;Surface Mesh&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The function &lt;a href=&quot;https://doc.cgal.org/5.1/Surface_mesh/classCGAL_1_1Surface__mesh.html#a247d4ad3e6b106ae22e5306203812642&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Surface_mesh::clear()&lt;/code&gt;&lt;/a&gt;
now removes all non-default properties instead of just emptying them.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgBGL&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/BGL/group__PkgBGLPartition.html#ga79c3f58b577af51d1140450729d38f22&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::alpha_expansion_graphcut()&lt;/code&gt;&lt;/a&gt;,
which regularizes a multi-label partition over a user-defined graph.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/BGL/group__PkgBGLSelectionFct.html#gac71322b0cc7d7d59447531d5e5e345b6&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::regularize_face_selection_borders()&lt;/code&gt;&lt;/a&gt;,
which uses this alpha expansion graphcut to regularize the borders of a selected faces on a triangle mesh.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/BGL/group__BGLGraphExternalIndices.html#ga1a22cf8bdde32fcdf1a4a78966eed630&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::set_triangulation_ids()&lt;/code&gt;&lt;/a&gt;,
which must be used to initialize vertex, edge, and face indices of a triangulation meant to be used with BGL algorithms.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-fast-intersection-and-distance-computation&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgAABBTree&quot;&gt;3D Fast Intersection and Distance Computation&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The behavior of the internal search tree used to accelerate distance queries has changed:
usage of the internal search tree will now be enabled by default, and its construction
will be triggered by the first distance query. Automatic construction and usage can be disabled
by calling &lt;a href=&quot;https://doc.cgal.org/5.1/AABB_tree/classCGAL_1_1AABB__tree.html#abde62f52ccdf411847151aa5000ba4a4&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::AABB_tree::do_not_accelerate_distance_queries()&lt;/code&gt;&lt;/a&gt;
before the first distance query, and the tree can be built at any moment by calling
&lt;a href=&quot;https://doc.cgal.org/5.1/AABB_tree/classCGAL_1_1AABB__tree.html#a5d3877d3f2afbd09341eb4b8c230080b&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::AABB_tree::accelerate_distance_queries()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: &lt;a href=&quot;https://doc.cgal.org/5.1/AABB_tree/classCGAL_1_1AABB__tree.html#a5d3877d3f2afbd09341eb4b8c230080b&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::AABB_tree::accelerate_distance_queries()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/AABB_tree/classCGAL_1_1AABB__tree.html#abde62f52ccdf411847151aa5000ba4a4&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::AABB_tree::do_not_accelerate_distance_queries()&lt;/code&gt;&lt;/a&gt;
are no longer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;const&lt;/code&gt; functions.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgArrangementOnSurface2&quot;&gt;2D Arrangements&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Changed intersection return type from legacy &lt;a href=&quot;https://doc.cgal.org/5.1/STL_Extension/classCGAL_1_1Object.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;&lt;/a&gt;
to modern &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::variant&lt;/code&gt; in all traits concepts and models.
As there exists an implicit conversion from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::variant&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;, the
new code is backward compatible. However, it is recommended that all calls
to the intersection functions are fixed to use the new return type.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-regularized-boolean-set-operations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgBooleanSetOperations2&quot;&gt;2D Regularized Boolean Set-Operations&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Changed intersection return type from legacy &lt;a href=&quot;https://doc.cgal.org/5.1/STL_Extension/classCGAL_1_1Object.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;&lt;/a&gt;
to modern &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::variant&lt;/code&gt; in the concept &lt;a href=&quot;https://doc.cgal.org/5.1/Boolean_set_operations_2/namespaceArrDirectionalTraits.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrDirectionalTraits::Intersect_2&lt;/code&gt;&lt;/a&gt;
and its models.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-minkowski-sums&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgMinkowskiSum2&quot;&gt;2D Minkowski Sums&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Changed intersection return type from legacy &lt;a href=&quot;https://doc.cgal.org/5.1/STL_Extension/classCGAL_1_1Object.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;&lt;/a&gt;
to modern &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::variant&lt;/code&gt; in the (internally used) model &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_labeled_traits_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-spatial-searching&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgSpatialSearchingD&quot;&gt;dD Spatial Searching&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The kd-tree can now be built in parallel: &lt;a href=&quot;https://doc.cgal.org/5.1/Spatial_searching/classCGAL_1_1Kd__tree.html#a8559dbe4d7136fbc8ebab5ee290cbe06&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Kd_tree::build()&lt;/code&gt;&lt;/a&gt;
is given an optional template parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConcurrencyTag&lt;/code&gt; (default
value remains &lt;a href=&quot;https://doc.cgal.org/5.1/STL_Extension/structCGAL_1_1Sequential__tag.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Sequential_tag&lt;/code&gt;&lt;/a&gt;
for backward compatibility).&lt;/li&gt;
    &lt;li&gt;Improved the performance of the kd-tree in some cases:
      &lt;ul&gt;
        &lt;li&gt;Not storing the points coordinates inside the tree usually
generates a lot of cache misses, leading to non-optimal
performance. This is the case for example
when indices are stored inside the tree, or to a lesser extent when the points
coordinates are stored in a dynamically allocated array (e.g., &lt;a href=&quot;https://doc.cgal.org/5.1/Kernel_d/structCGAL_1_1Epick__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epick_d&lt;/code&gt;&lt;/a&gt;
with dynamic dimension) — we says “to a lesser extent” because the points
are re-created by the kd-tree in a cache-friendly order after its construction,
so the coordinates are more likely to be stored in a near-optimal order
on the heap.
In these cases, the new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EnablePointsCache&lt;/code&gt; template parameter of the
&lt;a href=&quot;https://doc.cgal.org/5.1/Spatial_searching/classCGAL_1_1Kd__tree.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Kd_tree&lt;/code&gt;&lt;/a&gt;
class can be set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Tag_true&lt;/code&gt;. The points coordinates
will then be cached in an optimal way. This will increase memory
consumption but provides better search performance. See the updated
&lt;a href=&quot;https://doc.cgal.org/5.1/Spatial_searching/classGeneralDistance.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GeneralDistance&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/Spatial_searching/classFuzzyQueryItem.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FuzzyQueryItem&lt;/code&gt;&lt;/a&gt;
concepts for additional requirements when using such a cache.&lt;/li&gt;
        &lt;li&gt;In most cases (e.g., Euclidean distance), the distance computation
algorithm knows before its end that the distance will be greater
than or equal to some given value. This is used in the (orthogonal)
k-NN search to interrupt some distance computations before its end,
saving precious milliseconds, in particular in medium-to-high dimension.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;intersecting-sequences-of-dd-iso-oriented-boxes&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgBoxIntersectionD&quot;&gt;Intersecting Sequences of dD Iso-oriented Boxes&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added parallel versions of the functions
&lt;a href=&quot;https://doc.cgal.org/5.1/Box_intersection_d/group__PkgBoxIntersectionD__box__intersection__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::box_intersection_d()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/Box_intersection_d/group__PkgBoxIntersectionD__box__self__intersection__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::box_self_intersection_d()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;spatial-sorting&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgSpatialSorting&quot;&gt;Spatial Sorting&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added parallel versions of the functions
&lt;a href=&quot;https://doc.cgal.org/5.1/Spatial_sorting/group__PkgSpatialSortingFunctions.html#ga9da67204747ac19dff65f9c9ff2fca9e&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::hilbert_sort()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/Spatial_sorting/group__PkgSpatialSortingFunctions.html#ga7c597c11a3b3859234ff68526cead84d&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::spatial_sort()&lt;/code&gt;&lt;/a&gt;
in 2D and 3D when the median policy is used.
The parallel versions use up to four threads in 2D, and up to eight threads in 3D.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-convex-hulls&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgConvexHull3&quot;&gt;3D Convex Hulls&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A new overload for &lt;a href=&quot;https://doc.cgal.org/5.1/Convex_hull_3/group__PkgConvexHull3Functions.html#gaa02a3013808fc9a2e5e2f42b9fde8e30&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::convex_hull_3()&lt;/code&gt;&lt;/a&gt;
that takes a model of &lt;a href=&quot;https://doc.cgal.org/5.1/BGL/classVertexListGraph.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VertexListGraph&lt;/code&gt;&lt;/a&gt; has been added.&lt;/li&gt;
    &lt;li&gt;The long-deprecated function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::convex_hull_3_to_polyhedron_3()&lt;/code&gt; has been removed.
The function &lt;a href=&quot;https://doc.cgal.org/5.1/Convex_hull_3/group__PkgConvexHull3Functions.html#ga2750f7f197588ed643679835c748c671&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::convex_hull_3_to_face_graph()&lt;/code&gt;&lt;/a&gt;
should be used instead.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgPolygonMeshProcessing&quot;&gt;Polygon Mesh Processing&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__orientation__grp.html#ga133e58280959c152770525f27bb42b91&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::volume_connected_component()&lt;/code&gt;&lt;/a&gt;,
which can be used to get information about the nesting of the connected components of a given triangle mesh and about
the volumes defined.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__repairing__grp.html#gac544fcaba1d59d330a3a1536caff392a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::remove_connected_components_of_negligible_size()&lt;/code&gt;&lt;/a&gt;,
which can be used to remove connected components whose area or volume is under a certain threshold.
Area and volume thresholds are either specified by the user or deduced from the bounding box of the mesh.&lt;/li&gt;
    &lt;li&gt;Added a new named parameter for &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__keep__connected__components__grp.html#ga48e7b3e6922ee78cf8ce801e3e325d9a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::keep_large_connected_components()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__repairing__grp.html#gac544fcaba1d59d330a3a1536caff392a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::remove_connected_components_of_negligible_size&lt;/code&gt;&lt;/a&gt;,
which can be used to perform a dry run of the operation, meaning that the function will return the number of connected
components that would be removed with the specified threshold, but without actually removing them.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__corefinement__grp.html#gaa491feee9e41f725332bea0ea1215578&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::split()&lt;/code&gt;&lt;/a&gt;,
which can be used to split meshes along a mesh or a plane.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__keep__connected__components__grp.html#ga9ddd1e4b915a4232b1ce5611985302aa&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::split_connected_components()&lt;/code&gt;&lt;/a&gt;
to split a single mesh containing several connected components into several meshes containing one connected component.&lt;/li&gt;
    &lt;li&gt;Added the functions &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__orientation__grp.html#gae25c1198a89c53d5df2f29dd57fda5ca&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::merge_reversible_connected_components()&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__orientation__grp.html#ga2aa4f7b500dc51d1fc4747705a050946&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::duplicate_non_manifold_edges_in_polygon_soup()&lt;/code&gt;&lt;/a&gt;,
and &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__orientation__grp.html#ga31779672b3afd660664fc9a6c4fdf74d&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::orient_triangle_soup_with_reference_triangle_mesh()&lt;/code&gt;&lt;/a&gt;,
which can be helpful when repairing a polygon soup.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__distance__grp.html#gac7af41d13bf1a7c30852be266ac81db5&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::sample_triangle_soup()&lt;/code&gt;&lt;/a&gt;,
which generates points on a triangle soup surface.&lt;/li&gt;
    &lt;li&gt;Added parallel versions of the functions &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__intersection__grp.html#gad9fe5d8b433545b69154f43935a11a3b&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::does_self_intersect()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__intersection__grp.html#gaf19c80ec12cbff7ebe9e69453f1d40b8&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::self_intersections()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;The function &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__repairing__grp.html#ga8ae4352e67d2b099994ac8990c13bd41&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::stitch_borders()&lt;/code&gt;&lt;/a&gt;
now returns the number of halfedge pairs that were stitched.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__repairing__grp.html#ga76648a509409ff3c3ad3f71eff8ce9d9&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::polygon_mesh_to_polygon_soup()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;The function &lt;a href=&quot;https://doc.cgal.org/5.1/Polygon_mesh_processing/group__PMP__repairing__grp.html#ga0dec58e8a0112791f72ebbe77bac074b&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::polygon_soup_to_polygon_mesh&lt;/code&gt;&lt;/a&gt;
now allows passing a point map (for the point range) and a vertex point map (for the polygon mesh) via named parameters.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgPointSetProcessing3&quot;&gt;Point Set Processing&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; &lt;a href=&quot;https://doc.cgal.org/5.1/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga1ab1dcee59caadde50572c5a504cc41a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::remove_outliers()&lt;/code&gt;&lt;/a&gt;
has been parallelized and thus has a new template parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConcurrencyTag&lt;/code&gt;.
To update your code simply add as first template parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Sequential_tag&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Parallel_tag&lt;/code&gt;
when calling this function.&lt;/li&gt;
    &lt;li&gt;Add a function &lt;a href=&quot;https://doc.cgal.org/5.1/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#gafee41d60b5a257ae034e9157d0af8e46&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::cluster_point_set()&lt;/code&gt;&lt;/a&gt;
that segments a point cloud into connected components based on a distance threshold.&lt;/li&gt;
    &lt;li&gt;Added wrapper functions for registration:
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#gab81663c718960780ddb176aad845e8cd&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::OpenGR::compute_registration_transformation()&lt;/code&gt;&lt;/a&gt;,
which computes the registration transformation for two point sets using the Super4PCS algorithm
implemented in the third party library &lt;a href=&quot;https://storm-irit.github.io/OpenGR/index.html&quot;&gt;OpenGR&lt;/a&gt;.&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga6194087f512e4e23dd945a9364d0931d&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::OpenGR::register_point_sets()&lt;/code&gt;&lt;/a&gt;,
which computes the registration transformation for two point sets using the Super4PCS algorithm
implemented in the third party library &lt;a href=&quot;https://storm-irit.github.io/OpenGR/index.html&quot;&gt;OpenGR&lt;/a&gt;,
and registers the points sets by transforming the data point set using the computed transformation.&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#gaf75af5c1634fa83fa05a33e95570b127&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::pointmatcher::compute_registration_transformation()&lt;/code&gt;&lt;/a&gt;
computes the registration transformation for two point sets using ICP algorithm implemented
in the third party library &lt;a href=&quot;https://github.com/ethz-asl/libpointmatcher&quot;&gt;libpointmatcher&lt;/a&gt;.&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#gaa222278e20a3ce41930d37326cd54ef9&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::pointmatcher::register_point_sets()&lt;/code&gt;&lt;/a&gt;,
which computes the registration transformation for two point sets using ICP algorithm implemented
in the third party library &lt;a href=&quot;https://github.com/ethz-asl/libpointmatcher&quot;&gt;libpointmatcher&lt;/a&gt;, and registers
the points sets by transforming the data point set using the computed transformation.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgTriangulation2&quot;&gt;2D Triangulations&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;To fix an inconsistency between code and documentation and to clarify which types of intersections
are truly allowed in constrained Delaunay triangulations, the tag &lt;a href=&quot;https://doc.cgal.org/5.1/Triangulation_2/structCGAL_1_1No__intersection__tag.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::No_intersection_tag&lt;/code&gt;&lt;/a&gt;
has been deprecated in favor of two new tags: &lt;a href=&quot;https://doc.cgal.org/5.1/Triangulation_2/structCGAL_1_1No__constraint__intersection__tag.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::No_constraint_intersection_tag&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.1/Triangulation_2/structCGAL_1_1No__constraint__intersection__requiring__constructions__tag.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::No_constraint_intersection_requiring_constructions_tag&lt;/code&gt;&lt;/a&gt;.
The latter is equivalent to the now-deprecated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::No_intersection_tag&lt;/code&gt;, and allows constraints
to intersect as long as no new point has to be created to represent that intersection (for example,
the intersection of two constraint segments in a ‘T’-like junction is an existing point
and as such does not require any new construction). The former tag, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::No_constraint_intersection_tag&lt;/code&gt;,
does not allow any intersection, except for the configuration of two constraints having a single
common endpoints, for convience.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.1/Triangulation_2/classCGAL_1_1Constrained__triangulation__plus__2.html#adea77f5db5cd4dfae302e4502f1caa85&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::split_subconstraint_graph_into_constraints()&lt;/code&gt;&lt;/a&gt;
to &lt;a href=&quot;https://doc.cgal.org/5.1/Triangulation_2/classCGAL_1_1Constrained__triangulation__plus__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Constrained_triangulation_plus_2&lt;/code&gt;&lt;/a&gt; to initialize the constraints
from a soup of disconnected segments that should first be split into polylines.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations-1&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgTriangulation3&quot;&gt;3D Triangulations&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The member function &lt;a href=&quot;https://doc.cgal.org/5.1/Triangulation_3/group__PkgIOTriangulation3.html#gadd94d0613e2dd9cdd2e88d2c74d5b1c8&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_3::file_input()&lt;/code&gt;&lt;/a&gt;
have been added. It allows to load a &lt;a href=&quot;https://doc.cgal.org/5.1/Triangulation_3/classCGAL_1_1Triangulation__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_3&lt;/code&gt;&lt;/a&gt;
from an input stream, using functors to create vertices and cells.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulation-data-structure&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgTDS3&quot;&gt;3D Triangulation Data Structure&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The member function &lt;a href=&quot;https://doc.cgal.org/5.1/TDS_3/group__PkgIOTDS3.html#ga381446a02a9240cc83e79c48b37cd119&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::TDS_3::file_input()&lt;/code&gt;&lt;/a&gt;
have been added. It allows to load a &lt;a href=&quot;https://doc.cgal.org/5.1/TDS_3/classCGAL_1_1Triangulation__data__structure__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_data_structure_3&lt;/code&gt;&lt;/a&gt;
from an input stream, using functors to create vertices and cells.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-simplification&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgSurfaceMeshSimplification&quot;&gt;Surface Mesh Simplification&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a &lt;a href=&quot;https://doc.cgal.org/5.1/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1GarlandHeckbert__policies.html&quot;&gt;new simplification method&lt;/a&gt;
based on the quadric error defined by Garland and Heckbert.&lt;/li&gt;
    &lt;li&gt;The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EdgeProfile&lt;/code&gt; has been removed. This concept was not actually in use as the CGAL-provided model &lt;a href=&quot;https://doc.cgal.org/5.1/Surface_mesh_simplification/classCGAL_1_1Surface__mesh__simplification_1_1Edge__profile.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Edge_profile&lt;/code&gt;&lt;/a&gt;
was imposed to the user. Other concepts have been clarified to reflect the fact that the API uses this particular class.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;stl-extensions-for-cgal&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.1/Manual/packages.html#PkgSTLExtension&quot;&gt;STL Extensions for CGAL&lt;/a&gt;&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a new concurrency tag: &lt;a href=&quot;https://doc.cgal.org/5.1/STL_Extension/structCGAL_1_1Parallel__if__available__tag.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Parallel_if_available_tag&lt;/code&gt;&lt;/a&gt;.
This tag is a convenience typedef to &lt;a href=&quot;https://doc.cgal.org/5.1/STL_Extension/structCGAL_1_1Parallel__tag.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Parallel_tag&lt;/code&gt;&lt;/a&gt;
if the third party library TBB has been found and linked with, and to
&lt;a href=&quot;https://doc.cgal.org/5.1/STL_Extension/structCGAL_1_1Sequential__tag.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Sequential_tag&lt;/code&gt;&lt;/a&gt; otherwise.&lt;/li&gt;
  &lt;/ul&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>New in CGAL: Surface Mesh Topology</title>
   <link href="http://www.cgal.org/2020/05/08/Surface_mesh_topology/"/>
   <updated>2020-05-08T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2020/05/08/Surface_mesh_topology</id>
   <content type="html">
&lt;h3&gt;&lt;a href=&quot;https://perso.liris.cnrs.fr/guillaume.damiand/index.php?lang=en&quot;&gt;Guillaume Damiand&lt;/a&gt;, &lt;a href=&quot;https://pagesperso.g-scop.grenoble-inp.fr/~lazarusf/&quot;&gt;Francis Lazarus&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;a href=&quot;https://liris.cnrs.fr/en&quot;&gt;CNRS, Liris&lt;/a&gt; - &lt;a href=&quot;http://www.g-scop.grenoble-inp.fr/en&quot;&gt;CNRS, G-Scop&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3&gt;Surface Mesh Topology&lt;/h3&gt;

&lt;p&gt;This new package provides a toolbox for manipulating curves on a combinatorial surface
from the topological point of view. Two main functionalities are proposed.
One functionality is the computation of shortest curves that cannot be continuously deformed to a point.
This includes the computation of the so-called &lt;em&gt;edge width&lt;/em&gt; and &lt;em&gt;face width&lt;/em&gt; of the vertex-edge graph
of a combinatorial surface. The other functionality is the homotopy test to decide
if two given curves on a combinatorial surface can be continuously deformed one into the other.&lt;p&gt;

&lt;br /&gt;

&lt;h3&gt;Computing Shortest Non-contractible Cycles&lt;/h3&gt;

&lt;p&gt;Four algorithms are implemented in the first version of this package:
&lt;ul&gt;
&lt;li&gt;computing a shortest non-contractible cycle going through a vertex
(see &lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Surface_mesh_topology/classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology.html#a10cf61303431fd08fd6b79fb37d2756e&quot;&gt;this function&lt;/a&gt;),&lt;/li&gt;
&lt;li&gt;computing a shortest non-contractible cycle through every vertex and returns the shortest cycle among them, possibly with weights associated with edges
(see &lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Surface_mesh_topology/classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology.html#ab4a3ec02fe8bcfad6bb45a2b11046e95&quot;&gt;this function&lt;/a&gt;),&lt;/li&gt;
&lt;li&gt;computing the edge width of the mesh, i.e. a shortest non-contractible cycle with unit weights
(see &lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Surface_mesh_topology/classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology.html#ab3f9842e89ec2fa60efa90586ba8f75a&quot;&gt;this function&lt;/a&gt;),&lt;/li&gt;
&lt;li&gt;computing a shortest non-contractible topological curve described as a circular sequence of traversed faces alternating with the vertices it passes through
(see &lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Surface_mesh_topology/classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology.html#afc5fc6cdd80c7fb053cb959e9c534cc1&quot;&gt;this function&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;br /&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/edge-width.png&quot;&gt;&lt;img src=&quot;../../../../images/edge-width.png&quot; style=&quot;max-width:45%&quot; /&gt;&lt;/a&gt;
  &lt;a href=&quot;../../../../images/elephant-shortest-cycle.png&quot;&gt;&lt;img src=&quot;../../../../images/elephant-shortest-cycle.png&quot; style=&quot;max-width:45%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;small&gt;&lt;b&gt;Left:&lt;/b&gt;The pink cycle is the edge width of the mesh: the shortest (in the number of edges) non contractible cycle. The green cycle is the shortest (in length) non contractible cycle. &lt;b&gt;Right:&lt;/b&gt; The three shortest non-contractible cycles computed successively on elephant mesh.&lt;/small&gt;
&lt;/div&gt;

&lt;br /&gt;

&lt;h3&gt;Homotopy Tests&lt;/h3&gt;

&lt;p&gt;The following homotopy tests are available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;test if a closed curve is contractible
(see &lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Surface_mesh_topology/classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology.html#a816ad97901765d303ee5fa50fc8a0d0b&quot;&gt;this function&lt;/a&gt;),&lt;/li&gt;
&lt;li&gt;test if two closed curves are freely homotopic
(see &lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Surface_mesh_topology/classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology.html#a85fc4a1f20c84073814251af6912539d&quot;&gt;this function&lt;/a&gt;),&lt;/li&gt;
&lt;li&gt;test if two paths are homotopic with fixed endpoints
(see &lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Surface_mesh_topology/classCGAL_1_1Surface__mesh__topology_1_1Curves__on__surface__topology.html#a05dba41f3012ec7747aa215e2af2f152&quot;&gt;this function&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;

&lt;br /&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/free-vs-fixed-endpoints.svg&quot;&gt;&lt;img src=&quot;../../../../images/free-vs-fixed-endpoints.svg&quot; style=&quot;max-width:95%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;small&gt;On the upper left surface, the green curve is contractible. The red and blue curves share the same (green) endpoint. (Being closed, their two endpoints coincide.) These last two curves are freely homotopic as shown by the suggested continuous transformation of the blue curve.&lt;/small&gt;
&lt;/div&gt;
&lt;br /&gt;

&lt;br /&gt;

&lt;p&gt;The package &lt;em&gt;Surface Mesh Topology&lt;/em&gt; is already integrated in CGAL's master branch
on the &lt;a href=&quot;https://github.com/CGAL/cgal/&quot;&gt;CGAL GitHub repository&lt;/a&gt;, and will be
officially released in the upcoming version of CGAL, CGAL 5.1, scheduled for July 2020.&lt;/p&gt;

&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Surface_mesh_topology/index.html&quot;&gt;Documentation of the package Surface Mesh Topology&lt;/a&gt; &lt;br /&gt;

&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/tree/master&quot;&gt;CGAL master branch on GitHub&lt;/a&gt;
&lt;/p&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New in CGAL: Tutorial on GIS</title>
   <link href="http://www.cgal.org/2020/05/04/Tutorial_on_GIS/"/>
   <updated>2020-05-04T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2020/05/04/Tutorial_on_GIS</id>
   <content type="html">
&lt;h3&gt;&lt;a href=&quot;https://github.com/sgiraudot&quot;&gt;Simon Giraudot&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;a href=&quot;https://geometryfactory.com/&quot;&gt;GeometryFactory&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Geographic Information Systems (GIS) aim at modeling, processing and storing geographic data. Many applications in GIS rely on specific data structures such as Triangulated Irregular Networks (TIN) or raster images. Some of these data structures can efficiently be computed and processed by the CGAL library.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/gis_tuto.jpg&quot;&gt;&lt;img src=&quot;../../../../images/gis_tuto.jpg&quot; style=&quot;max-width:100%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;small&gt;Two examples of GIS applications: Digital Surface Model and Classification of a LIDAR point cloud&lt;/small&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;GIS using CGAL&lt;/h3&gt;

&lt;p&gt;Although the CGAL library does not provide a GIS package per se, many of its existing algorithms and data structures can be used for GIS applications. For example, combining the 2D Delaunay Triangulation with projection traits makes the generation of TIN a very simple and straightforward operation.&lt;p&gt;

&lt;p&gt;Because applying the geometric tools of CGAL may not be such an obvious option to GIS developers, CGAL now offers a &lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Manual/tuto_gis.html&quot;&gt;Tutorial on GIS&lt;/a&gt;. This tutorial covers many packages such as &lt;a href=&quot;https://doc.cgal.org/latest/Triangulation_2/index.html#Chapter_2D_Triangulations&quot;&gt;Delaunay Triangulations&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/latest/Classification/index.html#Chapter_Classification&quot;&gt;Classification&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/latest/Point_set_processing_3/index.html#Chapter_Point_Set_Processing&quot;&gt;Point Set&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/latest/Polygon_mesh_processing/index.html#Chapter_PolygonMeshProcessing&quot;&gt;Polygon Mesh Processing&lt;/a&gt;... It explains how to combine these various tools into efficient GIS applications: generating Digital Terrain Models (DTM) with ground estimation, rastering at any resolution wanted, contouring height isolevels, etc.&lt;/p&gt;

&lt;br /&gt;
&lt;h3&gt;Code Provided&lt;/h3&gt;

&lt;p&gt;The whole tutorial is illustrated by screenshots of point clouds and meshes, and by code snippets. All of these code snippets form a complete program that is provided and that can be compiled and run by users.&lt;/p&gt;

&lt;br /&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Manual/tuto_gis.html&quot;&gt;&lt;img src=&quot;../../../../images/gis_tutorial.png&quot; style=&quot;max-width:100&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;small&gt;The new Tutorial on GIS.&lt;/small&gt;
&lt;/div&gt;
&lt;br /&gt;

&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Manual/tuto_gis.html&quot;&gt;Tutorial on GIS&lt;/a&gt; &lt;br /&gt;

&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/tree/master&quot;&gt;CGAL master branch on GitHub&lt;/a&gt;
&lt;/p&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New in CGAL: Optimal Bounding Box</title>
   <link href="http://www.cgal.org/2020/04/20/Optimal_bounding_box/"/>
   <updated>2020-04-20T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2020/04/20/Optimal_bounding_box</id>
   <content type="html">
&lt;h3&gt;&lt;a href=&quot;https://dikatrio.xyz/&quot;&gt;Konstantinos Katrioplas&lt;/a&gt;, &lt;a href=&quot;https://geometryfactory.com/who-we-are/&quot;&gt;Mael Rouxel-Labbé&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;a href=&quot;https://geometryfactory.com/&quot;&gt;GeometryFactory&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Encompassing a model within a volume is a common approach to accelerate
a number of applications such as collision detection or visibility testing:
the proxy volume provides a rapid way to test a configuration or filter results,
with the real model only being used when required.
Typical coarser volumes that can be used to approximate a more complex
model are simplified meshes (for example using the package
&lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Surface_mesh_simplification/index.html#Chapter_Triangulated_Surface_Mesh_Simplification&quot;&gt;Surface Mesh Simplification&lt;/a&gt;),
convex hulls, or simple rectangular boxes.&lt;p&gt;

&lt;br /&gt;

&lt;h3&gt;Bounding Volumes&lt;/h3&gt;

&lt;p&gt;Within bounding boxes, the axis-aligned bounding box (AABB) has obvious advantages:
it is extremely simple to compute and one may build a hierarchical
structure of successively tighter volumes to further speed up intersection and distance computations.
One such structure is the
&lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/AABB_tree/index.html#Chapter_3D_Fast_Intersection_and_Distance_Computation&quot;&gt;AABB tree&lt;/a&gt;.
The disadvantage is also clear: the box is usually poorly fitting most models.
A good compromise between the good approximation offered by convex hulls or simplified meshes
and the speed offered by axis-aligned bounding boxes are &lt;em&gt;Optimal Bounding Boxes&lt;/em&gt;.
Contrary to the AABB, the optimal bounding box of a model is not necessarily axis-aligned,
but provides a tight approximation.&lt;/p&gt;

&lt;br /&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/aabb_vs_obb.png&quot;&gt;&lt;img src=&quot;../../../../images/aabb_vs_obb.png&quot; style=&quot;max-width:95%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;small&gt;Although simple to compute, an AABB (left) is rarely as a good fit for a model as the optimal bounding box (right)&lt;/small&gt;
  &lt;!-- model: https://www.myminifactory.com/object/3d-print-chinese-new-year-dragon-incense-holder-5476 --&gt;
&lt;/div&gt;
&lt;br /&gt;

&lt;br /&gt;

&lt;h3&gt;Optimal Bounding Box&lt;/h3&gt;

&lt;p&gt;In 2D, the optimal bounding rectangle of an input can be computed in linear time
using the technique of &lt;a href=&quot;https://en.wikipedia.org/wiki/Rotating_calipers&quot;&gt;&lt;em&gt;rotating calipers&lt;/em&gt;&lt;/a&gt;
(see also the CGAL package &lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Bounding_volumes/index.html#Chapter_Bounding_Volumes&quot;&gt;Bounding Volumes&lt;/a&gt;).
An algorithm to compute the optimal oriented bounding box in 3D was proposed
by O’Rourke in 1985 (&lt;a href=&quot;http://cs.smith.edu/~jorourke/Papers/MinVolBox.pdf&quot;&gt;&lt;em&gt;Finding Minimal Enclosing Boxes&lt;/em&gt;&lt;/a&gt;),
but its cubic complexity in the number of points makes it unusable in practice.&lt;/p&gt;

&lt;p&gt;The implementation proposed in this new CGAL package is based on the paper of Chang et al.,
&lt;a href=&quot;http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.717.9566&amp;amp;rep=rep1&amp;amp;type=pdf&quot;&gt;&lt;em&gt;
Fast oriented bounding box optimization on the rotation group SO(3, R)&lt;/em&gt;&lt;/a&gt;,
where an algorithm to compute a close approximation of the optimal
bounding box is introduced. The algorithm formulates the computation
of the optimal bounding box as an unconstrained optimization problem
on the 3D matrix rotation group. The function to optimize is defined
as the volume of the box. Because this function is non-differentiable,
in particular near local optima, traditional optimization methods
might encounter convergence issues.
Consequently, Chang et al.'s algorithm employs a combination
of a derivative-free optimization method, the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Nelder%E2%80%93Mead_method&quot;&gt;Nelder-Mead simplex method&lt;/a&gt;, and a metaheuristics method based on
biological evolution principles to maintain and evolve a population of tentative
rotation matrices. The purpose of this evolution is to oppose
a global approach to the local Nelder-Mead optimization,
enabling the algorithm to explore the search space as much as possible,
and to find not only a local minimum, but a global optimum.&lt;/p&gt;

&lt;br /&gt;

&lt;h3&gt;Implementation in CGAL&lt;/h3&gt;

&lt;p&gt;The implementation of CGAL supports point sets and meshes as input, with multiple possible output types.
Convex hull preprocessing is used to greatly improve speed, and is performed using the package
&lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Convex_hull_3/index.html#Chapter_3D_Convex_Hulls&quot;&gt;3D Convex Hull&lt;/a&gt;.&lt;/p&gt;

&lt;br /&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/obb_chess.png&quot;&gt;&lt;img src=&quot;../../../../images/obb_chess.png&quot; style=&quot;max-width:95%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;small&gt;Optimal bounding boxes of a set of chess pieces.&lt;/small&gt;
  &lt;!-- chess pieces from https://www.myminifactory.com/object/3d-print-chess-game-set-26114 --&gt;
&lt;/div&gt;
&lt;br /&gt;

&lt;br /&gt;

&lt;p&gt;The package &lt;em&gt;Optimal bounding box&lt;/em&gt; is already integrated in CGAL's master branch
on the &lt;a href=&quot;https://github.com/CGAL/cgal/&quot;&gt;CGAL GitHub repository&lt;/a&gt;, and will be
officially released in the upcoming version of CGAL, CGAL 5.1, scheduled for July 2020.&lt;/p&gt;

&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Optimal_bounding_box/index.html#Chapter_Building_Optimal_Bounding_Box&quot;&gt;Documentation of the package Optimal_bounding_box&lt;/a&gt; &lt;br /&gt;

&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/tree/master&quot;&gt;CGAL master branch on GitHub&lt;/a&gt;
&lt;/p&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New in CGAL: Tutorial on Surface Reconstruction</title>
   <link href="http://www.cgal.org/2020/04/02/Tutorial_on_Surface_Reconstruction/"/>
   <updated>2020-04-02T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2020/04/02/Tutorial_on_Surface_Reconstruction</id>
   <content type="html">
&lt;h3&gt;&lt;a href=&quot;https://github.com/sgiraudot&quot;&gt;Simon Giraudot&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;a href=&quot;https://geometryfactory.com/&quot;&gt;GeometryFactory&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Surface reconstruction from point clouds is a core topic in geometry processing. It is an ill-posed problem: there is an infinite number of surfaces that approximate a single point cloud and a point cloud does not define a surface in itself. Thus additional assumptions and constraints must be defined by the user and reconstruction can be achieved in many different ways.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/compare_reconstructions.png&quot;&gt;&lt;img src=&quot;../../../../images/compare_reconstructions.png&quot; style=&quot;max-width:95%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;small&gt;Comparison of reconstruction methods applied to the same input (full shape and close-up). From left to right: original point cloud; Poisson; advancing front; scale space.&lt;/small&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;Reconstruction in CGAL&lt;/h3&gt;

&lt;p&gt;Several surface reconstruction algorithms are provided by CGAL, namely &lt;a href=&quot;https://doc.cgal.org/latest/Poisson_surface_reconstruction_3/index.html#Chapter_Poisson_Surface_Reconstruction&quot;&gt;Poisson Surface Reconstruction&lt;/a&gt;, &lt;a href=&quot;https://doc.cgal.org/latest/Advancing_front_surface_reconstruction/index.html#Chapter_Advancing_Front_Surface_Reconstruction&quot;&gt;Advancing Front Surface Reconstruction&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/latest/Scale_space_reconstruction_3/index.html#Chapter_Scale_space_reconstruction&quot;&gt;Scale Space Surface Reconstruction&lt;/a&gt; (in addition, &lt;a href=&quot;https://doc.cgal.org/latest/Optimal_transportation_reconstruction_2/index.html#Chapter_Optimal_Transportation_Curve_Reconstruction&quot;&gt;Optimal Transportation Curve Reconstruction&lt;/a&gt; covers curve reconstructions in 2D while &lt;a href=&quot;https://doc.cgal.org/latest/Polygonal_surface_reconstruction/index.html#Chapter_PolygonalSurfaceReconstruction&quot;&gt;Polygonal Surface Reconstruction&lt;/a&gt; implements a piecewise planar reconstruction algorithm specialized for urban processing). In addition, packages &lt;a href=&quot;https://doc.cgal.org/latest/Point_set_processing_3/index.html#Chapter_Point_Set_Processing&quot;&gt;Point Set Processing&lt;/a&gt; and &lt;a href=&quot;https://doc.cgal.org/latest/Spatial_searching/index.html#Chapter_dD_Spatial_Searching&quot;&gt;Spatial Searching&lt;/a&gt; can be used to preprocess point clouds.&lt;p&gt;

&lt;p&gt;Because such a diverse set of tools can be confusing for users, CGAL now offers a &lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Manual/tuto_reconstruction.html&quot;&gt;Tutorial on Surface Reconstruction from Point Clouds&lt;/a&gt;. This tutorial explains how to choose the right algorithm, how to preprocess defect-laden data, how the different algorithms are expected to behave depending on the data and on parameters, and how to save and postprocess the output meshes.&lt;/p&gt;

&lt;br /&gt;
&lt;h3&gt;Code Provided&lt;/h3&gt;

&lt;p&gt;The whole tutorial is illustrated by screenshots of point clouds and meshes, and by code snippets. All of these code snippets form a complete program that is provided and that can be compiled and run by users.&lt;/p&gt;

&lt;br /&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Manual/tuto_reconstruction.html&quot;&gt;&lt;img src=&quot;../../../../images/reconstruction_tutorial.png&quot; style=&quot;max-width:100%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;small&gt;The new Tutorial on Surface Reconstruction from Point Clouds.&lt;/small&gt;
&lt;/div&gt;
&lt;br /&gt;

&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Manual/tuto_reconstruction.html&quot;&gt;Tutorial on Surface Reconstruction from Point Clouds&lt;/a&gt; &lt;br /&gt;

&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/tree/master&quot;&gt;CGAL master branch on GitHub&lt;/a&gt;
&lt;/p&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL User Portrait: Bayer CropScience</title>
   <link href="http://www.cgal.org/news/2020/04/01/Bayer/"/>
   <updated>2020-04-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2020/04/01/Bayer</id>
   <content type="html">
&lt;p&gt;Bayer is a German multinational corporation that in 2018 acquired
Monsanto, an American agrochemical and agricultural biotechnology corporation,
now &lt;em&gt;Bayer CropScience&lt;/em&gt;.&lt;/p&gt;

&lt;h3&gt;Computer Science Meets Crop Science&lt;/h3&gt;

&lt;p&gt;In order to &lt;a href=&quot;https://www.cropscience.bayer.com/&quot;&gt;challenge the impossible&lt;/a&gt;, Bayer CropScience has
built a strong, multi-disciplinary R&amp;amp;D group with biologists, physicists, chemists,
anthropologists,  and, last but not least, computer scientists.
As to provide enough food for an ever-growing world population,
they work towards new high-yield plants and on insect replicants to replace
pollinating insects whose populations are dwindling: bees for example are on the red list of endangered species as a consequence 
of global warming, among other causes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In the 20th century, we fought nature with products like Roundup. In the 21th century, we go with the flow!&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Tonbo Mitsubachi, R&amp;amp;D director Bayer CropScience, Tokyo, Japan&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While the strategy of the typical robotics researcher, for example at &lt;a href=&quot;https://smartfarmingconference.com/speaker/apis-pollinator-drone-presented-anthony-van-der-pluijm-aleksandar-petrov-delft-university-technology/&quot;&gt;Delft University&lt;/a&gt;, is to miniaturize classical drones, Bayer CropScience has decided to go the other way round,
that is, bottom up, right from the animal, replacing as little as possible in a proven design that
is the result of thousands of years of evolution.&lt;/p&gt;

&lt;p&gt;Since the flight mechanics of dragonflies is better understood than the flight mechanics of bees,
let alone bumble bees, Bayer CropScienc has opted for 3D printing dragonflies. But because insect wings are far beyond what
can be additively manufactured in 2020, they only print the body and combine it 
with organic wings, which get harvested from natural dragonflies. The printed body hosts minimalistic sensor technology,
a Raspberry Epsilon, which is the low-energy model of the well-known Raspberry Pi,
and biodegradable battery technology, all printed in a single sweep, with only the organic wings
attached in a final assembly step.&lt;/p&gt;

&lt;h3&gt;Tell Me Where the Flowers Are&lt;/h3&gt;

&lt;p&gt;As in most products where CGAL components are used, CGAL provides only a small - but key - piece of functionality
in a big technological puzzle. The pollinating dragonflies land
on the infrared spot that each clover flower represents in an otherwise gray world. &quot;Seeing&quot; this spot
is camera and image processing technology. But this gray world has major obstacles to avoid, namely
grass blades, plant stems, and pedicels sticking out. This is where CGAL comes in. The AI-based collision avoidance
algorithm uses geometry neurons (TM) which perform segment stabbing queries using the CGAL
&lt;a href=&quot;https://doc.cgal.org/latest/Manual/packages.html#PkgAABBTree&quot;&gt;Axis Aligned Bounding Box Tree&lt;/a&gt;.
This CGAL data structure works out of the box, but in order to achieve real time performance,
we had to rewrite the parallelism based on TBB, as Intel does not yet support the Raspberry Epsilon.&lt;/p&gt;

&lt;h3&gt;Small is Beautiful&lt;/h3&gt;

&lt;p&gt;Bayer CropScience does not only pick the best technologies available worldwide, 
but it also does not limit itself to doing joint research with
Ivy League universities, as did Monsanto, which eventually led to the Roundup disaster.
Monsanto indeed suffered from the NIH problem and a national preference for research collaborations,
but Bayer CropScience employs a technology scout team that identifies high-potential small and medium enterprises
which are capable of providing solutions, and which might not be visible on the radar of Bayer's competitors.&lt;p&gt;

&lt;blockquote&gt;
&lt;p&gt;&quot;It is truly incredible what you can get from European SMEs nowadays. 
&lt;a href=&quot;https://www.geometryfactory.com&quot;&gt;GeometryFactory&lt;/a&gt;, based in the French Silicon Valley,
did an incredible job when they turned the AABB Tree, developed at Inria
(&lt;em&gt;Inventeurs du Monde Numerique&lt;/em&gt;), into an industry-strong product and even got it running on a Raspberry Epsilon. We could not believe our eyes when we saw the first flying dragons produced by  &lt;a href=&quot;http://www.microlight.fr/applications.html&quot;&gt;Microlight3D&lt;/a&gt;, a Grenoble-based company which specializes in microprinting.&quot;&lt;/p&gt;
 &lt;p&gt;&lt;small&gt;Prof. Oliver von Stadt, Technology Scout, Bayer CropScience, Nancy, France&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Further Reading&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The full description of the &lt;em&gt;Dragon Project&lt;/em&gt; on the  Bayer CropScience &lt;a href=&quot;https://www.cropscience.bayer.com/&quot;&gt;website&lt;/a&gt;.&lt;/p&gt;
&lt;li&gt;&lt;p&gt;How &lt;a href=&quot;https://en.wikipedia.org/wiki/Crop_rotation&quot;&gt;crop rotation&lt;/a&gt;
with clover will make industrial fertilizers near obsolete.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fact check: bees are nice to have, but are in fact not needed for the pollination of &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_crop_plants_pollinated_by_bees&quot;&gt;wheat, corn, and rice&lt;/a&gt;!&lt;/p&gt;&lt;/li&gt;
&amp;lt;/ul&amp;gt;


&lt;p&gt;&lt;b&gt;We work hard to make all the above a reality - so far it is only an april joke.
It even came with a &lt;a href=&quot;https://cgal.github.io/cgal-web/April20/index.html&quot;&gt;gallery.&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New in CGAL: Wrappers for Registration Libraries</title>
   <link href="http://www.cgal.org/2020/03/23/Registration/"/>
   <updated>2020-03-23T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2020/03/23/Registration</id>
   <content type="html">
&lt;h3&gt;&lt;a href=&quot;http://www.necipyildiran.com/&quot;&gt;Necip Fazil Yildiran&lt;/a&gt;, &lt;a href=&quot;https://www.irit.fr/recherches/STORM/MelladoNicolas/&quot;&gt;Nicolas Mellado&lt;/a&gt; and &lt;a href=&quot;https://github.com/sgiraudot&quot;&gt;Simon Giraudot&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;a href=&quot;https://www.irit.fr/STORM/site/&quot;&gt;STORM, IRIT&lt;/a&gt; and &lt;a href=&quot;https://geometryfactory.com/&quot;&gt;GeometryFactory&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Digitizing large objects or scenes often is often performed by scanning from several points of view and merging the scans together afterwards. If the sensors used for acquisition do not have a way to spatially organize these scans, a registration algorithm should be applied in order to produce a unified point cloud that is spatially consistent; even if the sensors used do produce localization and orientation information, these might still suffer from noise and imprecision and require a registration processing.&lt;/p&gt;

&lt;p&gt;CGAL now offers wrappers for two registration libraries: &lt;em&gt;&lt;a href=&quot;https://storm-irit.github.io/OpenGR/&quot;&gt;OpenGR&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href=&quot;https://github.com/ethz-asl/libpointmatcher&quot;&gt;Pointmatcher&lt;/a&gt;&lt;/em&gt;, enabling the combination of these tools with the diverse algorithms of CGAL (&lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Point_set_processing_3/index.html&quot;&gt;Point set processing&lt;/a&gt;, &lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Manual/packages.html#PartReconstruction&quot;&gt;Shape Reconstruction&lt;/a&gt;, &lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Shape_detection/index.html#Chapter_Shape_Detection&quot;&gt;Shape Detection&lt;/a&gt;, &lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Classification/index.html#Chapter_Classification&quot;&gt;Classification&lt;/a&gt;, ...) in a seamless and efficient manner.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;OpenGR&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;OpenGR&lt;/em&gt; is a collection of C++ libraries for 3D Global Registration released under the terms of the APACHE V2 licence. The algorithm used is Super4PCS.&lt;/p&gt;

&lt;p&gt;From two arbitrarily located and arbitrarily oriented point clouds, &lt;em&gt;OpenGR&lt;/em&gt; computes a global registration transformation: applying this transformation to the second point cloud makes it coarsely registered with the first one.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;Pointmatcher&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Pointmatcher&lt;/em&gt; is a modular library implementing the Iterative Closest Point (ICP) algorithm for aligning point clouds, released under the terms of the BSD license.&lt;/p&gt;

&lt;p&gt;From point clouds roughly registered (for example, using the output of &lt;em&gt;OpenGR&lt;/em&gt;), &lt;em&gt;Pointmatcher&lt;/em&gt; computes a fine registration transformation: applying this transformation to the second point cloud makes it finely registered with the first one.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/Registration.png&quot;&gt;&lt;img src=&quot;../../../../images/Registration.png&quot; style=&quot;max-width:95%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;small&gt;Registration pipeline. From left to right: input point cloud, output of coarse registration with &lt;em&gt;OpenGR&lt;/em&gt;, output of fine registration using &lt;em&gt;Pointmatcher&lt;/em&gt;.&lt;/small&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Both wrappers are part of the &lt;b&gt;Point set processing&lt;/b&gt; package; two new examples (&lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Point_set_processing_3/Point_set_processing_3_2registration_with_OpenGR_8cpp-example.html&quot;&gt;one for OpenGR&lt;/a&gt;, and &lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Point_set_processing_3/Point_set_processing_3_2registration_with_pointmatcher_8cpp-example.html&quot;&gt;one for Pointmatcher&lt;/a&gt;) have been added to get you quickly started.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Point_set_processing_3/index.html&quot;&gt;Documentation of the package Point_set_processing_3&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/tree/master&quot;&gt;CGAL master branch on GitHub&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.0.2 released</title>
   <link href="http://www.cgal.org/2020/02/25/cgal502/"/>
   <updated>2020-02-25T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2020/02/25/cgal502</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-5.0.2&quot;&gt;Download CGAL-5.0.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.0.2/Manual/index.html&quot;&gt;CGAL-5.0.2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.0.2 is a bug-fix release for &lt;a href=&quot;../../../../2019/11/08/cgal50&quot;&gt;CGAL 5.0&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2020/01/24/cgal501&quot;&gt;CGAL 5.0.1&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=label%3AMerged_in_5.0.2+-label%3AMerged_in_5.0.1&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.14.3 released</title>
   <link href="http://www.cgal.org/2020/02/25/cgal4143/"/>
   <updated>2020-02-25T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2020/02/25/cgal4143</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.14.3&quot;&gt;Download CGAL-4.14.3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.14.3/Manual/index.html&quot;&gt;CGAL-4.14.3 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.14.2 is a bug-fix release for &lt;a href=&quot;../../../../2019/03/29/cgal414&quot;&gt;CGAL 4.14&lt;/a&gt;.  In particular, it fixes a performance regression in the 3D Triangulations, when the &lt;code&gt;Parallel_tag&lt;/code&gt; is used.
The list of fixed bugs since &lt;a href=&quot;../../../../2019/11/08/cgal4142&quot;&gt;CGAL 4.14.2&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=label%3AMerged_in_4.14.3+-label%3AMerged_in_4.14.2&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL to participate in the Google Summer of Code 2020</title>
   <link href="http://www.cgal.org/news/2020/02/20/gsoc-2020-mentoring/"/>
   <updated>2020-02-20T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2020/02/20/gsoc-2020-mentoring</id>
   <content type="html">
&lt;p&gt;The CGAL Project is a &lt;a href=&quot;https://summerofcode.withgoogle.com/organizations/5350535705657344/&quot;&gt;mentoring organization&lt;/a&gt;
for &lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;Google Summer of Code 2020&lt;/a&gt;.
Have a look at our &lt;a href=&quot;https://github.com/CGAL/cgal/wiki/Project-Ideas&quot;&gt;Project Ideas&lt;/a&gt; page.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.0.1 released</title>
   <link href="http://www.cgal.org/2020/01/24/cgal501/"/>
   <updated>2020-01-24T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2020/01/24/cgal501</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-5.0.1&quot;&gt;Download CGAL-5.0.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.0.1/Manual/index.html&quot;&gt;CGAL-5.0.1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.0.1 is a bug-fix release for &lt;a href=&quot;../../../../2019/11/08/cgal50&quot;&gt;CGAL 5.0&lt;/a&gt;.  In particular, it fixes a performance regression in the 3D Triangulations, when the &lt;code&gt;Parallel_tag&lt;/code&gt; is used.
The list of fixed bugs since &lt;a href=&quot;../../../../2019/11/08/cgal50&quot;&gt;CGAL 5.0&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=label%3AMerged_in_5.0.1+is%3Aclosed&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.0 released</title>
   <link href="http://www.cgal.org/2019/11/08/cgal50/"/>
   <updated>2019-11-08T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2019/11/08/cgal50</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-5.0&quot;&gt;Download CGAL-5.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/index.html&quot;&gt;CGAL-5.0 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.0 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2019/03/29/cgal414&quot;&gt;CGAL 4.14&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general-changes&quot;&gt;General changes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;CGAL 5.0 is the first release of CGAL that requires a C++ compiler
with the support of C++14 or later. The new list of supported
compilers is:
      &lt;ul&gt;
        &lt;li&gt;Visual C++ 14.0 (from Visual Studio 2015 Update 3) or later,&lt;/li&gt;
        &lt;li&gt;Gnu g++ 6.3 or later (on Linux or MacOS),&lt;/li&gt;
        &lt;li&gt;LLVM Clang version 8.0 or later (on Linux or MacOS), and&lt;/li&gt;
        &lt;li&gt;Apple Clang compiler versions 7.0.2 and 10.0.1 (on MacOS).&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Since CGAL 4.9, CGAL can be used as a header-only library, with
dependencies. Since CGAL 5.0, that is now the default, unless
specified differently in the (optional) CMake configuration.&lt;/li&gt;
    &lt;li&gt;The section “Getting Started with CGAL” of the documentation has
been updated and reorganized.&lt;/li&gt;
    &lt;li&gt;The minimal version of Boost is now 1.57.0.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygonal-surface-reconstruction-new-package&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgPolygonalSurfaceReconstruction&quot;&gt;Polygonal Surface Reconstruction&lt;/a&gt; (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package provides a method for piecewise planar object reconstruction from point clouds. 
The method takes as input an unordered point set sampled from a piecewise planar object 
and outputs a compact and watertight surface mesh interpolating the input point set. 
The method assumes that all necessary major planes are provided (or can be extracted from 
the input point set using the shape detection method described in Point Set Shape Detection, 
or any other alternative methods).The method can handle arbitrary piecewise planar objects 
and is capable of recovering sharp features and is robust to noise and outliers. See also 
the associated &lt;a href=&quot;https://www.cgal.org/2019/08/05/Polygonal_surface_reconstruction/&quot;&gt;blog entry&lt;/a&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;shape-detection-major-changes&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgShapeDetection&quot;&gt;Shape Detection&lt;/a&gt; (major changes)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ShapeDetectionTraits&lt;/code&gt; has been renamed to &lt;a href=&quot;https://doc.cgal.org/5.0/Shape_detection/classEfficientRANSACTraits.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EfficientRANSACTraits&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shape_detection_3&lt;/code&gt; namespace has been renamed to &lt;a href=&quot;https://doc.cgal.org/5.0/Shape_detection/annotated.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shape_detection&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;Added a new, generic implementation of region growing. This enables for example applying region growing to inputs such as 2D and 3D point sets,
or models of the &lt;a href=&quot;https://doc.cgal.org/5.0/BGL/classFaceGraph.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceGraph&lt;/code&gt;&lt;/a&gt; concept. Learn more about this new algorithm with this &lt;a href=&quot;https://www.cgal.org/2019/07/30/Shape_detection/&quot;&gt;blog entry&lt;/a&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-geometry-kernel&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgKernelD&quot;&gt;dD Geometry Kernel&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;A new exact kernel, &lt;a href=&quot;https://doc.cgal.org/5.0/Kernel_d/structCGAL_1_1Epeck__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epeck_d&lt;/code&gt;&lt;/a&gt;, is now available.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-linear-geometry-kernel&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgKernel23&quot;&gt;2D and 3D Linear Geometry Kernel&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added a new concept, &lt;a href=&quot;https://doc.cgal.org/5.0/Kernel_23/classKernel_1_1ComputeApproximateAngle__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ComputeApproximateAngle_3&lt;/code&gt;&lt;/a&gt;,
to the 3D Kernel concepts to compute the approximate angle between two 3D vectors. Corresponding functors
in the model (&lt;a href=&quot;https://doc.cgal.org/5.0/Kernel_23/classKernel.html#a183c9ac358a4ccddc04e680f8ed16c0b&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compute_approximate_angle_3&lt;/code&gt;&lt;/a&gt;) 
and free function (&lt;a href=&quot;https://doc.cgal.org/5.0/Kernel_23/group__approximate__angle__grp.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;approximate_angle&lt;/code&gt;&lt;/a&gt;)
have also been added.&lt;/li&gt;
    &lt;li&gt;The following objects are now hashable and thus trivially usable 
with &lt;a href=&quot;https://en.cppreference.com/w/cpp/container/unordered_set&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::unordered_set&lt;/code&gt;&lt;/a&gt; 
and &lt;a href=&quot;https://en.cppreference.com/w/cpp/header/unordered_map&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::unordered_map&lt;/code&gt;&lt;/a&gt;:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Aff_transformation_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Aff_transformation_3&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Bbox_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Bbox_3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Circle_2&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Iso_cuboid_3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Iso_rectangle_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Point_2&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Point_3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Segment_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Segment_3&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Sphere_3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Vector_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Vector_3&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Weighted_point_2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Weighted_point_3&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/latest/Manual/packages.html#PkgPolygonMeshProcessing&quot;&gt;Polygon Mesh Processing&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Introduced a &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/index.html#title36&quot;&gt;wide range of new functions&lt;/a&gt; 
related to location of queries on a triangle mesh,
such as &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__PMP__locate__grp.html#gada09bd8740ba69ead9deca597d53cf15&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::locate(Point, Mesh)&lt;/code&gt;&lt;/a&gt;.
The location of a point on a triangle mesh is expressed as the pair of a face and the barycentric
coordinates of the point in this face, enabling robust manipulation of locations 
(for example, intersections of two 3D segments living within the same face).&lt;/li&gt;
    &lt;li&gt;Added the mesh smoothing function &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__PMP__meshing__grp.html#gaa0551d546f6ab2cd9402bea12d8332a3&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;smooth_mesh()&lt;/code&gt;&lt;/a&gt;,
which can be used to improve the quality of triangle elements based on various geometric characteristics.&lt;/li&gt;
    &lt;li&gt;Added the shape smoothing function &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__PMP__meshing__grp.html#gaaa083ec78bcecf351e04d1bbf460b4a2&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;smooth_shape()&lt;/code&gt;&lt;/a&gt;,
which can be used to smooth the surface of a triangle mesh, using the mean curvature flow to perform noise removal.
(See also the new entry in the &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/index.html#title8&quot;&gt;User Manual&lt;/a&gt;)&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__measure__grp.html#ga6da5119ce2c50729fda11a90ae7fb9ba&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::centroid()&lt;/code&gt;&lt;/a&gt;,
which computes the centroid of a closed triangle mesh.&lt;/li&gt;
    &lt;li&gt;Added the functions &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__PMP__repairing__grp.html#ga9c12c4878c08a117b3733bb45f1a34cf&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::stitch_boundary_cycle()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__PMP__repairing__grp.html#ga24d5ae37f62064b3fc576ba48a4ccc63&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::stitch_boundary_cycles()&lt;/code&gt;&lt;/a&gt;,
which can be used to try and merge together geometrically compatible but combinatorially different halfedges
that belong to the same boundary cycle.&lt;/li&gt;
    &lt;li&gt;It is now possible to pass a face-size property map to &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__keep__connected__components__grp.html#ga48e7b3e6922ee78cf8ce801e3e325d9a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::keep_large_connected_components()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__keep__connected__components__grp.html#ga68c6c29dfc6a26a6a2f8befe6944f19d&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::keep_largest_connected_components()&lt;/code&gt;&lt;/a&gt;, enabling users to define
how the size of a face is computed (the size of the connected component is the sum of the sizes of its faces).
If no property map is passed, the behavior is unchanged to previous versions: the size
of a connected component is the number of faces it contains.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__PMP__repairing__grp.html#ga36098d2415efd0604b7b996163bc22db&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::non_manifold_vertices()&lt;/code&gt;&lt;/a&gt;,
which can be used to collect all the non-manifold vertices (i.e. pinched vertices,
or vertices appearing in multiple umbrellas) of a mesh.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-point-set&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgPointSet3&quot;&gt;3D Point Set&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The &lt;a href=&quot;https://doc.cgal.org/5.0/Point_set_3/group__PkgPointSet3IO.html&quot;&gt;PLY IO functions&lt;/a&gt; now take an additional optional parameter to 
read/write comments from/in the PLY header.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/latest/Manual/packages.html#PkgPointSetProcessing3&quot;&gt;Point Set Processing&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: the API using iterators and overloads for optional parameters (deprecated since
CGAL 4.12) has been removed. The current (and now only) API uses ranges and Named Parameters.&lt;/li&gt;
    &lt;li&gt;Added the possibility to use the named parameter
&lt;a href=&quot;https://doc.cgal.org/5.0/Point_set_processing_3/group__psp__namedparameters.html#PSP_neighbor_radius&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;neighbor_radius&lt;/code&gt;&lt;/a&gt; 
to use spherical neighbor queries instead of K-nearest neighbors queries for the following functions:
&lt;a href=&quot;https://doc.cgal.org/5.0/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga4f82723e2f0bb33f3677e29e0208a256&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::bilateral_smooth_point_set()&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://doc.cgal.org/5.0/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga0cd0f87de690d4edf82740e856efa491&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::jet_estimate_normals()&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://doc.cgal.org/5.0/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga549402c0a8a8b6b71875181e93961521&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::jet_smooth_point_set()&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://doc.cgal.org/5.0/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga50c98d5c5ae5535bce6f32eddbd03f33&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::mst_orient_normals()&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://doc.cgal.org/5.0/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga8c642da96a025ab32445aeb6cc219b0b&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::pca_estimate_normals()&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&quot;https://doc.cgal.org/5.0/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#gafd0b5a21ec5042e4bca09cb43f1847f9&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::remove_outliers()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgTriangulation2&quot;&gt;2D Triangulations&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Removed the deprecated functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Constrained_triangulation_plus_2::
vertices_in_constraint_{begin/end}(Vertex_handle va, Vertex_handle vb) const;&lt;/code&gt;,
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Constrained_triangulation_plus_2::remove_constraint(Vertex_handle va, Vertex_handle vb)&lt;/code&gt;,
that is a pair of vertex handles is no longer a key for a polyline constraint.
Users must use a version prior to 5.0 if they need this functionality.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Removed the deprecated classes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Regular_triangulation_euclidean_traits_2&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Regular_triangulation_filtered_traits_2&lt;/code&gt;. Users must use a version prior to 5.0 if they need these classes.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The &lt;a href=&quot;https://doc.cgal.org/5.0/BGL/group__PkgBGLTraits.html&quot;&gt;graph traits&lt;/a&gt; enabling CGAL’s 2D triangulations to be used as a parameter
for any graph-based algorithm of CGAL (or boost) have been improved to fully model the &lt;a href=&quot;https://doc.cgal.org/5.0/BGL/classFaceGraph.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceGraph&lt;/code&gt;&lt;/a&gt; concept.
In addition, only the finite simplicies (those not incident to the infinite vertex) of the 2D triangulations
are now visibile through this scope. The complete triangulation can still be accessed as a graph,
by using the graph traits of the underlying triangulation data structure (usually,
&lt;a href=&quot;https://doc.cgal.org/5.0/TDS_2/classCGAL_1_1Triangulation__data__structure__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_data_structure_2&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert()&lt;/code&gt; function
of
&lt;a href=&quot;https://doc.cgal.org/latest/Triangulation_2/classCGAL_1_1Triangulation__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_2&lt;/code&gt;&lt;/a&gt;
which takes a range of points as argument is now guaranteed to
insert the points following the order of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InputIterator&lt;/code&gt;.  Note
that this change only affects the base class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_2&lt;/code&gt;
and not any derived class, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delaunay_triangulation_2&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Added a new &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_2/classCGAL_1_1Triangulation__2.html#a6cfa7d3aaa375a25d217858b49e2eb07=&quot;&gt;constructor&lt;/a&gt;
 and &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_2/classCGAL_1_1Triangulation__2.html#ac5e9bc8adef80dc01a0b31c2d0234545&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert()&lt;/code&gt;&lt;/a&gt;
 function to &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_2/classCGAL_1_1Triangulation__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_2&lt;/code&gt;&lt;/a&gt;
 that takes a range of points with info.&lt;/li&gt;
    &lt;li&gt;Introduced a new face base class, &lt;a href=&quot;https://doc.cgal.org/5.0/BGL/classCGAL_1_1Triangulation__face__base__with__id__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_face_base_with_id_2&lt;/code&gt;&lt;/a&gt;
which enables storing user-defined integer IDs in the face of any 2D triangulation, a precondition to use some
BGL algorithms.&lt;/li&gt;
    &lt;li&gt;Added range types and functions that return ranges, for example for all vertices, enabling the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C++11&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt;-loops.
See &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_2/Triangulation_2_2for_loop_2_8cpp-example.html&quot;&gt;this new example&lt;/a&gt; for a usage demonstration.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations-1&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgTriangulation3&quot;&gt;3D Triangulations&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_3/classCGAL_1_1Triangulation__3.html#a63f67cf6aaadcee14318cf56a36d247a&quot;&gt;constructor&lt;/a&gt;
and the &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_3/classCGAL_1_1Triangulation__3.html#ad3353128386bbb51f79d0263e7f67337&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert()&lt;/code&gt;&lt;/a&gt;
function of &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_3/classCGAL_1_1Triangulation__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_3&lt;/code&gt;&lt;/a&gt; 
which take a range of points as argument are now guaranteed to
insert the points following the order of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InputIterator&lt;/code&gt;. Note
that this change only affects the base class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_3&lt;/code&gt;
and not any derived class, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delaunay_triangulation_3&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Added constructor and &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_3/classCGAL_1_1Triangulation__3.html#a8aa85f88733d30aa3ec5385538e13ace&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert()&lt;/code&gt;&lt;/a&gt;
function to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_3&lt;/code&gt; that takes a range of points with info.&lt;/li&gt;
    &lt;li&gt;Added range types and functions that return ranges, for example for all vertices, which enables to use C++11 for-loops.
See &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_3/Triangulation_3_2for_loop_8cpp-example.html&quot;&gt;this new example&lt;/a&gt; for a usage demonstration.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgSurfaceMesh&quot;&gt;Surface Mesh&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Introduced new functions to read and write using the PLY format,
&lt;a href=&quot;https://doc.cgal.org/5.0/Surface_mesh/group__PkgSurface__mesh.html#ga42f6ad486ddab74e13d3dc53f511c343&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_ply()&lt;/code&gt;&lt;/a&gt; 
and &lt;a href=&quot;https://doc.cgal.org/5.0/Surface_mesh/group__PkgSurface__mesh.html#ga77bbb79d449c981895eedb6c3c23bd14&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_ply()&lt;/code&gt;&lt;/a&gt;, 
enabling users to save and load additional property maps of the surface mesh.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-solvers&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgSolverInterface&quot;&gt;CGAL and Solvers&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added &lt;a href=&quot;https://doc.cgal.org/5.0/Solver_interface/group__PkgSolverInterfaceConcepts.html&quot;&gt;concepts&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.0/Solver_interface/group__PkgSolverInterfaceRef.html&quot;&gt;models&lt;/a&gt; 
for solving Mixed Integer Programming (MIP) problems with or without constraints.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-boolean-operations-on-nef-polyhedra&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgNef3&quot;&gt;3D Boolean Operations on Nef Polyhedra&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added a function to convert a Nef_polyhedron_3 to a polygon soup: &lt;a href=&quot;https://doc.cgal.org/5.0/Nef_3/group__PkgNef3IOFunctions.html#ga28a9eb4da0cd6153f0c16f7f9eaf6665&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::convert_nef_polyhedron_to_polygon_soup()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;io-streams&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgStreamSupport&quot;&gt;IO Streams&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The API of &lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/classCGAL_1_1Color.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Color&lt;/code&gt;&lt;/a&gt; has been cleaned up.&lt;/li&gt;
    &lt;li&gt;Added new functions to support some parts of the WKT file format:
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#gad2872abfe6fcf17d705d38567fdd6248&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#gadbd2705b183e467507abd2f167446eba&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_point_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#ga4fb72e49a1fd385bbed35ea20297aa8d&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_multi_point_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#gaaa236308b9da5dbf217ef281fdb55de4&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_linestring_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#gad6046c7f9d36512b8a014be82c1e2220&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_multi_linestring_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#gaa36ccd3ac4b3fe3e3fd8a76715c56b9a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_polygon_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#ga4ceaa71b9cb3b3f7984bed19afff6fc6&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_multi_polygon_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#gab1a2d277b43c218bf128a2056eb53ced&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_point_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#gab5365a4726893aa4f51739ede63f5a09&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_polygon_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#gaa37ed77d1a01567b93c872a48198efa6&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_linestring_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#ga98de4b4e5cccb370febe5daf66bb582d&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_multi_point_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#ga4ded40ab50f57e0b410640e28964935e&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_multi_polygon_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#ga219987f7a9c0b871c1733aa0c38f26b3&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_multi_linestring_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.14.2 released</title>
   <link href="http://www.cgal.org/2019/11/08/cgal4142/"/>
   <updated>2019-11-08T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2019/11/08/cgal4142</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.14.2&quot;&gt;Download CGAL-4.14.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.14.2/Manual/index.html&quot;&gt;CGAL-4.14.2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.14.2 is a bug-fix release for &lt;a href=&quot;../../../../2019/03/29/cgal414&quot;&gt;CGAL 4.14&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2019/03/29/cgal414&quot;&gt;CGAL 4.14&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=milestone%3A4.14.2&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.0 beta2 released</title>
   <link href="http://www.cgal.org/2019/10/31/cgal50-beta2/"/>
   <updated>2019-10-31T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2019/10/31/cgal50-beta2</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-5.0-beta2&quot;&gt;Download CGAL-5.0-beta2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/index.html&quot;&gt;CGAL-5.0-beta2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.0 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2019/03/29/cgal414&quot;&gt;CGAL 4.14&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general-changes&quot;&gt;General changes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;CGAL 5.0 is the first release of CGAL that requires a C++ compiler
with the support of C++14 or later. The new list of supported
compilers is:
      &lt;ul&gt;
        &lt;li&gt;Visual C++ 14.0 (from Visual Studio 2015 Update 3) or later,&lt;/li&gt;
        &lt;li&gt;Gnu g++ 6.3 or later (on Linux or MacOS),&lt;/li&gt;
        &lt;li&gt;LLVM Clang version 8.0 or later (on Linux or MacOS), and&lt;/li&gt;
        &lt;li&gt;Apple Clang compiler versions 7.0.2 and 10.0.1 (on MacOS).&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Since CGAL 4.9, CGAL can be used as a header-only library, with
dependencies. Since CGAL 5.0, that is now the default, unless
specified differently in the (optional) CMake configuration.&lt;/li&gt;
    &lt;li&gt;The section “Getting Started with CGAL” of the documentation has
been updated and reorganized.&lt;/li&gt;
    &lt;li&gt;The minimal version of Boost is now 1.57.0.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygonal-surface-reconstruction-new-package&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgPolygonalSurfaceReconstruction&quot;&gt;Polygonal Surface Reconstruction&lt;/a&gt; (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package provides a method for piecewise planar object reconstruction from point clouds. 
The method takes as input an unordered point set sampled from a piecewise planar object 
and outputs a compact and watertight surface mesh interpolating the input point set. 
The method assumes that all necessary major planes are provided (or can be extracted from 
the input point set using the shape detection method described in Point Set Shape Detection, 
or any other alternative methods).The method can handle arbitrary piecewise planar objects 
and is capable of recovering sharp features and is robust to noise and outliers. See also 
the associated &lt;a href=&quot;https://www.cgal.org/2019/08/05/Polygonal_surface_reconstruction/&quot;&gt;blog entry&lt;/a&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;shape-detection-major-changes&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgShapeDetection&quot;&gt;Shape Detection&lt;/a&gt; (major changes)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ShapeDetectionTraits&lt;/code&gt; has been renamed to &lt;a href=&quot;https://doc.cgal.org/5.0/Shape_detection/classEfficientRANSACTraits.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EfficientRANSACTraits&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shape_detection_3&lt;/code&gt; namespace has been renamed to &lt;a href=&quot;https://doc.cgal.org/5.0/Shape_detection/annotated.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shape_detection&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;Added a new, generic implementation of region growing. This enables for example applying region growing to inputs such as 2D and 3D point sets,
or models of the &lt;a href=&quot;https://doc.cgal.org/5.0/BGL/classFaceGraph.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceGraph&lt;/code&gt;&lt;/a&gt; concept. Learn more about this new algorithm with this &lt;a href=&quot;https://www.cgal.org/2019/07/30/Shape_detection/&quot;&gt;blog entry&lt;/a&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-geometry-kernel&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgKernelD&quot;&gt;dD Geometry Kernel&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;A new exact kernel, &lt;a href=&quot;https://doc.cgal.org/5.0/Kernel_d/structCGAL_1_1Epeck__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epeck_d&lt;/code&gt;&lt;/a&gt;, is now available.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-linear-geometry-kernel&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgKernel23&quot;&gt;2D and 3D Linear Geometry Kernel&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added a new concept, &lt;a href=&quot;https://doc.cgal.org/5.0/Kernel_23/classKernel_1_1ComputeApproximateAngle__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ComputeApproximateAngle_3&lt;/code&gt;&lt;/a&gt;,
to the 3D Kernel concepts to compute the approximate angle between two 3D vectors. Corresponding functors
in the model (&lt;a href=&quot;https://doc.cgal.org/5.0/Kernel_23/classKernel.html#a183c9ac358a4ccddc04e680f8ed16c0b&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compute_approximate_angle_3&lt;/code&gt;&lt;/a&gt;) 
and free function (&lt;a href=&quot;https://doc.cgal.org/5.0/Kernel_23/group__approximate__angle__grp.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;approximate_angle&lt;/code&gt;&lt;/a&gt;)
have also been added.&lt;/li&gt;
    &lt;li&gt;The following objects are now hashable and thus trivially usable 
with &lt;a href=&quot;https://en.cppreference.com/w/cpp/container/unordered_set&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::unordered_set&lt;/code&gt;&lt;/a&gt; 
and &lt;a href=&quot;https://en.cppreference.com/w/cpp/header/unordered_map&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::unordered_map&lt;/code&gt;&lt;/a&gt;:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Aff_transformation_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Aff_transformation_3&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Bbox_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Bbox_3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Circle_2&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Iso_cuboid_3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Iso_rectangle_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Point_2&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Point_3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Segment_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Segment_3&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Sphere_3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Vector_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Vector_3&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Weighted_point_2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Weighted_point_3&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/latest/Manual/packages.html#PkgPolygonMeshProcessing&quot;&gt;Polygon Mesh Processing&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Introduced a &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/index.html#title36&quot;&gt;wide range of new functions&lt;/a&gt; 
related to location of queries on a triangle mesh,
such as &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__PMP__locate__grp.html#gada09bd8740ba69ead9deca597d53cf15&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::locate(Point, Mesh)&lt;/code&gt;&lt;/a&gt;.
The location of a point on a triangle mesh is expressed as the pair of a face and the barycentric
coordinates of the point in this face, enabling robust manipulation of locations 
(for example, intersections of two 3D segments living within the same face).&lt;/li&gt;
    &lt;li&gt;Added the mesh smoothing function &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__PMP__meshing__grp.html#gaa0551d546f6ab2cd9402bea12d8332a3&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;smooth_mesh()&lt;/code&gt;&lt;/a&gt;,
which can be used to improve the quality of triangle elements based on various geometric characteristics.&lt;/li&gt;
    &lt;li&gt;Added the shape smoothing function &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__PMP__meshing__grp.html#gaaa083ec78bcecf351e04d1bbf460b4a2&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;smooth_shape()&lt;/code&gt;&lt;/a&gt;,
which can be used to smooth the surface of a triangle mesh, using the mean curvature flow to perform noise removal.
(See also the new entry in the &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/index.html#title8&quot;&gt;User Manual&lt;/a&gt;)&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__measure__grp.html#ga6da5119ce2c50729fda11a90ae7fb9ba&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::centroid()&lt;/code&gt;&lt;/a&gt;,
which computes the centroid of a closed triangle mesh.&lt;/li&gt;
    &lt;li&gt;Added the functions &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__PMP__repairing__grp.html#ga9c12c4878c08a117b3733bb45f1a34cf&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::stitch_boundary_cycle()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__PMP__repairing__grp.html#ga24d5ae37f62064b3fc576ba48a4ccc63&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::stitch_boundary_cycles()&lt;/code&gt;&lt;/a&gt;,
which can be used to try and merge together geometrically compatible but combinatorially different halfedges
that belong to the same boundary cycle.&lt;/li&gt;
    &lt;li&gt;It is now possible to pass a face-size property map to &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__keep__connected__components__grp.html#ga48e7b3e6922ee78cf8ce801e3e325d9a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::keep_large_connected_components()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__keep__connected__components__grp.html#ga68c6c29dfc6a26a6a2f8befe6944f19d&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::keep_largest_connected_components()&lt;/code&gt;&lt;/a&gt;, enabling users to define
how the size of a face is computed (the size of the connected component is the sum of the sizes of its faces).
If no property map is passed, the behavior is unchanged to previous versions: the size
of a connected component is the number of faces it contains.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__PMP__repairing__grp.html#ga36098d2415efd0604b7b996163bc22db&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::non_manifold_vertices()&lt;/code&gt;&lt;/a&gt;,
which can be used to collect all the non-manifold vertices (i.e. pinched vertices,
or vertices appearing in multiple umbrellas) of a mesh.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-point-set&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgPointSet3&quot;&gt;3D Point Set&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The &lt;a href=&quot;https://doc.cgal.org/5.0/Point_set_3/group__PkgPointSet3IO.html&quot;&gt;PLY IO functions&lt;/a&gt; now take an additional optional parameter to 
read/write comments from/in the PLY header.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/latest/Manual/packages.html#PkgPointSetProcessing3&quot;&gt;Point Set Processing&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: the API using iterators and overloads for optional parameters (deprecated since
CGAL 4.12) has been removed. The current (and now only) API uses ranges and Named Parameters.&lt;/li&gt;
    &lt;li&gt;Added the possibility to use the named parameter
&lt;a href=&quot;https://doc.cgal.org/5.0/Point_set_processing_3/group__psp__namedparameters.html#PSP_neighbor_radius&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;neighbor_radius&lt;/code&gt;&lt;/a&gt; 
to use spherical neighbor queries instead of K-nearest neighbors queries for the following functions:
&lt;a href=&quot;https://doc.cgal.org/5.0/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga4f82723e2f0bb33f3677e29e0208a256&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::bilateral_smooth_point_set()&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://doc.cgal.org/5.0/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga0cd0f87de690d4edf82740e856efa491&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::jet_estimate_normals()&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://doc.cgal.org/5.0/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga549402c0a8a8b6b71875181e93961521&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::jet_smooth_point_set()&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://doc.cgal.org/5.0/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga50c98d5c5ae5535bce6f32eddbd03f33&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::mst_orient_normals()&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://doc.cgal.org/5.0/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga8c642da96a025ab32445aeb6cc219b0b&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::pca_estimate_normals()&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&quot;https://doc.cgal.org/5.0/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#gafd0b5a21ec5042e4bca09cb43f1847f9&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::remove_outliers()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgTriangulation2&quot;&gt;2D Triangulations&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Removed the deprecated functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Constrained_triangulation_plus_2::
vertices_in_constraint_{begin/end}(Vertex_handle va, Vertex_handle vb) const;&lt;/code&gt;,
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Constrained_triangulation_plus_2::remove_constraint(Vertex_handle va, Vertex_handle vb)&lt;/code&gt;,
that is a pair of vertex handles is no longer a key for a polyline constraint.
Users must use a version prior to 5.0 if they need this functionality.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Removed the deprecated classes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Regular_triangulation_euclidean_traits_2&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Regular_triangulation_filtered_traits_2&lt;/code&gt;. Users must use a version prior to 5.0 if they need these classes.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The &lt;a href=&quot;https://doc.cgal.org/5.0/BGL/group__PkgBGLTraits.html&quot;&gt;graph traits&lt;/a&gt; enabling CGAL’s 2D triangulations to be used as a parameter
for any graph-based algorithm of CGAL (or boost) have been improved to fully model the &lt;a href=&quot;https://doc.cgal.org/5.0/BGL/classFaceGraph.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceGraph&lt;/code&gt;&lt;/a&gt; concept.
In addition, only the finite simplicies (those not incident to the infinite vertex) of the 2D triangulations
are now visibile through this scope. The complete triangulation can still be accessed as a graph,
by using the graph traits of the underlying triangulation data structure (usually,
&lt;a href=&quot;https://doc.cgal.org/5.0/TDS_2/classCGAL_1_1Triangulation__data__structure__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_data_structure_2&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert()&lt;/code&gt; function
of
&lt;a href=&quot;https://doc.cgal.org/latest/Triangulation_2/classCGAL_1_1Triangulation__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_2&lt;/code&gt;&lt;/a&gt;
which takes a range of points as argument is now guaranteed to
insert the points following the order of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InputIterator&lt;/code&gt;.  Note
that this change only affects the base class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_2&lt;/code&gt;
and not any derived class, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delaunay_triangulation_2&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Added a new &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_2/classCGAL_1_1Triangulation__2.html#a6cfa7d3aaa375a25d217858b49e2eb07=&quot;&gt;constructor&lt;/a&gt;
 and &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_2/classCGAL_1_1Triangulation__2.html#ac5e9bc8adef80dc01a0b31c2d0234545&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert()&lt;/code&gt;&lt;/a&gt;
 function to &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_2/classCGAL_1_1Triangulation__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_2&lt;/code&gt;&lt;/a&gt;
 that takes a range of points with info.&lt;/li&gt;
    &lt;li&gt;Introduced a new face base class, &lt;a href=&quot;https://doc.cgal.org/5.0/BGL/classCGAL_1_1Triangulation__face__base__with__id__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_face_base_with_id_2&lt;/code&gt;&lt;/a&gt;
which enables storing user-defined integer IDs in the face of any 2D triangulation, a precondition to use some
BGL algorithms.&lt;/li&gt;
    &lt;li&gt;Added range types and functions that return ranges, for example for all vertices, enabling the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C++11&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt;-loops.
See &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_2/Triangulation_2_2for_loop_2_8cpp-example.html&quot;&gt;this new example&lt;/a&gt; for a usage demonstration.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations-1&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgTriangulation3&quot;&gt;3D Triangulations&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_3/classCGAL_1_1Triangulation__3.html#a63f67cf6aaadcee14318cf56a36d247a&quot;&gt;constructor&lt;/a&gt;
and the &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_3/classCGAL_1_1Triangulation__3.html#ad3353128386bbb51f79d0263e7f67337&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert()&lt;/code&gt;&lt;/a&gt;
function of &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_3/classCGAL_1_1Triangulation__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_3&lt;/code&gt;&lt;/a&gt; 
which take a range of points as argument are now guaranteed to
insert the points following the order of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InputIterator&lt;/code&gt;. Note
that this change only affects the base class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_3&lt;/code&gt;
and not any derived class, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delaunay_triangulation_3&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Added constructor and &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_3/classCGAL_1_1Triangulation__3.html#a8aa85f88733d30aa3ec5385538e13ace&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert()&lt;/code&gt;&lt;/a&gt;
function to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_3&lt;/code&gt; that takes a range of points with info.&lt;/li&gt;
    &lt;li&gt;Added range types and functions that return ranges, for example for all vertices, which enables to use C++11 for-loops.
See &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_3/Triangulation_3_2for_loop_8cpp-example.html&quot;&gt;this new example&lt;/a&gt; for a usage demonstration.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgSurfaceMesh&quot;&gt;Surface Mesh&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Introduced new functions to read and write using the PLY format,
&lt;a href=&quot;https://doc.cgal.org/5.0/Surface_mesh/group__PkgSurface__mesh.html#ga42f6ad486ddab74e13d3dc53f511c343&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_ply()&lt;/code&gt;&lt;/a&gt; 
and &lt;a href=&quot;https://doc.cgal.org/5.0/Surface_mesh/group__PkgSurface__mesh.html#ga77bbb79d449c981895eedb6c3c23bd14&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_ply()&lt;/code&gt;&lt;/a&gt;, 
enabling users to save and load additional property maps of the surface mesh.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-solvers&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgSolverInterface&quot;&gt;CGAL and Solvers&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added &lt;a href=&quot;https://doc.cgal.org/5.0/Solver_interface/group__PkgSolverInterfaceConcepts.html&quot;&gt;concepts&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.0/Solver_interface/group__PkgSolverInterfaceRef.html&quot;&gt;models&lt;/a&gt; 
for solving Mixed Integer Programming (MIP) problems with or without constraints.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-boolean-operations-on-nef-polyhedra&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgNef3&quot;&gt;3D Boolean Operations on Nef Polyhedra&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added a function to convert a Nef_polyhedron_3 to a polygon soup: &lt;a href=&quot;https://doc.cgal.org/5.0/Nef_3/group__PkgNef3IOFunctions.html#ga28a9eb4da0cd6153f0c16f7f9eaf6665&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::convert_nef_polyhedron_to_polygon_soup()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;io-streams&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgStreamSupport&quot;&gt;IO Streams&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The API of &lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/classCGAL_1_1Color.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Color&lt;/code&gt;&lt;/a&gt; has been cleaned up.&lt;/li&gt;
    &lt;li&gt;Added new functions to support some parts of the WKT file format:
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#gad2872abfe6fcf17d705d38567fdd6248&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#gadbd2705b183e467507abd2f167446eba&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_point_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#ga4fb72e49a1fd385bbed35ea20297aa8d&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_multi_point_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#gaaa236308b9da5dbf217ef281fdb55de4&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_linestring_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#gad6046c7f9d36512b8a014be82c1e2220&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_multi_linestring_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#gaa36ccd3ac4b3fe3e3fd8a76715c56b9a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_polygon_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#ga4ceaa71b9cb3b3f7984bed19afff6fc6&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_multi_polygon_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#gab1a2d277b43c218bf128a2056eb53ced&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_point_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#gab5365a4726893aa4f51739ede63f5a09&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_polygon_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#gaa37ed77d1a01567b93c872a48198efa6&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_linestring_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#ga98de4b4e5cccb370febe5daf66bb582d&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_multi_point_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#ga4ded40ab50f57e0b410640e28964935e&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_multi_polygon_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#ga219987f7a9c0b871c1733aa0c38f26b3&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_multi_linestring_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>New CGAL releases</title>
   <link href="http://www.cgal.org/news/2019/09/30/new_releases/"/>
   <updated>2019-09-30T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2019/09/30/new_releases</id>
   <content type="html">
&lt;div&gt;
  &lt;p&gt;The CGAL Open Source Project is pleased to announce today three new
releases:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&quot;/2019/09/30/cgal4132&quot;&gt;CGAL-4.13.2&lt;/a&gt; is the second (and last) bug-fix release for CGAL-4.13,&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;/2019/09/30/cgal4141&quot;&gt;CGAL-4.14.1&lt;/a&gt; is the first bug-fix release for CGAL-4.14,&lt;/li&gt;
    &lt;li&gt;and &lt;a href=&quot;/2019/09/30/cgal50-beta1&quot;&gt;CGAL-5.0-beta1&lt;/a&gt; is the first beta release for CGAL-5.0.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;CGAL 5.0 is the first release of CGAL that requires a C++ compiler
with the support of C++14 or later. The new list of supported
compilers is:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Visual C++ 14.0 (from Visual Studio 2015 Update 3) or later,&lt;/li&gt;
    &lt;li&gt;Gnu g++ 6.3 or later (on Linux or MacOS),&lt;/li&gt;
    &lt;li&gt;LLVM Clang version 8.0 or later (on Linux or MacOS), and&lt;/li&gt;
    &lt;li&gt;Apple Clang compiler versions 7.0.2 and 10.0.1 (on MacOS).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;Users with environments that do not allow the use of C++14 must use
CGAL-4.14 and its bug-fix releases.&lt;/p&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 5.0 beta1 released</title>
   <link href="http://www.cgal.org/2019/09/30/cgal50-beta1/"/>
   <updated>2019-09-30T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2019/09/30/cgal50-beta1</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-5.0-beta1&quot;&gt;Download CGAL-5.0-beta1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/index.html&quot;&gt;CGAL-5.0-beta1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 5.0 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2019/03/29/cgal414&quot;&gt;CGAL 4.14&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general-changes&quot;&gt;General changes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;CGAL 5.0 is the first release of CGAL that requires a C++ compiler
with the support of C++14 or later. The new list of supported
compilers is:
      &lt;ul&gt;
        &lt;li&gt;Visual C++ 14.0 (from Visual Studio 2015 Update 3) or later,&lt;/li&gt;
        &lt;li&gt;Gnu g++ 6.3 or later (on Linux or MacOS),&lt;/li&gt;
        &lt;li&gt;LLVM Clang version 8.0 or later (on Linux or MacOS), and&lt;/li&gt;
        &lt;li&gt;Apple Clang compiler versions 7.0.2 and 10.0.1 (on MacOS).&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Since CGAL 4.9, CGAL can be used as a header-only library, with
dependencies. Since CGAL 5.0, that is now the default, unless
specified differently in the (optional) CMake configuration.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygonal-surface-reconstruction-new-package&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgPolygonalSurfaceReconstruction&quot;&gt;Polygonal Surface Reconstruction&lt;/a&gt; (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package provides a method for piecewise planar object reconstruction from point clouds. 
The method takes as input an unordered point set sampled from a piecewise planar object 
and outputs a compact and watertight surface mesh interpolating the input point set. 
The method assumes that all necessary major planes are provided (or can be extracted from 
the input point set using the shape detection method described in Point Set Shape Detection, 
or any other alternative methods).The method can handle arbitrary piecewise planar objects 
and is capable of recovering sharp features and is robust to noise and outliers. See also 
the associated &lt;a href=&quot;https://www.cgal.org/2019/08/05/Polygonal_surface_reconstruction/&quot;&gt;blog entry&lt;/a&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;shape-detection-major-changes&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgShapeDetection&quot;&gt;Shape Detection&lt;/a&gt; (major changes)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ShapeDetectionTraits&lt;/code&gt; has been renamed to &lt;a href=&quot;https://doc.cgal.org/5.0/Shape_detection/classEfficientRANSACTraits.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EfficientRANSACTraits&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shape_detection_3&lt;/code&gt; namespace has been renamed to &lt;a href=&quot;https://doc.cgal.org/5.0/Shape_detection/annotated.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shape_detection&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;Added a new, generic implementation of region growing. This enables for example applying region growing to inputs such as 2D and 3D point sets,
or models of the &lt;a href=&quot;https://doc.cgal.org/5.0/BGL/classFaceGraph.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceGraph&lt;/code&gt;&lt;/a&gt; concept. Learn more about this new algorithm with this &lt;a href=&quot;https://www.cgal.org/2019/07/30/Shape_detection/&quot;&gt;blog entry&lt;/a&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-geometry-kernel&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgKernelD&quot;&gt;dD Geometry Kernel&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;A new exact kernel, &lt;a href=&quot;https://doc.cgal.org/5.0/Kernel_d/structCGAL_1_1Epeck__d.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epeck_d&lt;/code&gt;&lt;/a&gt;, is now available.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-linear-geometry-kernel&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgKernel23&quot;&gt;2D and 3D Linear Geometry Kernel&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added &lt;a href=&quot;https://doc.cgal.org/5.0/Kernel_23/classKernel_1_1ComputeApproximateAngle__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ComputeApproximateAngle_3&lt;/code&gt;&lt;/a&gt; 
in the 2D/3D Kernel concepts to compute the approximate angle between 2 vectors. Corresponding functors
in the model (&lt;a href=&quot;https://doc.cgal.org/5.0/Kernel_23/classKernel.html#a183c9ac358a4ccddc04e680f8ed16c0b&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compute_approximate_angle_3&lt;/code&gt;&lt;/a&gt;) 
and free function (&lt;a href=&quot;https://doc.cgal.org/5.0/Kernel_23/group__approximate__angle__grp.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;approximate_angle&lt;/code&gt;&lt;/a&gt;)
are also added.&lt;/li&gt;
    &lt;li&gt;The following objects are now hashable and thus trivially usable 
with &lt;a href=&quot;https://en.cppreference.com/w/cpp/container/unordered_set&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::unordered_set&lt;/code&gt;&lt;/a&gt; 
and &lt;a href=&quot;https://en.cppreference.com/w/cpp/header/unordered_map&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::unordered_map&lt;/code&gt;&lt;/a&gt;:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Aff_transformation_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Aff_transformation_3&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Bbox_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Bbox_3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Circle_2&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Iso_cuboid_3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Iso_rectangle_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Point_2&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Point_3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Segment_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Segment_3&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Sphere_3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Vector_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Vector_3&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Weighted_point_2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Weighted_point_3&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/latest/Manual/packages.html#PkgPolygonMeshProcessing&quot;&gt;Polygon Mesh Processing&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Introduced a &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/index.html#title36&quot;&gt;wide range of new functions&lt;/a&gt; 
related to location of queries on a triangle mesh,
such as &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__PMP__locate__grp.html#gada09bd8740ba69ead9deca597d53cf15&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::locate(Point, Mesh)&lt;/code&gt;&lt;/a&gt;.
The location of a point on a triangle mesh is expressed as the pair of a face and the barycentric
coordinates of the point in this face, enabling robust manipulation of locations 
(for example, intersections of two 3D segments living within the same face).&lt;/li&gt;
    &lt;li&gt;Added the mesh smoothing function &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__PMP__meshing__grp.html#gaa0551d546f6ab2cd9402bea12d8332a3&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;smooth_mesh()&lt;/code&gt;&lt;/a&gt;,
which can be used to improve the quality of triangle elements based on various geometric characteristics.&lt;/li&gt;
    &lt;li&gt;Added the shape smoothing function &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__PMP__meshing__grp.html#gaaa083ec78bcecf351e04d1bbf460b4a2&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;smooth_shape()&lt;/code&gt;&lt;/a&gt;,
which can be used to smooth the surface of a triangle mesh, using the mean curvature flow to perform noise removal.
(See also the new entry in the &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/index.html#title8&quot;&gt;User Manual&lt;/a&gt;)&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__measure__grp.html#ga6da5119ce2c50729fda11a90ae7fb9ba&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::centroid()&lt;/code&gt;&lt;/a&gt;,
which computes the centroid of a closed triangle mesh.&lt;/li&gt;
    &lt;li&gt;Added the functions &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__PMP__repairing__grp.html#ga9c12c4878c08a117b3733bb45f1a34cf&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::stitch_boundary_cycle()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__PMP__repairing__grp.html#ga24d5ae37f62064b3fc576ba48a4ccc63&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::stitch_boundary_cycles()&lt;/code&gt;&lt;/a&gt;,
which can be used to try and merge together geometrically compatible but combinatorially different halfedges
that belong to the same boundary cycle.&lt;/li&gt;
    &lt;li&gt;It is now possible to pass a face-size property map to &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__keep__connected__components__grp.html#ga48e7b3e6922ee78cf8ce801e3e325d9a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::keep_large_connected_components()&lt;/code&gt;&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__keep__connected__components__grp.html#ga68c6c29dfc6a26a6a2f8befe6944f19d&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::keep_largest_connected_components()&lt;/code&gt;&lt;/a&gt;, enabling users to define
how the size of a face is computed (the size of the connected component is the sum of the sizes of its faces).
If no property map is passed, the behavior is unchanged to previous versions: the size
of a connected component is the number of faces it contains.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;a href=&quot;https://doc.cgal.org/5.0/Polygon_mesh_processing/group__PMP__repairing__grp.html#ga36098d2415efd0604b7b996163bc22db&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::non_manifold_vertices()&lt;/code&gt;&lt;/a&gt;,
which can be used to collect all the non-manifold vertices (i.e. pinched vertices,
or vertices appearing in multiple umbrellas) of a mesh.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-point-set&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgPointSet3&quot;&gt;3D Point Set&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The &lt;a href=&quot;https://doc.cgal.org/5.0/Point_set_3/group__PkgPointSet3IO.html&quot;&gt;PLY IO functions&lt;/a&gt; now take an additional optional parameter to 
read/write comments from/in the PLY header.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/latest/Manual/packages.html#PkgPointSetProcessing3&quot;&gt;Point Set Processing&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: the API using iterators and overloads for optional parameters (deprecated since
CGAL 4.12) has been removed. The current (and now only) API uses ranges and Named Parameters.&lt;/li&gt;
    &lt;li&gt;Added the possibility to use the named parameter
&lt;a href=&quot;https://doc.cgal.org/5.0/Point_set_processing_3/group__psp__namedparameters.html#PSP_neighbor_radius&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;neighbor_radius&lt;/code&gt;&lt;/a&gt; 
to use spherical neighbor queries instead of K-nearest neighbors queries for the following functions:
&lt;a href=&quot;https://doc.cgal.org/5.0/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga4f82723e2f0bb33f3677e29e0208a256&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::bilateral_smooth_point_set()&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://doc.cgal.org/5.0/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga0cd0f87de690d4edf82740e856efa491&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::jet_estimate_normals()&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://doc.cgal.org/5.0/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga549402c0a8a8b6b71875181e93961521&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::jet_smooth_point_set()&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://doc.cgal.org/5.0/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga50c98d5c5ae5535bce6f32eddbd03f33&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::mst_orient_normals()&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;https://doc.cgal.org/5.0/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#ga8c642da96a025ab32445aeb6cc219b0b&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::pca_estimate_normals()&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&quot;https://doc.cgal.org/5.0/Point_set_processing_3/group__PkgPointSetProcessing3Algorithms.html#gafd0b5a21ec5042e4bca09cb43f1847f9&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::remove_outliers()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgTriangulation2&quot;&gt;2D Triangulations&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Removed the deprecated functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Constrained_triangulation_plus_2::
vertices_in_constraint_{begin/end}(Vertex_handle va, Vertex_handle vb) const;&lt;/code&gt;,
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Constrained_triangulation_plus_2::remove_constraint(Vertex_handle va, Vertex_handle vb)&lt;/code&gt;,
that is a pair of vertex handles is no longer a key for a polyline constraint.
Users must use a version prior to 5.0 if they need this functionality.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Removed the deprecated classes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Regular_triangulation_euclidean_traits_2&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Regular_triangulation_filtered_traits_2&lt;/code&gt;. Users must use a version prior to 5.0 if they need these classes.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The &lt;a href=&quot;https://doc.cgal.org/5.0/BGL/group__PkgBGLTraits.html&quot;&gt;graph traits&lt;/a&gt; enabling CGAL’s 2D triangulations to be used as a parameter
for any graph-based algorithm of CGAL (or boost) have been improved to fully model the &lt;a href=&quot;https://doc.cgal.org/5.0/BGL/classFaceGraph.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceGraph&lt;/code&gt;&lt;/a&gt; concept.
In addition, only the finite simplicies (those not incident to the infinite vertex) of the 2D triangulations
are now visibile through this scope. The complete triangulation can still be accessed as a graph,
by using the graph traits of the underlying triangulation data structure (usually,
&lt;a href=&quot;https://doc.cgal.org/5.0/TDS_2/classCGAL_1_1Triangulation__data__structure__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_data_structure_2&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert()&lt;/code&gt; function
of
&lt;a href=&quot;https://doc.cgal.org/latest/Triangulation_2/classCGAL_1_1Triangulation__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_2&lt;/code&gt;&lt;/a&gt;
which takes a range of points as argument is now guaranteed to
insert the points following the order of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InputIterator&lt;/code&gt;.  Note
that this change only affects the base class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_2&lt;/code&gt;
and not any derived class, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delaunay_triangulation_2&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Added a new &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_2/classCGAL_1_1Triangulation__2.html#a6cfa7d3aaa375a25d217858b49e2eb07=&quot;&gt;constructor&lt;/a&gt;
 and &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_2/classCGAL_1_1Triangulation__2.html#ac5e9bc8adef80dc01a0b31c2d0234545&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert()&lt;/code&gt;&lt;/a&gt;
 function to &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_2/classCGAL_1_1Triangulation__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_2&lt;/code&gt;&lt;/a&gt;
 that takes a range of points with info.&lt;/li&gt;
    &lt;li&gt;Introduced a new face base class, &lt;a href=&quot;https://doc.cgal.org/5.0/BGL/classCGAL_1_1Triangulation__face__base__with__id__2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_face_base_with_id_2&lt;/code&gt;&lt;/a&gt;
which enables storing user-defined integer IDs in the face of any 2D triangulation, a precondition to use some
BGL algorithms.&lt;/li&gt;
    &lt;li&gt;Added range types and functions that return ranges, for example for all vertices, enabling the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C++11&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;for&lt;/code&gt;-loops.
See &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_2/Triangulation_2_2for_loop_2_8cpp-example.html&quot;&gt;this new example&lt;/a&gt; for a usage demonstration.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations-1&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgTriangulation3&quot;&gt;3D Triangulations&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_3/classCGAL_1_1Triangulation__3.html#a63f67cf6aaadcee14318cf56a36d247a&quot;&gt;constructor&lt;/a&gt;
and the &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_3/classCGAL_1_1Triangulation__3.html#ad3353128386bbb51f79d0263e7f67337&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert()&lt;/code&gt;&lt;/a&gt;
function of &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_3/classCGAL_1_1Triangulation__3.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_3&lt;/code&gt;&lt;/a&gt; 
which take a range of points as argument are now guaranteed to
insert the points following the order of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InputIterator&lt;/code&gt;. Note
that this change only affects the base class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_3&lt;/code&gt;
and not any derived class, such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delaunay_triangulation_3&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Added constructor and &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_3/classCGAL_1_1Triangulation__3.html#a8aa85f88733d30aa3ec5385538e13ace&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert()&lt;/code&gt;&lt;/a&gt;
function to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_3&lt;/code&gt; that takes a range of points with info.&lt;/li&gt;
    &lt;li&gt;Added range types and functions that return ranges, for example for all vertices, which enables to use C++11 for-loops.
See &lt;a href=&quot;https://doc.cgal.org/5.0/Triangulation_3/Triangulation_3_2for_loop_8cpp-example.html&quot;&gt;this new example&lt;/a&gt; for a usage demonstration.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgSurfaceMesh&quot;&gt;Surface Mesh&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Introduced new functions to read and write using the PLY format,
&lt;a href=&quot;https://doc.cgal.org/5.0/Surface_mesh/group__PkgSurface__mesh.html#ga42f6ad486ddab74e13d3dc53f511c343&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_ply()&lt;/code&gt;&lt;/a&gt; 
and &lt;a href=&quot;https://doc.cgal.org/5.0/Surface_mesh/group__PkgSurface__mesh.html#ga77bbb79d449c981895eedb6c3c23bd14&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_ply()&lt;/code&gt;&lt;/a&gt;, 
enabling users to save and load additional property maps of the surface mesh.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-solvers&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgSolverInterface&quot;&gt;CGAL and Solvers&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added &lt;a href=&quot;https://doc.cgal.org/5.0/Solver_interface/group__PkgSolverInterfaceConcepts.html&quot;&gt;concepts&lt;/a&gt;
and &lt;a href=&quot;https://doc.cgal.org/5.0/Solver_interface/group__PkgSolverInterfaceRef.html&quot;&gt;models&lt;/a&gt; 
for solving Mixed Integer Programming (MIP) problems with or without constraints.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-boolean-operations-on-nef-polyhedra&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgNef3&quot;&gt;3D Boolean Operations on Nef Polyhedra&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added a function to convert a Nef_polyhedron_3 to a polygon soup: &lt;a href=&quot;https://doc.cgal.org/5.0/Nef_3/group__PkgNef3IOFunctions.html#ga28a9eb4da0cd6153f0c16f7f9eaf6665&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::convert_nef_polyhedron_to_polygon_soup()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;io-streams&quot;&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Manual/packages.html#PkgStreamSupport&quot;&gt;IO Streams&lt;/a&gt;&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The API of &lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/classCGAL_1_1Color.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Color&lt;/code&gt;&lt;/a&gt; has been cleaned up.&lt;/li&gt;
    &lt;li&gt;Added new functions to support some parts of the WKT file format:
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#gad2872abfe6fcf17d705d38567fdd6248&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#gadbd2705b183e467507abd2f167446eba&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_point_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#ga4fb72e49a1fd385bbed35ea20297aa8d&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_multi_point_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#gaaa236308b9da5dbf217ef281fdb55de4&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_linestring_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#gad6046c7f9d36512b8a014be82c1e2220&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_multi_linestring_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#gaa36ccd3ac4b3fe3e3fd8a76715c56b9a&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_polygon_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#ga4ceaa71b9cb3b3f7984bed19afff6fc6&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_multi_polygon_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#gab1a2d277b43c218bf128a2056eb53ced&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_point_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#gab5365a4726893aa4f51739ede63f5a09&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_polygon_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#gaa37ed77d1a01567b93c872a48198efa6&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_linestring_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#ga98de4b4e5cccb370febe5daf66bb582d&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_multi_point_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#ga4ded40ab50f57e0b410640e28964935e&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_multi_polygon_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;https://doc.cgal.org/5.0/Stream_support/group__PkgStreamSupportRef.html#ga219987f7a9c0b871c1733aa0c38f26b3&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_multi_linestring_WKT()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.14.1 released</title>
   <link href="http://www.cgal.org/2019/09/30/cgal4141/"/>
   <updated>2019-09-30T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2019/09/30/cgal4141</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.14.1&quot;&gt;Download CGAL-4.14.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.14.1/Manual/index.html&quot;&gt;CGAL-4.14.1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.14.1 is a bug-fix release for &lt;a href=&quot;../../../../2019/03/29/cgal414&quot;&gt;CGAL 4.14&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2019/03/29/cgal414&quot;&gt;CGAL 4.14&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=milestone%3A4.14.1&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.13.2 released</title>
   <link href="http://www.cgal.org/2019/09/30/cgal4132/"/>
   <updated>2019-09-30T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2019/09/30/cgal4132</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.13.2&quot;&gt;Download CGAL-4.13.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.13.2/Manual/index.html&quot;&gt;CGAL-4.13.2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.13.2 is a bug-fix release for &lt;a href=&quot;../../../../2018/10/01/cgal413&quot;&gt;CGAL 4.13&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2019/04/05/cgal4131&quot;&gt;CGAL 4.13.1&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=milestone%3A4.13.2&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New in CGAL: Polygonal Surface Reconstruction</title>
   <link href="http://www.cgal.org/2019/08/05/Polygonal_surface_reconstruction/"/>
   <updated>2019-08-05T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2019/08/05/Polygonal_surface_reconstruction</id>
   <content type="html">
&lt;h3&gt;&lt;a href=&quot;https://3d.bk.tudelft.nl/liangliang/&quot;&gt;Liangliang Nan&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;a href=&quot;https://www.tudelft.nl/en/&quot;&gt;Delft University of Technology&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Reconstructing 3D models of piecewise planar objects from sampled points has been a major problem in both computer vision and computer graphics. Although it has been extensively researched in the past few decades, obtaining faithful reconstructions of real-world objects from unavoidably noisy and possibly incomplete point clouds remains an open problem. CGAL already offers a few surface reconstruction methods, such as
&lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Poisson_surface_reconstruction_3/index.html#Chapter_Poisson_Surface_Reconstruction&quot;&gt;Poisson Surface Reconstruction&lt;/a&gt;,
&lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Advancing_front_surface_reconstruction/index.html#Chapter_Advancing_Front_Surface_Reconstruction&quot;&gt;Advancing Front Surface Reconstruction&lt;/a&gt;, and
&lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Scale_space_reconstruction_3/index.html#Chapter_Scale_space_reconstruction&quot;&gt;Scale-Space Surface Reconstruction&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;These methods are particularly suitable for point sets representing objects described by smooth surfaces. However, for man-made objects such as buildings, the results might not be satisfactory due to the imperfections and complexity of the reconstructed models (for example, gigantic meshes, missing regions, noises, and undesired structures). This is mainly because these methods tend to closely follow the surface details.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt; Polygonal Surface Reconstruction&lt;/h3&gt;

&lt;p&gt;This package implements a hypothesis-and-selection based method for piecewise planar object reconstruction from point clouds, originally described in 
&lt;a href=&quot;https://3d.bk.tudelft.nl/liangliang/publications/2017/polyfit/polyfit.html&quot;&gt;Nan and Wonka 2017&lt;/a&gt; in the &lt;a href=&quot;http://iccv2017.thecvf.com/&quot;&gt;International Conference on Computer Vision (ICCV)&lt;/a&gt;. The method takes as input an unordered point set sampled from a piecewise planar object and outputs a simplified and watertight surface mesh interpolating the input point set.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;img src=&quot;../../../../images/polyfit_pipeline.png&quot; width=&quot;100%&quot; /&gt;&lt;br /&gt;
  &lt;small&gt; Polygonal surface reconstruction: (a) Input point set; (b) Extracted planar segments; (c) Candidate faces are generated by pairwise intersection; (d) Faces selected through optimization; (e) Reconstructed model.&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;The method assumes that all necessary major planes are provided or that they can be extracted from the input point set (for example using the &lt;a href=&quot;../../07/30/Shape_detection&quot;&gt;new tools&lt;/a&gt; available in the Shape detection package). It can recover sharp features of the objects, and it can handle a large amount of noise and outliers, complementing the existing surface reconstruction methods.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;This package is already available in CGAL's master branch
on the &lt;a href=&quot;https://github.com/CGAL/cgal/&quot;&gt;CGAL GitHub repository&lt;/a&gt;,
and will be officially released in the upcoming version of CGAL, 5.0, scheduled for Autumn 2019.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Polygonal_surface_reconstruction/index.html#Chapter_PolygonalSurfaceReconstruction&quot;&gt;Documentation of the package Polygonal_surface_reconstruction&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/tree/master&quot;&gt;CGAL master branch on GitHub&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New in CGAL: Shape Detection enhancements</title>
   <link href="http://www.cgal.org/2019/07/30/Shape_detection/"/>
   <updated>2019-07-30T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2019/07/30/Shape_detection</id>
   <content type="html">
&lt;h3&gt;&lt;a href=&quot;https://www.tvhoang.com&quot;&gt;Thien Hoang&lt;/a&gt; and &lt;a href=&quot;https://anisimovdmitry.com&quot;&gt;Dmitry Anisimov&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;a href=&quot;https://www.inria.fr/en/centre/sophia&quot;&gt;INRIA Sophia Antipolis&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Geometry processing pipelines often require detecting various shapes among user-defined items. The simplest examples are detecting planar shapes in an unstructured point cloud or on the surface of a polygon mesh. More specific use cases may show up in practice, too. For example, detecting lines in a 2D point cloud or detecting spheres in a 3D point cloud. CGAL already offers a &lt;a href=&quot;https://doc.cgal.org/4.14/Point_set_shape_detection_3/index.html&quot;&gt;shape detection algorithm&lt;/a&gt; based on the 
&lt;a href=&quot;https://onlinelibrary.wiley.com/doi/abs/10.1111/j.1467-8659.2007.01016.x&quot;&gt;*Efficient RANSAC (RANdom SAmple Consensus)*&lt;/a&gt; method and a simple version of the *Region Growing (RG)* method for detecting planes in a 3D point cloud.&lt;/p&gt;

&lt;p&gt;For the next CGAL release (5.0), we have completely reworked the RG-based shape detection algorithm such that it is now able to handle any user-defined items given the connectivity among them and a user-specified region type. In addition to the generic version of the algorithm, we have also added three particular instances: detecting lines in a 2D point cloud, detecting planes in a 3D point cloud, and detecting planes on a polygon mesh.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;Detecting Lines in a 2D Point Cloud &lt;/h3&gt;

&lt;p&gt;Given a set of 2D points with the corresponding normals, the algorithm groups these points with respect to the quality of the local least squares 2D line fit. The connectivity among points is provided via a K-d tree.&lt;/p&gt;

&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;img src=&quot;../../../../images/2d-pc.png&quot; width=&quot;100%&quot; /&gt;&lt;br /&gt;
  &lt;small&gt;A 2D point set depicted with one color per detected line.&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;Detecting Planes in a 3D Point Cloud&lt;/h3&gt;

&lt;p&gt;Given a set of 3D points with the corresponding normals, the algorithm groups these points with respect to the quality of the local least squares 3D plane fit. The connectivity among points is provided via a K-d tree.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;img src=&quot;../../../../images/3d-pc.png&quot; width=&quot;100%&quot; /&gt;&lt;br /&gt;
  &lt;small&gt;A 3D point set depicted with one color per detected plane.&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;This type of detection can be used in conjunction with a new package added in the next version of CGAL, &lt;a href=&quot;../../08/05/Polygonal_surface_reconstruction/&quot;&gt;Polygonal Surface Reconstruction&lt;/a&gt; to reconstruct piecewise planar surfaces from point clouds. An example of both features working together is available &lt;a href=&quot;https://github.com/CGAL/cgal/blob/5220b7d26095f817f959ba412405b961d061bbb9/Polygonal_surface_reconstruction/examples/Polygonal_surface_reconstruction/polyfit_example_with_region_growing.cpp&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;Detecting Planes on a Polygon Mesh&lt;/h3&gt;

&lt;p&gt;Given a triangle surface mesh, the algorithm groups its faces with respect to the quality of the local least squares plane fit. The connectivity and normals are obtained directly from the mesh.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;img src=&quot;../../../../images/3d-pm.png&quot; width=&quot;100%&quot; /&gt;&lt;br /&gt;
  &lt;small&gt;A triangle surface mesh depicted with one color per detected plane.&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;This package is already available in CGAL's master branch
on the &lt;a href=&quot;https://github.com/CGAL/cgal/&quot;&gt;CGAL GitHub repository&lt;/a&gt;,
and will be officially released in the upcoming version of CGAL, 5.0, scheduled for Autumn 2019.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Shape_detection/index.html#Shape_detection_RegionGrowing&quot;&gt;Documentation of the package Shape_detection&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/tree/master&quot;&gt;CGAL master branch on GitHub&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ SIGGRAPH 2019</title>
   <link href="http://www.cgal.org/news/2019/07/28/siggraph-2019/"/>
   <updated>2019-07-28T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2019/07/28/siggraph-2019</id>
   <content type="html">
&lt;p&gt;You have an implementation of a geometric algorithm that you would like to contribute?
You want us to implement an algorithm that you learned about in the technical paper sessions?
You want to know more about the open source and the commercial licensing options for CGAL?
You want to present the problem you have to solve, in order to figure out if CGAL might be helpful for you?&lt;/p&gt;

&lt;p&gt;Visit the CGAL Project on Booth No. 1118 at the exhibition of &lt;a href=&quot;http://s2019.siggraph.org/&quot;&gt;SIGGRAPH 2019&lt;/a&gt;,
Los Angeles USA, 28 July-1 August, 2019!&lt;/p&gt;

&lt;p&gt;A plan of the SIGGRAPH 2019 exhibition floor is available &lt;a href=&quot;https://hallerickson.ungerboeck.com/prod/app85.cshtml?AppCode=VFP&amp;amp;OrgCode=16&amp;amp;EvtID=5021&amp;amp;CC=SIG19&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Optimal Area Polygonalization</title>
   <link href="http://www.cgal.org/news/2019/06/18/cg-contest/"/>
   <updated>2019-06-18T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2019/06/18/cg-contest</id>
   <content type="html">
&lt;p&gt;The so called “Optimal Area Polygonalization” problem was presented as a challenge at SoCG 20; see the &lt;a href=&quot;https://cgshop.ibr.cs.tu-bs.de/&quot;&gt;contest webpage&lt;/a&gt;. We used CGAL extensively in our implementation; see the &lt;a href=&quot;http://acg.cs.tau.ac.il/projects/in-house-projects/optimal-area-polygonalization/optimal-area-polygonalization&quot;&gt;project webpage&lt;/a&gt;. Our team was awarded 3rd place.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.13.1 released</title>
   <link href="http://www.cgal.org/2019/04/05/cgal4131/"/>
   <updated>2019-04-05T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2019/04/05/cgal4131</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.13.1&quot;&gt;Download CGAL-4.13.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.13.1/Manual/index.html&quot;&gt;CGAL-4.13.1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.13.1 is a bug-fix release for &lt;a href=&quot;../../../../2018/10/01/cgal413&quot;&gt;CGAL 4.13&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2018/10/01/cgal413&quot;&gt;CGAL 4.13&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=milestone%3A4.13.1&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.12.2 released</title>
   <link href="http://www.cgal.org/2019/04/05/cgal4122/"/>
   <updated>2019-04-05T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2019/04/05/cgal4122</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.12.2&quot;&gt;Download CGAL-4.12.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.12.2/Manual/index.html&quot;&gt;CGAL-4.12.2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.12.2 is a bug-fix release for &lt;a href=&quot;../../../../2018/04/25/cgal412&quot;&gt;CGAL 4.12&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2018/09/04/cgal4121&quot;&gt;CGAL 4.12.1&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=milestone%3A4.12.2&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL User Portrait: Nike</title>
   <link href="http://www.cgal.org/news/2019/04/01/Nike/"/>
   <updated>2019-04-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2019/04/01/Nike</id>
   <content type="html">
&lt;p&gt;Nike, Inc. is an American multinational corporation that is engaged
in the design, development, manufacturing, and worldwide marketing and
sales of footwear, apparel, equipment, accessories, and services.&lt;/p&gt;

&lt;h3&gt;Write the Future&lt;/h3&gt;

&lt;p&gt;In order to always stay a step ahead of its competitors Nike has
built a strong multi-disciplinary R&amp;amp;D division with physicians, physicists, chemists,
ergonomists, biologists, and, last but not least, computer scientists
who conceive the simulation tools their colleagues need for their research.&lt;/p&gt;

&lt;p&gt;They can't wait for the integration of research results into standard
CAD software such as Catia or Rhino, but attend conferences and fairs
such as SGP and Siggraph to identify and use upstream solutions directly
from researchers in the graphics community.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Geometric computing is key for our researchers:
&lt;a href=&quot;https://doc.cgal.org/latest/Manual/packages.html#PkgSurfaceParameterizationSummary&quot;&gt;
Surface mesh parameterization&lt;/a&gt;
is used for defining the right patches when designing a shoe, as these patches must
be unrollable.
&lt;a href=&quot;https://doc.cgal.org/latest/Manual/packages.html#PkgSurfaceMeshDeformationSummary&quot;&gt;
Surface mesh deformation&lt;/a&gt; is used in order to minimize loss of energy during the
continuous deformation of a shoe while running. It is also used for
hoodie tissue wrinkle simulation, with the goal to avoid accidentally producing wrinkle-patterns 
that are 
&lt;a href=&quot;https://www.nike.com/t/sportswear-gym-vintage-womens-full-zip-hoodie-plus-size-zrn3LS/AR1203-091&quot;&gt;not politically correct&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Steve Hoe, Director of Research, Nike Inc.&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Just Do It&lt;/h3&gt;

&lt;p&gt;It is less evident that geometric computing even comes in when material scientists 
worked on  &lt;a href=&quot;https://www.nike.com/us/en_us/c/innovation/zoom&quot;&gt;Nike ZoomX&lt;/a&gt;,
a foam used for the latest generation of performance footwear. It gives you as a runner the greatest 
possible energy return, turning the impact of your step into energy for your next stride.
Nike ZoomX was derived from a foam used in aerospace innovation (just as it was for Teflon).&lt;/p&gt;

&lt;p&gt;Material designers have to identify the best combination of parameters in a high dimensional space. 
To get there they combine three libraries, namely (i) persistent homology provided by the 
&lt;a href=&quot;http://gudhi.gforge.inria.fr/&quot;&gt;GUDHI Library&lt;/a&gt;, with (ii) CGAL's
&lt;a href=&quot;https://doc.cgal.org/latest/Manual/packages.html#PkgPeriodic3Mesh3&quot;&gt;
3D Periodic Mesh Generation&lt;/a&gt; package, and (iii) the simulation software &lt;a href=&quot;https://openfoam.org&quot;&gt;OpenFOAM&lt;/a&gt;.
The fact that the mesh generator gets called for millions of parameters makes it merely impossible 
to generate a mesh model and to perform the simulation on a complete shoe-cushion model.
In fact it turns out that the same simulation results can be obtained for a material probe of 1 cube inch of foam
which gets periodically replicated in order to avoid special treatment of boundary conditions.


&lt;center&gt;
&lt;br /&gt;
&lt;img src=&quot;../../../../../images/modulus.png&quot; style=&quot;max-width:85%&quot; /&gt;
&lt;br /&gt;
&lt;/center&gt;

&lt;p&gt;&lt;small&gt;2D Projection of the Material Search Space&lt;/small&gt;&lt;/p&gt;

&lt;h3&gt;Every Professional was Once an Amateur&lt;/h3&gt;

&lt;p&gt;Nike not only picks the best technologies available worldwide, 
but it also does not limit itself to doing joint research with
Ivy League universities. That turns out to be a key problem for several of its competitors in Europe and Asia,
who suffer from the NIH problem and a national preference for research collaborations. Additionally, they have
a small team that identifies high potential small and medium enterprises that are capable to provide solutions and
don't make it on the radar of their competitors.&lt;p&gt;

&lt;blockquote&gt;
&lt;p&gt;&quot;It is incredible what you can get from SMEs nowadays. 
GeometryFactory, based in Sophia-Antipolis, the French Silicon Valley,
did an incredible job when they turned the prototype of the 3D periodic mesh generator developed at Inria
(&lt;em&gt;Inventeurs du Monde numerique&lt;/em&gt;) into an industry strong product, and even got it running on our Raspberry Pi Cluster.&quot;&lt;/p&gt;
 &lt;p&gt;&lt;small&gt;Prof. John-Daniel Boassona, Technology Scout, Nike Inc.&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3&gt;Further Reading&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt; &lt;a href=&quot;https://www.amazon.com/s?k=9781439835685&amp;amp;i=stripbooks&amp;amp;linkCode=qs&quot;&gt;The Science of Footwear (Human Factors and Ergonomics)&lt;/a&gt;&lt;p&gt;&amp;lt;/li&amp;gt;
&lt;li&gt;&lt;p&gt; &lt;a href=&quot;https://cims.nyu.edu/gcl/papers/2018-StitchMeshing.pdf&quot;&gt;Automatic Knit Model Generation for Adidas&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;p&gt;&lt;b&gt;We work hard to make all the above a reality - so far it is only an april joke.
It even came with a &lt;a href=&quot;https://cgal.github.io/cgal-web/April2019.html&quot;&gt;gallery.&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;/p&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.14 released</title>
   <link href="http://www.cgal.org/2019/03/29/cgal414/"/>
   <updated>2019-03-29T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2019/03/29/cgal414</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.14&quot;&gt;Download CGAL-4.14&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.14/Manual/index.html&quot;&gt;CGAL-4.14 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.14 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2018/10/01/cgal413&quot;&gt;CGAL 4.13&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;d-periodic-hyperbolic-triangulations-new-package&quot;&gt;2D Periodic Hyperbolic Triangulations (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package allows the computation of Delaunay triangulations of
the Bolza surface.  The Bolza surface is the most symmetric
hyperbolic surface of genus 2. Its fundamental domain is the
regular hyperbolic octagon with angles π/4 centered at the origin
of the Poincaré disk. Triangulations of the Bolza surface can be
seen as triangulations of the hyperbolic plane that are periodic
in the four directions defined by the sides of this regular
octagon.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-hyperbolic-triangulations-new-package&quot;&gt;2D Hyperbolic Triangulations (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package allows the computation of Delaunay Triangulations of
sets of points in the Poincaré disk, which is one of the
conformal models for the hyperbolic plane.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;the-heat-method-new-package&quot;&gt;The Heat Method (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package provides an algorithm that solves the single- or
multiple-source shortest path problem by returning an
approximation of the geodesic distance for all vertices of a
triangle mesh to the closest vertex in a given set of source
vertices.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-approximation-new-package&quot;&gt;Triangulated Surface Mesh Approximation (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package implements the Variational Shape Approximation method
to approximate an input surface triangle mesh by a simpler surface
triangle mesh.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing-package&quot;&gt;Polygon Mesh Processing package&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the following new functions to detect and repair issues in
polygon soups:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::remove_isolated_points_in_polygon_soup()&lt;/code&gt;,
 which detects and removes points that are not used in any
 polygon of the soup.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::merge_duplicate_points_in_polygon_soup()&lt;/code&gt;,
 which detects and merges points that share the same geometric
 position.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::merge_duplicate_polygons_in_polygon_soup()&lt;/code&gt;,
 which detects and merges polygons that are identical.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::repair_polygon_soup()&lt;/code&gt;, which
 applies a number of repairing steps (a subset of which are the
 functions above) to clean and repair a polygon soup.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Added the following new functions to detect and repair
degeneracies in polygon meshes:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::degenerate_edges()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::degenerate_faces()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::is_non_manifold_vertex()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::is_degenerate_triangle_face()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::is_degenerate_edge()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::is_needle_triangle_face()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::is_cap_triangle_face()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::duplicate_non_manifold_vertices()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::extract_boundary_cycles()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::merge_duplicated_vertices_in_boundary_cycle()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::merge_duplicated_vertices_in_boundary_cycles()&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Added the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Rigid_triangle_mesh_collision_detection&lt;/code&gt; to
detect intersections between meshes and volumes undergoing affine
transformations.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;regularized-boolean-set-operations-in-2d-package&quot;&gt;Regularized Boolean Set Operations in 2D package&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed the validation of orientation of relative simple polygons.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;Point Set Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::mst_orient_normals()&lt;/code&gt; can now be called with a set of
user-selected seed points that are known to be already oriented. A
new optional named parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;point_is_constrained_map&lt;/code&gt; is added
for this purpose. The original behavior (using one unique and
automatically selected seed) is kept if this parameter is not
used.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;classification&quot;&gt;Classification&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a new experimental classifier
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TensorFlow::Neural_network_classifier&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;For uniformity, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETHZ_random_forest_classifier&lt;/code&gt; is renamed
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETHZ::Random_forest_classifier&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenCV_random_forest_classifier&lt;/code&gt; is renamed
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenCV::Random_forest_classifier&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The training algorithm of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETHZ::Random_forest_classifier&lt;/code&gt; was
parallelized.&lt;/li&gt;
    &lt;li&gt;Added a constructor to copy a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETHZ::Random_forest_classifier&lt;/code&gt;
using a different data set as input.&lt;/li&gt;
    &lt;li&gt;Added 3 new geometric features, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Height_above&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Height_below&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vertical_range&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-fast-intersection-and-distance-computation&quot;&gt;3D Fast Intersection and Distance Computation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The primitives &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_face_graph_triangle_primitive&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_halfedge_graph_segment_primitive&lt;/code&gt; now use as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Id&lt;/code&gt; a pair of
descriptor and graph pointer in the case they are configured to
deal with a possible different graph per primitive (configuration
set using a template tag).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a bug in the surface-sweep framework (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Surface_sweep_2&lt;/code&gt;)
that ensures that an event is never left without (left or right)
curves.&lt;/li&gt;
    &lt;li&gt;Fixed a constructor of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_counting_traits.h&lt;/code&gt;. (In particular,
added missing const of a parameter).&lt;/li&gt;
    &lt;li&gt;Fixed zone computation of a curve in cases where the lexicographic
smallest end of the curve lies on the parameter space.&lt;/li&gt;
    &lt;li&gt;Implemented missing function object &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compare_x_near_boundary&lt;/code&gt; of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polyline_traits_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polycurve_traits_2&lt;/code&gt;, and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polycurve_basic_traits_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-mesh-generation&quot;&gt;2D and 3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added two functions for writing in XML VTK formats:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_vtu()&lt;/code&gt;, that writes a 2D mesh in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vtu&lt;/code&gt; file,&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::output_to_vtu()&lt;/code&gt;, that writes a 3D mesh in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vtu&lt;/code&gt; file.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-minkowski-sums&quot;&gt;2D Minkowski Sums&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a bug in the function that computed the Minkowski sum using
the reduced-convolution method. In particular, correctly handled
the case where one of the summands does not have an outer
boundary.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-point-set&quot;&gt;3D Point Set&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_properties()&lt;/code&gt; that allows to copy the
properties from a point set to another one (without copying the
content);&lt;/li&gt;
    &lt;li&gt;Added a method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert(const Point_set&amp;amp;, const Index&amp;amp;)&lt;/code&gt; to copy a
point along with all its associated properties from another point
set;&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove()&lt;/code&gt; methods now only invalidate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end()&lt;/code&gt; iterator
instead of invalidating all iterators;&lt;/li&gt;
    &lt;li&gt;Added a method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_removed()&lt;/code&gt; that takes an index as argument;&lt;/li&gt;
    &lt;li&gt;Added a method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cancel_removals()&lt;/code&gt; to restore removed points (if
no point was inserted since then an garbage was not collected);&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; unified API of method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_normal_map()&lt;/code&gt; with
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_property_map()&lt;/code&gt;: it now returns a pair of property map + bool
(that tells if the property was added) instead of just the
property map;&lt;/li&gt;
    &lt;li&gt;Added a method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;properties_and_types()&lt;/code&gt; in addition to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;properties()&lt;/code&gt;: this new one returns pairs of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::string&lt;/code&gt; +
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::type_info&lt;/code&gt; in order to also know the type of each property.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write_wrl()&lt;/code&gt; for writing into VRML 2.0 format.&lt;/li&gt;
    &lt;li&gt;Added functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_vtp()&lt;/code&gt; for writing a triangulated
  face graph in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vtp&lt;/code&gt; file (XML VTK format).&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL How-tos: Writing a CGAL Plugin for ParaView</title>
   <link href="http://www.cgal.org/2019/03/26/how-to-write-a-paraview-plugin/"/>
   <updated>2019-03-26T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2019/03/26/how-to-write-a-paraview-plugin</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;https://www.paraview.org/&quot;&gt;ParaView&lt;/a&gt; is an open-source, multi-platform data analysis and visualization software. Despite a large arrays of built-in tools, developers might wish to add new functionalities to ParaView, such as CGAL’s polygon mesh processing algorithms. For that purpose, ParaView uses a plugin system.&lt;/p&gt;

&lt;p&gt;The CGAL Project has published a new &lt;a href=&quot;https://github.com/CGAL/cgal-paraview-plugins&quot;&gt;Github repository&lt;/a&gt;, with all necessary code to build a plugin that can call CGAL’s &lt;a href=&quot;https://doc.cgal.org/latest/Polygon_mesh_processing/group__PMP__meshing__grp.html#gad3d03890515ae8103bd32a30a3486412&quot;&gt;Isotropic Remeshing&lt;/a&gt; algorithm directly within ParaView. Furthermore, a step-by-step description of the development of this plugin is available in the &lt;a href=&quot;https://github.com/CGAL/cgal-paraview-plugins/blob/master/README.md&quot;&gt;README.md&lt;/a&gt; of the repository, which can be used as an already-functional basis from which you can easily develop your own CGAL plugins for ParaView.&lt;/p&gt;

&lt;center&gt;
&lt;br /&gt;
&lt;figure&gt;
&lt;a href=&quot;../../../../images/bull_remeshed.png&quot;&gt;&lt;img src=&quot;../../../../images/bull_remeshed.png&quot; style=&quot;max-width:85%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
&lt;figcaption&gt;Running CGAL's isotropic remeshing on the bull mesh, directly from ParaView.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/center&gt;

</content>
 </entry>
 
 <entry>
   <title>CGAL 4.14 beta2 released</title>
   <link href="http://www.cgal.org/2019/03/13/cgal414-beta2/"/>
   <updated>2019-03-13T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2019/03/13/cgal414-beta2</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.14-beta2&quot;&gt;Download CGAL-4.14-beta2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.14/Manual/index.html&quot;&gt;CGAL-4.14-beta2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Compared to CGAL version 4.14 Beta 1, this version fixes &lt;a href=&quot;https://github.com/CGAL/cgal/milestone/42?closed=1&quot;&gt;several
bugs&lt;/a&gt; including one that prevented the build of all CGAL demos.&lt;/p&gt;

&lt;p&gt;CGAL 4.14 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2018/10/01/cgal413&quot;&gt;CGAL 4.13&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;d-periodic-hyperbolic-triangulations-new-package&quot;&gt;2D Periodic Hyperbolic Triangulations (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package allows the computation of Delaunay triangulations of
the Bolza surface.  The Bolza surface is the most symmetric
hyperbolic surface of genus 2. Its fundamental domain is the
regular hyperbolic octagon with angles π/4 centered at the origin
of the Poincaré disk. Triangulations of the Bolza surface can be
seen as triangulations of the hyperbolic plane that are periodic
in the four directions defined by the sides of this regular
octagon.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-hyperbolic-triangulations-new-package&quot;&gt;2D Hyperbolic Triangulations (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package allows the computation of Delaunay Triangulations of
sets of points in the Poincaré disk, which is one of the
conformal models for the hyperbolic plane.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;the-heat-method-new-package&quot;&gt;The Heat Method (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package provides an algorithm that solves the single- or
multiple-source shortest path problem by returning an
approximation of the geodesic distance for all vertices of a
triangle mesh to the closest vertex in a given set of source
vertices.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-approximation-new-package&quot;&gt;Triangulated Surface Mesh Approximation (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package implements the Variational Shape Approximation method
to approximate an input surface triangle mesh by a simpler surface
triangle mesh.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing-package&quot;&gt;Polygon Mesh Processing package&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the following new functions to detect and repair issues in
polygon soups:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::remove_isolated_points_in_polygon_soup()&lt;/code&gt;,
 which detects and removes points that are not used in any
 polygon of the soup.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::merge_duplicate_points_in_polygon_soup()&lt;/code&gt;,
 which detects and merges points that share the same geometric
 position.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::merge_duplicate_polygons_in_polygon_soup()&lt;/code&gt;,
 which detects and merges polygons that are identical.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::repair_polygon_soup()&lt;/code&gt;, which
 applies a number of repairing steps (a subset of which are the
 functions above) to clean and repair a polygon soup.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Added the following new functions to detect and repair
degeneracies in polygon meshes:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::degenerate_edges()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::degenerate_faces()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::is_non_manifold_vertex()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::is_degenerate_triangle_face()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::is_degenerate_edge()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::is_needle_triangle_face()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::is_cap_triangle_face()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::duplicate_non_manifold_vertices()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::extract_boundary_cycles()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::merge_duplicated_vertices_in_boundary_cycle()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::merge_duplicated_vertices_in_boundary_cycles()&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Added the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Rigid_triangle_mesh_collision_detection&lt;/code&gt; to
detect intersections between meshes and volumes undergoing affine
transformations.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;regularized-boolean-set-operations-in-2d-package&quot;&gt;Regularized Boolean Set Operations in 2D package&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed the validation of orientation of relative simple polygons.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;Point Set Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::mst_orient_normals()&lt;/code&gt; can now be called with a set of
user-selected seed points that are known to be already oriented. A
new optional named parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;point_is_constrained_map&lt;/code&gt; is added
for this purpose. The original behavior (using one unique and
automatically selected seed) is kept if this parameter is not
used.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;classification&quot;&gt;Classification&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a new experimental classifier
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TensorFlow::Neural_network_classifier&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;For uniformity, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETHZ_random_forest_classifier&lt;/code&gt; is renamed
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETHZ::Random_forest_classifier&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenCV_random_forest_classifier&lt;/code&gt; is renamed
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenCV::Random_forest_classifier&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The training algorithm of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETHZ::Random_forest_classifier&lt;/code&gt; was
parallelized.&lt;/li&gt;
    &lt;li&gt;Added a constructor to copy a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETHZ::Random_forest_classifier&lt;/code&gt;
using a different data set as input.&lt;/li&gt;
    &lt;li&gt;Added 3 new geometric features, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Height_above&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Height_below&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vertical_range&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-fast-intersection-and-distance-computation&quot;&gt;3D Fast Intersection and Distance Computation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The primitives &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_face_graph_triangle_primitive&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_halfedge_graph_segment_primitive&lt;/code&gt; now use as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Id&lt;/code&gt; a pair of
descriptor and graph pointer in the case they are configured to
deal with a possible different graph per primitive (configuration
set using a template tag).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a bug in the surface-sweep framework (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Surface_sweep_2&lt;/code&gt;)
that ensures that an event is never left without (left or right)
curves.&lt;/li&gt;
    &lt;li&gt;Fixed a constructor of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_counting_traits.h&lt;/code&gt;. (In particular,
added missing const of a parameter).&lt;/li&gt;
    &lt;li&gt;Fixed zone computation of a curve in cases where the lexicographic
smallest end of the curve lies on the parameter space.&lt;/li&gt;
    &lt;li&gt;Implemented missing function object &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compare_x_near_boundary&lt;/code&gt; of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polyline_traits_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polycurve_traits_2&lt;/code&gt;, and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polycurve_basic_traits_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-mesh-generation&quot;&gt;2D and 3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added two functions for writing in XML VTK formats:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_vtu()&lt;/code&gt;, that writes a 2D mesh in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vtu&lt;/code&gt; file,&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::output_to_vtu()&lt;/code&gt;, that writes a 3D mesh in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vtu&lt;/code&gt; file.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-minkowski-sums&quot;&gt;2D Minkowski Sums&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a bug in the function that computed the Minkowski sum using
the reduced-convolution method. In particular, correctly handled
the case where one of the summands does not have an outer
boundary.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-point-set&quot;&gt;3D Point Set&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_properties()&lt;/code&gt; that allows to copy the
properties from a point set to another one (without copying the
content);&lt;/li&gt;
    &lt;li&gt;Added a method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert(const Point_set&amp;amp;, const Index&amp;amp;)&lt;/code&gt; to copy a
point along with all its associated properties from another point
set;&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove()&lt;/code&gt; methods now only invalidate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end()&lt;/code&gt; iterator
instead of invalidating all iterators;&lt;/li&gt;
    &lt;li&gt;Added a method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_removed()&lt;/code&gt; that takes an index as argument;&lt;/li&gt;
    &lt;li&gt;Added a method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cancel_removals()&lt;/code&gt; to restore removed points (if
no point was inserted since then an garbage was not collected);&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; unified API of method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_normal_map()&lt;/code&gt; with
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_property_map()&lt;/code&gt;: it now returns a pair of property map + bool
(that tells if the property was added) instead of just the
property map;&lt;/li&gt;
    &lt;li&gt;Added a method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;properties_and_types()&lt;/code&gt; in addition to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;properties()&lt;/code&gt;: this new one returns pairs of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::string&lt;/code&gt; +
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::type_info&lt;/code&gt; in order to also know the type of each property.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write_wrl()&lt;/code&gt; for writing into VRML 2.0 format.&lt;/li&gt;
    &lt;li&gt;Added functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_vtp()&lt;/code&gt; for writing a triangulated
  face graph in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vtp&lt;/code&gt; file (XML VTK format).&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.14 beta1 released</title>
   <link href="http://www.cgal.org/2019/03/04/cgal414-beta1/"/>
   <updated>2019-03-04T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2019/03/04/cgal414-beta1</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.14-beta1&quot;&gt;Download CGAL-4.14-beta1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.14/Manual/index.html&quot;&gt;CGAL-4.14-beta1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.14 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2018/10/01/cgal413&quot;&gt;CGAL 4.13&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;d-periodic-hyperbolic-triangulations-new-package&quot;&gt;2D Periodic Hyperbolic Triangulations (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package allows the computation of Delaunay triangulations of
the Bolza surface.  The Bolza surface is the most symmetric
hyperbolic surface of genus 2. Its fundamental domain is the
regular hyperbolic octagon with angles π/4 centered at the origin
of the Poincaré disk. Triangulations of the Bolza surface can be
seen as triangulations of the hyperbolic plane that are periodic
in the four directions defined by the sides of this regular
octagon.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-hyperbolic-triangulations-new-package&quot;&gt;2D Hyperbolic Triangulations (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package allows the computation of Delaunay Triangulations of
sets of points in the Poincaré disk, which is one of the
conformal models for the hyperbolic plane.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;the-heat-method-new-package&quot;&gt;The Heat Method (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package provides an algorithm that solves the single- or
multiple-source shortest path problem by returning an
approximation of the geodesic distance for all vertices of a
triangle mesh to the closest vertex in a given set of source
vertices.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-approximation-new-package&quot;&gt;Triangulated Surface Mesh Approximation (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package implements the Variational Shape Approximation method
to approximate an input surface triangle mesh by a simpler surface
triangle mesh.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing-package&quot;&gt;Polygon Mesh Processing package&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the following new functions to detect and repair issues in
polygon soups:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::remove_isolated_points_in_polygon_soup()&lt;/code&gt;,
 which detects and removes points that are not used in any
 polygon of the soup.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::merge_duplicate_points_in_polygon_soup()&lt;/code&gt;,
 which detects and merges points that share the same geometric
 position.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::merge_duplicate_polygons_in_polygon_soup()&lt;/code&gt;,
 which detects and merges polygons that are identical.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::repair_polygon_soup()&lt;/code&gt;, which
 applies a number of repairing steps (a subset of which are the
 functions above) to clean and repair a polygon soup.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Added the following new functions to detect and repair
degeneracies in polygon meshes:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::degenerate_edges()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::degenerate_faces()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::is_non_manifold_vertex()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::is_degenerate_triangle_face()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::is_degenerate_edge()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::is_needle_triangle_face()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::is_cap_triangle_face()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::duplicate_non_manifold_vertices()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::extract_boundary_cycles()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::merge_duplicated_vertices_in_boundary_cycle()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::merge_duplicated_vertices_in_boundary_cycles()&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Added the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Rigid_triangle_mesh_collision_detection&lt;/code&gt; to
detect intersections between meshes and volumes undergoing affine
transformations.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;regularized-boolean-set-operations-in-2d-package&quot;&gt;Regularized Boolean Set Operations in 2D package&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed the validation of orientation of relative simple polygons.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;Point Set Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::mst_orient_normals()&lt;/code&gt; can now be called with a set of
user-selected seed points that are known to be already oriented. A
new optional named parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;point_is_constrained_map&lt;/code&gt; is added
for this purpose. The original behavior (using one unique and
automatically selected seed) is kept if this parameter is not
used.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;classification&quot;&gt;Classification&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a new experimental classifier
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TensorFlow::Neural_network_classifier&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;For uniformity, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETHZ_random_forest_classifier&lt;/code&gt; is renamed
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETHZ::Random_forest_classifier&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenCV_random_forest_classifier&lt;/code&gt; is renamed
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenCV::Random_forest_classifier&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The training algorithm of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETHZ::Random_forest_classifier&lt;/code&gt; was
parallelized.&lt;/li&gt;
    &lt;li&gt;Added a constructor to copy a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ETHZ::Random_forest_classifier&lt;/code&gt;
using a different data set as input.&lt;/li&gt;
    &lt;li&gt;Added 3 new geometric features, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Height_above&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Height_below&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vertical_range&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-fast-intersection-and-distance-computation&quot;&gt;3D Fast Intersection and Distance Computation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The primitives &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_face_graph_triangle_primitive&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_halfedge_graph_segment_primitive&lt;/code&gt; now use as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Id&lt;/code&gt; a pair of
descriptor and graph pointer in the case they are configured to
deal with a possible different graph per primitive (configuration
set using a template tag).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a bug in the surface-sweep framework (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Surface_sweep_2&lt;/code&gt;)
that ensures that an event is never left without (left or right)
curves.&lt;/li&gt;
    &lt;li&gt;Fixed a constructor of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_counting_traits.h&lt;/code&gt;. (In particular,
added missing const of a parameter).&lt;/li&gt;
    &lt;li&gt;Fixed zone computation of a curve in cases where the lexicographic
smallest end of the curve lies on the parameter space.&lt;/li&gt;
    &lt;li&gt;Implemented missing function object &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compare_x_near_boundary&lt;/code&gt; of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polyline_traits_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polycurve_traits_2&lt;/code&gt;, and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polycurve_basic_traits_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-mesh-generation&quot;&gt;2D and 3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added two functions for writing in XML VTK formats:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_vtu()&lt;/code&gt;, that writes a 2D mesh in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vtu&lt;/code&gt; file,&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::output_to_vtu()&lt;/code&gt;, that writes a 3D mesh in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vtu&lt;/code&gt; file.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-minkowski-sums&quot;&gt;2D Minkowski Sums&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a bug in the function that computed the Minkowski sum using
the reduced-convolution method. In particular, correctly handled
the case where one of the summands does not have an outer
boundary.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-point-set&quot;&gt;3D Point Set&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_properties()&lt;/code&gt; that allows to copy the
properties from a point set to another one (without copying the
content);&lt;/li&gt;
    &lt;li&gt;Added a method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert(const Point_set&amp;amp;, const Index&amp;amp;)&lt;/code&gt; to copy a
point along with all its associated properties from another point
set;&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove()&lt;/code&gt; methods now only invalidate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end()&lt;/code&gt; iterator
instead of invalidating all iterators;&lt;/li&gt;
    &lt;li&gt;Added a method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_removed()&lt;/code&gt; that takes an index as argument;&lt;/li&gt;
    &lt;li&gt;Added a method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cancel_removals()&lt;/code&gt; to restore removed points (if
no point was inserted since then an garbage was not collected);&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; unified API of method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_normal_map()&lt;/code&gt; with
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_property_map()&lt;/code&gt;: it now returns a pair of property map + bool
(that tells if the property was added) instead of just the
property map;&lt;/li&gt;
    &lt;li&gt;Added a method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;properties_and_types()&lt;/code&gt; in addition to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;properties()&lt;/code&gt;: this new one returns pairs of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::string&lt;/code&gt; +
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::type_info&lt;/code&gt; in order to also know the type of each property.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write_wrl()&lt;/code&gt; for writing into VRML 2.0 format.&lt;/li&gt;
    &lt;li&gt;Added functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_vtp()&lt;/code&gt; for writing a triangulated
  face graph in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vtp&lt;/code&gt; file (XML VTK format).&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL to participate in the Google Summer of Code 2019</title>
   <link href="http://www.cgal.org/news/2019/02/27/gsoc-2019-mentoring/"/>
   <updated>2019-02-27T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2019/02/27/gsoc-2019-mentoring</id>
   <content type="html">
&lt;p&gt;The CGAL Project is a &lt;a href=&quot;https://summerofcode.withgoogle.com/organizations/5935622787694592/&quot;&gt;mentoring organization&lt;/a&gt;
for &lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;Google Summer of Code 2019&lt;/a&gt;.
Have a look at our &lt;a href=&quot;https://github.com/CGAL/cgal/wiki/Project-Ideas&quot;&gt;Project Ideas&lt;/a&gt; page.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New in CGAL: 2D Hyperbolic Triangulations and 2D Periodic Hyperbolic Triangulations</title>
   <link href="http://www.cgal.org/2019/02/25/Hyperbolic_triangulations/"/>
   <updated>2019-02-25T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2019/02/25/Hyperbolic_triangulations</id>
   <content type="html">
&lt;h3&gt;&lt;a href=&quot;https://imiordanov.github.io/&quot;&gt;Iordan Iordanov&lt;/a&gt; and
&lt;a href=&quot;https://members.loria.fr/Monique.Teillaud/&quot;&gt;Monique Teillaud&lt;/a&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;a href=&quot;https://www.inria.fr/en/centre/nancy &quot;&gt;INRIA Nancy - Grand Est&lt;/a&gt;,
&lt;a href=&quot;https://www.loria.fr/en/&quot;&gt;LORIA&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Delaunay triangulations are among the most important structures in computational geometry
and have been part of CGAL since its very first release. However, they are traditionally
only handled in Euclidean spaces. Recent developments in fields such as neuromathematics, physics,
material sciences, and computer modeling however exhibit needs for Delaunay triangulations
in other spaces. CGAL already offers packages to compute Delaunay triangulations
of the flat torus in 2 and 3 dimensions, which can be seen as periodic triangulations
of the Euclidean space in 2 and 3 dimensions, respectively.
CGAL introduces now two new packages for the computation of Delaunay triangulations
in the hyperbolic plane, as well as Delaunay triangulations of the Bolza surface,
which can be seen as periodic Delaunay triangulations of the hyperbolic plane.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;2D Hyperbolic Triangulations&lt;/h3&gt;

&lt;p&gt;The hyperbolic plane is represented using the conformal Poincar&amp;eacute; disk model.
The package &lt;b&gt;2D Hyperbolic Triangulations&lt;/b&gt; (also known as &lt;i&gt;Hyperbolic_triangulation_2&lt;/i&gt;)
enables the computation of Delaunay triangulations of points living in the Poincar&amp;eacute; disk.
Further operations supported are the location of a point in the triangulation, the removal
of existing vertices, and the computation of dual objects of faces and edges.&lt;/p&gt;

&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;img src=&quot;../../../../images/hyperbolic-triangulation-and-voronoi.png&quot; /&gt;&lt;br /&gt;
  &lt;small&gt;Delaunay triangulation and Voronoi diagram of a set of points on the Poincar&amp;eacute; disk.&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;2D Periodic Hyperbolic Triangulations&lt;/h3&gt;

&lt;p&gt;The Bolza surface is the most symmetric smooth, closed, orientable surface of genus 2.
It can be obtained by gluing together the opposite sides of a regular hyperbolic octagon
with all angles equal to π/4. Note that this octagon tiles the hyperbolic plane.
Delaunay triangulations of the Bolza surface can be seen as Delaunay triangulations
of the hyperbolic plane, periodic in the 4 directions defined by the gluing
of the opposite sides of the octagon.&lt;/p&gt;

&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;img src=&quot;../../../../images/tiling-hyperbolic-plane.png&quot; width=&quot;50%&quot; /&gt;&lt;br /&gt;
  &lt;small&gt;Illustration of the periodicity of the hyperbolic plane. All the red points correspond to the same
         point, periodically reproduced.&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;The package &lt;b&gt;2D Periodic Hyperbolic Triangulations&lt;/b&gt; (also known as
&lt;i&gt;Periodic_4_hyperbolic_triangulation_2&lt;/i&gt;) enables the computation
of periodic Delaunay triangulations of the hyperbolic plane, and offers functionalities
such as point location, vertex removal, and construction of dual objects of faces
and edges of the triangulation.&lt;/p&gt;

&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;img src=&quot;../../../../images/periodic-hyperbolic-triangulation-and-voronoi.png&quot; /&gt;&lt;br /&gt;
  &lt;small&gt;Periodic Delaunay triangulation and periodic Voronoi diagram of a set of points.&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Both packages are already available in CGAL's master branch
on the &lt;a href=&quot;https://github.com/CGAL/cgal/&quot;&gt;CGAL GitHub repository&lt;/a&gt;,
and will be officially released in the upcoming version of CGAL, 4.14, scheduled for March 2019.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.14/Hyperbolic_triangulation_2/index.html#Chapter_2D_Hyperbolic_Triangulations&quot;&gt;Documentation of the package Hyperbolic_triangulation_2&lt;/a&gt; &lt;br /&gt;
&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.14/Periodic_4_hyperbolic_triangulation_2/index.html#Chapter_2D_Periodic_Hyperbolic_Triangulations&quot;&gt;Documentation of the package Periodic_4_hyperbolic_triangulation_2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/tree/master&quot;&gt;CGAL master branch on GitHub&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New in CGAL: Triangulated Surface Mesh Approximation</title>
   <link href="http://www.cgal.org/2019/01/29/VSA/"/>
   <updated>2019-01-29T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2019/01/29/VSA</id>
   <content type="html">
&lt;h3&gt;&lt;a href=&quot;https://team.inria.fr/titane/pierre-alliez/&quot;&gt;Pierre Alliez&lt;/a&gt;&amp;#42;,
&lt;a href=&quot;https://www-sop.inria.fr/members/David.Cohen-Steiner/&quot;&gt;David Cohen-Steiner&lt;/a&gt;&amp;#42;, and
&lt;a href=&quot;https://github.com/aboudev&quot;&gt;Lingjie Zhu&lt;/a&gt;&amp;deg;&lt;/h3&gt;
&lt;h4&gt;&amp;#42;&lt;a href=&quot;https://www.inria.fr&quot;&gt;INRIA&lt;/a&gt;,
&amp;deg;&lt;a href=&quot;http://www.nlpr.ia.ac.cn/nlpren/EN/volumn/home.shtml&quot; target=&quot;_blank&quot;&gt;National Laboratory of Pattern Recognition&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;For many applications ranging from reverse engineering to computational engineering,
constructing concise and faithful approximations of excessively verbose 3D data sets
(in particular, scanned meshes) is beneficial for subsequent processing
and may reduce the computational cost dramatically.&lt;/p&gt;

&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/VSA_lucy.png&quot;&gt;&lt;img src=&quot;../../../../images/VSA_lucy.png&quot; style=&quot;max-width:35%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;small&gt;Large scanned data sets, such as Standford's &lt;i&gt;Lucy&lt;/i&gt; statue are good candidates
  of inputs that can greatly benefit from approximation.&lt;/small&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Ideally, each element should be made as efficient as possible by stretching it locally in order
to fit a large area of the shape to be approximated, while minimizing geometric error. This quest
for geometric efficiency naturally raises the following question: given a 3D surface, a target number
of face elements, and an error metric, what is the best geometric approximation of the object that
one can find with this face budget? Or similarly, given a distortion tolerance, what is the smallest
polygonal mesh approximant with a distortion lesser than the tolerance?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;Triangulated Surface Mesh Approximation&lt;/h3&gt;

&lt;p&gt;Introducing the newest CGAL package: &lt;b&gt;Triangulated Surface Mesh Approximation&lt;/b&gt;.
This package implements the &lt;i&gt;Variational Shape Approximation&lt;/i&gt; (VSA)
method, introduced in a &lt;a href=&quot;https://dl.acm.org/citation.cfm?id=1015817&quot; title=&quot;Variational shape approximation&quot;&gt;paper&lt;/a&gt;
published at the ACM SIGGRAPH conference in 2004, and co-authored by David Cohen-Steiner,
Pierre Alliez, and &lt;a href=&quot;http://www.multires.caltech.edu/%7Emathieu/&quot;&gt;Mathieu Desbrun&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The VSA technique leverages a discrete clustering algorithm to approximate the input data by a set of local simple shapes
referred to as &lt;i&gt;proxies&lt;/i&gt;. Each cluster is represented as a connected set of triangles of the input mesh,
and the output mesh is constructed by generating a surface triangle mesh which approximates the clusters.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/VSA.jpg&quot;&gt;&lt;img src=&quot;../../../../images/VSA.jpg&quot; style=&quot;max-width:95%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;small&gt; Partition of the input surface triangle mesh (left), extraction as a polyhedral mesh (middle),
  and final output triangle mesh (right). The partition is optimized via discrete clustering of the input triangles,
  to minimize the approximation error from the clusters to the planar proxies (not shown).&lt;/small&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The approximation error is one-sided, defined between the clusters and their associated proxies,
based on a user-chosen (or even user-defined) metric. The current proxies are planes or vectors,
however the algorithm design is generic for future extensions to non-planar proxies.

&lt;br /&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/VSA2.png&quot;&gt;&lt;img src=&quot;../../../../images/VSA2.png&quot; style=&quot;max-width:95%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;small&gt;The shape approximation algorithm distributes mesh elements according to local surface complexity.
         On the right, a flat-shaded comparison between original model and its 5K vertex polygonal approximation
         shows good preservation of the shape and of its highlights
         &lt;a href=&quot;https://dl.acm.org/citation.cfm?id=1015817&quot;&gt;[1]&lt;/a&gt;.&lt;/small&gt;
&lt;/div&gt;
&lt;br /&gt;

&lt;p&gt;Apart from mesh approximation, this package can also be seen as providing a new tool for mesh simplification,
or as a complement to the existing &lt;a href=&quot;https://doc.cgal.org/latest/Manual/packages.html#PkgSurfaceSegmentationSummary&quot; title=&quot; Triangulated Surface Mesh Segmentation&quot;&gt; mesh segmentation package&lt;/a&gt;.&lt;/p&gt;

&lt;br /&gt;
&lt;p&gt;The package &lt;i&gt;Triangulated Surface Mesh Approximation&lt;/i&gt; is the result of the work of Lingjie Zhu
during the &lt;a href=&quot;https://www.cgal.org/gsoc/2017.html&quot; title=&quot;GSoC 2017&quot;&gt;2017 season&lt;/a&gt;
of the &lt;a href=&quot;https://github.com/CGAL/cgal/wiki/Project-Ideas&quot; title=&quot;CGAL GSoC&quot;&gt;Google Summer of Code&lt;/a&gt;,
mentored by Pierre Alliez. It is now available in CGAL's master branch
on the &lt;a href=&quot;https://github.com/CGAL/cgal/&quot;&gt;CGAL GitHub repository&lt;/a&gt;,
and will be officially released in the upcoming version of CGAL (4.14) scheduled for March 2019.&lt;/p&gt;

&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.14/Surface_mesh_approximation/index.html#Chapter_Triangulated_Surface_Mesh_Approximation&quot;&gt;Documentation of the package Surface_mesh_approximation&lt;/a&gt; &lt;br /&gt;

&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/tree/master&quot;&gt;CGAL master branch on GitHub&lt;/a&gt;
&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>New in CGAL: The Heat Method </title>
   <link href="http://www.cgal.org/2019/01/23/Heat_Method/"/>
   <updated>2019-01-23T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2019/01/23/Heat_Method</id>
   <content type="html">
&lt;h3&gt;&lt;a href=&quot;https://www.cs.cmu.edu/~kmcrane/&quot;&gt;Keenan Crane&lt;/a&gt;&amp;#42;,
&lt;a href=&quot;https://www.linkedin.com/in/cvaz2018&quot;&gt;Christina Vaz&lt;/a&gt;&amp;#42;, and
&lt;a href=&quot;https://geometryfactory.com/who-we-are/&quot;&gt;Andreas Fabri&lt;/a&gt;&amp;deg;&lt;/h3&gt;
&lt;h4&gt;&amp;#42;&lt;a href=&quot;https://www.csd.cs.cmu.edu/&quot;&gt;Carnegie Mellon University&lt;/a&gt;,
&amp;deg;&lt;a href=&quot;http://www.geometryfactory.com&quot; target=&quot;_blank&quot;&gt;GeometryFactory&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;
Measuring distances in space and over manifolds is one of the most fundamental operations
in geometry. More practically, computing accurate geodesic distances over triangulated
surface meshes is also crucial to a number of applications in geometry processing, such as
mesh parameterization, mesh segmentation, or mesh editing. However, although measuring distances
in space is usually easy, measuring intrinsic distances over triangulated surfaces accurately
is much more difficult.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;Geodesic and Heat&lt;/h3&gt;

&lt;p&gt;Imagine touching a surface with a scorching hot needle. Over time heat will
spread out from the contact point to the rest of the domain. This process can be described by a function
called the &lt;i&gt;heat kernel&lt;/i&gt;, which measures the heat transferred from a source to a destination
after a given time. A well-known relationship between heat and distance is
&lt;a href=&quot;https://onlinelibrary.wiley.com/doi/abs/10.1002/cpa.3160200210&quot; title=&quot;Varadhan’s formula&quot;&gt;Varadhan’s formula&lt;/a&gt;,
which says that the geodesic distance between any pair of points on a Riemannian manifold can be
recovered via a simple pointwise transformation of the heat kernel.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;The Heat Method&lt;/h3&gt;

&lt;p&gt;The heat method is an algorithm that solves the single- or multiple-source shortest path problem
by returning an approximation of the geodesic distance for all vertices of a triangle mesh
to the closest vertex in a given set of source vertices.
It was introduced in a &lt;a href=&quot;https://dl.acm.org/citation.cfm?id=3131280&quot; title=&quot;The Heat Method for Distance Computation&quot;&gt;paper&lt;/a&gt;
published at the ACM SIGGRAPH conference in 2017, and co-authored by Keenan Crane,
&lt;a href=&quot;https://de.linkedin.com/in/clarisse-weischedel-ph-d-009589b0&quot; title=&quot;Clarisse Weischedel&quot;&gt;Clarisse Weischedel&lt;/a&gt;,
and &lt;a href=&quot;http://num.math.uni-goettingen.de/~wardetzky/&quot; title=&quot;Max Wardetzky&quot;&gt;Max Wardetzky&lt;/a&gt;,
and uses the heat kernel to compute geodesics, following an approach illustrated in the figure below.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/Heat_method_theory.png&quot;&gt;&lt;img src=&quot;../../../../images/Heat_method_theory.png&quot; style=&quot;max-width:95%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;small&gt; Outline of the heat method. (I) Heat is allowed to diffuse for a
  brief period of time (left). (II) The temperature gradient (center left) is
  normalized and negated to get a unit vector field (center right) pointing
  along geodesics. (III) A function whose gradient follows the vector field recovers the
  final distance is computed (right) &lt;a href=&quot;https://dl.acm.org/citation.cfm?id=3131280&quot;&gt;[1]&lt;/a&gt;.&lt;/small&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The heat method is highly efficient since the algorithm boils down to two standard sparse linear algebra
problems. It is especially useful in situations where one wishes to perform repeated distance queries
on a fixed domain, since precomputation done for the first query can be re-used.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3&gt;Heat Method : The Package&lt;/h3&gt;

&lt;p&gt;The newest CGAL package, &lt;b&gt;Heat_method_3&lt;/b&gt; implements the heat method.
This package is related to the package &lt;a href=&quot;https://doc.cgal.org/latest/Manual/packages.html#PkgSurfaceMeshShortestPathSummary&quot;&gt;
Triangulated Surface Mesh Shortest Paths&lt;/a&gt; as both deal with geodesic distances. The heat method package computes for every vertex
of a mesh an approximate distance to one or several source vertices, whereas
the geodesic shortest path package computes the exact shortest path
between any two points on the surface.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/Heat_method_bunny.png&quot;&gt;&lt;img src=&quot;../../../../images/Heat_method_bunny.png&quot; style=&quot;max-width:85%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;small&gt; Geodesic distance on the Stanford Bunny. The heat method allows
  distance to be rapidly updated for new source points or curves.
  &lt;a href=&quot;https://dl.acm.org/citation.cfm?id=3131280&quot;&gt;[1]&lt;/a&gt;&lt;/small&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;The package &lt;i&gt;Heat_method_3&lt;/i&gt; is the result of the work of Christina Vaz
during the &lt;a href=&quot;https://github.com/CGAL/cgal/wiki/GSoC_2018&quot; title=&quot;GSoC 2018&quot;&gt;2018 season&lt;/a&gt;
of the &lt;a href=&quot;https://github.com/CGAL/cgal/wiki/Project-Ideas&quot; title=&quot;CGAL GSoC&quot;&gt;Google Summer of Code&lt;/a&gt;,
mentored by Keenan Crane and Andreas Fabri. It is now available in CGAL's master branch
on the &lt;a href=&quot;https://github.com/CGAL/cgal/&quot;&gt;CGAL GitHub repository&lt;/a&gt;,
and will be officially released in the upcoming version of CGAL (4.14) scheduled for March 2019.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://cgal.geometryfactory.com/CGAL/doc/master/Heat_method_3/index.html#Chapter_HeatMethod&quot;&gt;Documentation of the package Heat_Method_3&lt;/a&gt; &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/tree/master&quot;&gt;CGAL master branch on GitHub&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL FFS Podcast</title>
   <link href="http://www.cgal.org/news/2018/10/17/FFS/"/>
   <updated>2018-10-17T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2018/10/17/FFS</id>
   <content type="html">
&lt;p&gt;If you want to know more about CGAL, you can listen to the interview of one of our editors in the
internet show Floss For Science.
The episode is available &lt;a href=&quot;https://flossforscience.github.io/podcast/season-1-episode-10&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ INTERGEO 2018</title>
   <link href="http://www.cgal.org/news/2018/10/16/InterGEO-2018/"/>
   <updated>2018-10-16T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2018/10/16/InterGEO-2018</id>
   <content type="html">
&lt;p&gt;As last year the CGAL Project has a booth on the
exhibition floor at INTERGEO.  We go there as we realized that we have
a quite big user community in this application area.&lt;/p&gt;

&lt;p&gt;This is the opportunity to see what is new, to discuss how you
might contribute a result of your research related to geospatial applications, to discuss
open source as well as commercial licensing, to tell us what you like about CGAL and what you hate,
or what algorithm you would like to see in the future in the CGAL library.&lt;/p&gt;

&lt;p&gt;Visit the GeometryFactory Booth No. 12.1C.091 at the exhibition of &lt;a href=&quot;https://www.intergeo.de/intergeo-en/trade-fair.php&quot;&gt;INTERGEO 2018&lt;/a&gt;,
Frankfurt Germany, 16-18 Oct 2018.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.13 released</title>
   <link href="http://www.cgal.org/2018/10/01/cgal413/"/>
   <updated>2018-10-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2018/10/01/cgal413</id>
   <content type="html">
&lt;p&gt;The CGAL Open Source Project is pleased to announce the release 4.13.&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.13&quot;&gt;Download CGAL-4.13&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.13/Manual/index.html&quot;&gt;CGAL-4.13 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.13 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2018/04/25/cgal412&quot;&gt;CGAL 4.12&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;d-periodic-mesh-generation-new-package&quot;&gt;3D Periodic Mesh Generation (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package generates 3-dimensional periodic meshes. It computes
isotropic simplicial meshes for domains described through implicit
functional boundaries over the flat torus (which can also seen in
the Euclidean space as a periodic cube). The output is a periodic
3D mesh of the domain volume and conformal surface meshes for all
the boundary and subdividing surfaces.  The package is closely
related to the 3D Mesh Generation package, with similar concepts,
classes, and API. See &lt;a href=&quot;../../../../2018/09/10/Periodic_Mesh_Generation&quot;&gt;this post&lt;/a&gt;
for a quick overview of this new package.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The library &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_Qt5&lt;/code&gt; now contains a fork of the version 2.7.0 of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libQGLViewer&lt;/code&gt;.  The corresponding code is in the package
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GraphicsView&lt;/code&gt;.  The dependency for the external library
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libQGLViewer&lt;/code&gt; is therefore dropped for all demos.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A new function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::draw()&lt;/code&gt; is added in the packages Polyhedral
Surface, Surface Mesh, Linear Cell Complex, 2D Triangulations, and
3D Triangulations, enabling to draw the corresponding data
structures.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-linear-geometry-kernel&quot;&gt;2D and 3D Linear Geometry Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;An &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator()&lt;/code&gt; that takes a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ray_3&lt;/code&gt; has been added to the concept
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConstructProjectedPoint_3&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;convex-hull-3&quot;&gt;Convex Hull 3&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extreme_points_3()&lt;/code&gt; computing the points on
the convex hull without underlying connectivity.&lt;/li&gt;
    &lt;li&gt;Added a traits adapter called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Extreme_points_traits_adapter_3&lt;/code&gt;
that enables the use of the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extreme_points_3()&lt;/code&gt; on a
range of keys, each key being associated to 3D point using a
property map.  This can be used to get the vertices of a mesh that
are on it convex hull, or the indices of points in a range that
are on it convex hull.&lt;/li&gt;
    &lt;li&gt;Fix a bug in the computation of the 3D convex hull that was
leaving extra points within subset of coplanar points that do not
belong to the minimal convex hull.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-triangulations&quot;&gt;2D and 3D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a new type of intersection to handle the insertion of
intersecting constraints in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Constrained_triangulation_2&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The long-deprecated class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_cell_base_with_circumcenter_3&lt;/code&gt; and its associated
concept have been removed. Users should use the classes
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delaunay_cell_base_with_circumcenter_3&lt;/code&gt; or
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_cell_base_with_circumcenter_3&lt;/code&gt;, depending on which type
of triangulation they are using.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The deprecated functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mirror_index&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mirror_vertex&lt;/code&gt; of the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_face_base_2&lt;/code&gt; have been
removed. Users should use the equivalent functions from the class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The template parameters of the class template
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Labeled_mesh_domain_3&lt;/code&gt; have been simplified. The three
constructors of that class template have been replaced by a new
unique constructor using Boost named parameters. Three new static
template member functions that act as named constructors have been
added:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create_gray_image_mesh_domain()&lt;/code&gt;, to create a domain from a 3D
gray image,&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create_labeled_image_mesh_domain()&lt;/code&gt;, to create a domain from a 3D
labeled image, and&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create_implicit_mesh_domain()&lt;/code&gt;, to create a domain from an
implicit function.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;The class templates &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Implicit_mesh_domain_3&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gray_image_mesh_domain_3&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Labeled_image_mesh_domain_3&lt;/code&gt; are
now deprecated.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The headers
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/Mesh_3/Implicit_to_labeled_function_wrapper.h&amp;gt;&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/Mesh_3/Labeled_mesh_domain_3.h&amp;gt;&lt;/code&gt;, that were deprecated
since CGAL 4.5, have been removed.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; the concepts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshCellCriteria_3&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshFacetCriteria_3&lt;/code&gt; now require the triangulation to be passed
in their &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator()&lt;/code&gt;.  Models of these concepts that are provided
by CGAL have been modified accordingly.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; It is no longer possible to use the
deprecated, pre-CGAL 3.8 specifications in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshCellCriteria_3&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshFacetCriteria_3&lt;/code&gt; (that is, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Facet_badness&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cell_badness&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Is_facet_bad&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Is_cell_bad&lt;/code&gt;).&lt;/li&gt;
    &lt;li&gt;The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshFacetCriteria_3&lt;/code&gt; no longer requires the function
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator()(Cell_handle c, int i)&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshEdgeCriteria_3&lt;/code&gt; no longer requires the function
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator()(const Edge&amp;amp; e)&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshComplexWithFeatures_3InTriangulation_3&lt;/code&gt; no longer
requires the functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number_of_edges(Curve_index index)&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number_of_corners(Corner_index index)&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Introduced the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshTriangulationTraits_3&lt;/code&gt;, which covers
the needs of the traits class used in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh_3&lt;/code&gt; (and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_mesh_3&lt;/code&gt;). The traits class used as template parameter
of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh_triangulation_3&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_mesh_triangulation_3&lt;/code&gt;
must be a model of this concept.&lt;/li&gt;
    &lt;li&gt;Added the function
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh_domain_with_polyline_features_3::add_corner()&lt;/code&gt;, which allows
users to add a single corner (that is not incident to any
polyline) to the mesh complex.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::lloyd_optimize_mesh_3&lt;/code&gt; now depends on
the &lt;em&gt;Eigen&lt;/em&gt; library.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;Polygon Mesh Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a named parameter in stitching functions that allows to
choose whether the operation should be performed per connected
component or globally.&lt;/li&gt;
    &lt;li&gt;Added a function, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::transform()&lt;/code&gt;, to
apply a transformation to a mesh.&lt;/li&gt;
    &lt;li&gt;Added a named parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;visitor&lt;/code&gt; in corefinement-related
functions that makes it possible to pass a visitor to the function
in order to track the creation of new faces.&lt;/li&gt;
    &lt;li&gt;Added a named parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throw_on_self_intersection&lt;/code&gt; in all
corefinement-related functions, which enables to check for
self-intersecting faces involved in the intersection before trying
to corefine the input meshes. This new parameter replaces the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bool&lt;/code&gt; parameter in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;corefine()&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;corefine_and_compute_boolean_operations()&lt;/code&gt;,
which can be used to compute the result of several Boolean
operations between two volumes at the same time.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clip()&lt;/code&gt;, which can be used to clip a
triangulated surface mesh by a plane or a clipping volume.&lt;/li&gt;
    &lt;li&gt;Constrained vertices are now guaranteed to be kept in the mesh
after calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isotropic_remeshing()&lt;/code&gt; (and not only the points
associated to constrained vertices, as it was before).&lt;/li&gt;
    &lt;li&gt;Added a function, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::extrude_mesh()&lt;/code&gt;,
to perform an extrusion of an open polygon mesh.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;estimation-of-local-differential-properties-of-point-sampled-surfaces-reference&quot;&gt;Estimation of Local Differential Properties of Point-Sampled Surfaces Reference&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Monge_via_jet_fitting&lt;/code&gt; now depends on
the &lt;em&gt;Eigen&lt;/em&gt; library.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;Point Set Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a callback mechanism to the following functions:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::bilateral_smooth_point_set()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::compute_average_spacing()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::grid_simplify_point_set()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::hierarchy_simplify_point_set()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::jet_estimate_normals()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::jet_smooth_point_set()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::pca_estimate_normals()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::remove_outliers()&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::wlop_simplify_and_regularize_point_set()&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;classification&quot;&gt;Classification&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added data structures to handle classification of Surface Meshes
and of Clusters.&lt;/li&gt;
    &lt;li&gt;Added public API to compute features in parallel.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: features based on products/divisions of
eigenvalues are replaced by simple eigenvalue features. Features
based on statistics on the HSV color channels are replaced by
simple HSV color channel features.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: the API of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Classification::Point_set_feature_generator&lt;/code&gt; has been
simplified.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;bounding-volumes&quot;&gt;Bounding Volumes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Approximate_min_ellipsoid_d&lt;/code&gt; now
depends on the &lt;em&gt;Eigen&lt;/em&gt; library.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;interpolation&quot;&gt;Interpolation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The output of the natural and regular neighbor functions
(resp. the gradient fitting functions) is no longer restricted to
a Point/Coordinate pair (resp. Point/Vector pair). Instead, users
can provide their own functor to format the output as they desire.&lt;/li&gt;
    &lt;li&gt;The interpolation functions can now operate on any combination of
Type/Coordinate, provided that the values and gradients functors
can also be evaluated using ‘Type’.
The combination of these two changes allow, for example, to
operate with Vertex/Coordinate pairs, which enables a more
efficient access to values and gradients by storing information
directly in the vertex.&lt;/li&gt;
    &lt;li&gt;The concepts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InterpolationTraits&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GradientFittingTraits&lt;/code&gt;
have been updated to reflect the real needs of the code (some
types and operators were used in the code but did not appear in
the concepts).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a helper function, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::is_valid_polygon_mesh&lt;/code&gt;, that
checks the validity of a polygon mesh using BGL functions.&lt;/li&gt;
    &lt;li&gt;Improved the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Euler::collapse_edge&lt;/code&gt; such that the
target vertex of the collapsed edge is now always kept after the
collapse.&lt;/li&gt;
    &lt;li&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_face_graph()&lt;/code&gt; now uses named parameters, some
allowing it to use property maps instead of output iterators.&lt;/li&gt;
    &lt;li&gt;Addition of the following named parameters :
      &lt;ul&gt;
        &lt;li&gt;vertex_to_vertex_output_iterator&lt;/li&gt;
        &lt;li&gt;halfedge_to_halfedge_output_iterator&lt;/li&gt;
        &lt;li&gt;face_to_face_output_iterator&lt;/li&gt;
        &lt;li&gt;vertex_to_vertex_map&lt;/li&gt;
        &lt;li&gt;halfedge_to_halfedge_map&lt;/li&gt;
        &lt;li&gt;face_to_face_map&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-solvers&quot;&gt;CGAL and Solvers&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Diagonalize_traits&lt;/code&gt; is now deprecated
and should not be used. The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Eigen_diagonalize_traits&lt;/code&gt;
(along with the &lt;em&gt;Eigen&lt;/em&gt; library) should be used instead.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-boost-property-maps&quot;&gt;CGAL and Boost Property Maps&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a read-write property map to convert on-the-fly geometric
objects from Cartesian kernels.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.13 beta2 released</title>
   <link href="http://www.cgal.org/2018/09/11/cgal413-beta2/"/>
   <updated>2018-09-11T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2018/09/11/cgal413-beta2</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.13-beta2&quot;&gt;Download CGAL-4.13-beta2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.13/Manual/index.html&quot;&gt;CGAL-4.13-beta2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.13 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2018/04/25/cgal412&quot;&gt;CGAL 4.12&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;d-periodic-mesh-generation-new-package&quot;&gt;3D Periodic Mesh Generation (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package generates 3-dimensional periodic meshes. It computes
isotropic simplicial meshes for domains described through implicit
functional boundaries over the flat torus (which can also seen in
the Euclidean space as a periodic cube). The output is a periodic
3D mesh of the domain volume and conformal surface meshes for all
the boundary and subdividing surfaces.  The package is closely
related to the 3D Mesh Generation package, with similar concepts,
classes, and API.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The library &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_Qt5&lt;/code&gt; now contains a fork of the version 2.7.0 of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libQGLViewer&lt;/code&gt;.  The corresponding code is in the package
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GraphicsView&lt;/code&gt;.  The dependency for the external library
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libQGLViewer&lt;/code&gt; is therefore dropped for all demos.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A new function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::draw()&lt;/code&gt; is added in the packages Polyhedral
Surface, Surface Mesh, Linear Cell Complex, 2D Triangulations, and
3D Triangulations, enabling to draw the corresponding data
structures.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-linear-geometry-kernel&quot;&gt;2D and 3D Linear Geometry Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;An &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator()&lt;/code&gt; that takes a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ray_3&lt;/code&gt; has been added to the concept
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConstructProjectedPoint_3&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;convex-hull-3&quot;&gt;Convex hull 3&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extreme_points_3()&lt;/code&gt; computing the points on
the convex hull without underlying connectivity.&lt;/li&gt;
    &lt;li&gt;Added a traits adapter called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Extreme_points_traits_adapter_3&lt;/code&gt;
that enables the use of the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extreme_points_3()&lt;/code&gt; on a
range of keys, each key being associated to 3D point using a
property map.  This can be used to get the vertices of a mesh that
are on it convex hull, or the indices of points in a range that
are on it convex hull.&lt;/li&gt;
    &lt;li&gt;Fix a bug in the computation of the 3D convex hull that was
leaving extra points within subset of coplanar points that do not
belong to the minimal convex hull.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-triangulations&quot;&gt;2D and 3D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a new type of intersection to handle the insertion of
intersecting constraints in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Constrained_triangulation_2&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The long-deprecated class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_cell_base_with_circumcenter_3&lt;/code&gt; and its associated
concept have been removed. Users should use the classes
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delaunay_cell_base_with_circumcenter_3&lt;/code&gt; or
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_cell_base_with_circumcenter_3&lt;/code&gt;, depending on which type
of triangulation they are using.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The deprecated functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mirror_index&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mirror_vertex&lt;/code&gt; of the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_face_base_2&lt;/code&gt; have been
removed. Users should use the equivalent functions from the class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The template parameters of the class template
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Labeled_mesh_domain_3&lt;/code&gt; have been simplified. The three
constructors of that class template have been replaced by a new
unique constructor using Boost named parameters. Three new static
template member functions that act as named constructors have been
added:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create_gray_image_mesh_domain()&lt;/code&gt;, to create a domain from a 3D
gray image,&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create_labeled_image_mesh_domain()&lt;/code&gt;, to create a domain from a 3D
labeled image, and&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create_implicit_mesh_domain()&lt;/code&gt;, to create a domain from an
implicit function.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;The class templates &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Implicit_mesh_domain_3&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gray_image_mesh_domain_3&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Labeled_image_mesh_domain_3&lt;/code&gt; are
now deprecated.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The headers
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/Mesh_3/Implicit_to_labeled_function_wrapper.h&amp;gt;&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/Mesh_3/Labeled_mesh_domain_3.h&amp;gt;&lt;/code&gt;, that were deprecated
since CGAL 4.5, have been removed.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; the concepts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshCellCriteria_3&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshFacetCriteria_3&lt;/code&gt; now require the triangulation to be passed
in their &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator()&lt;/code&gt;.  Models of these concepts that are provided
by CGAL have been modified accordingly.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; It is no longer possible to use the
deprecated, pre-CGAL 3.8 specifications in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshCellCriteria_3&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshFacetCriteria_3&lt;/code&gt; (that is, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Facet_badness&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cell_badness&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Is_facet_bad&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Is_cell_bad&lt;/code&gt;).&lt;/li&gt;
    &lt;li&gt;The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshFacetCriteria_3&lt;/code&gt; no longer requires the function
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator()(Cell_handle c, int i)&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshEdgeCriteria_3&lt;/code&gt; no longer requires the function
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator()(const Edge&amp;amp; e)&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshComplexWithFeatures_3InTriangulation_3&lt;/code&gt; no longer
requires the functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number_of_edges(Curve_index index)&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number_of_corners(Corner_index index)&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Introduced the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshTriangulationTraits_3&lt;/code&gt;, which covers
the needs of the traits class used in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh_3&lt;/code&gt; (and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_mesh_3&lt;/code&gt;). The traits class used as template parameter
of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh_triangulation_3&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_mesh_triangulation_3&lt;/code&gt;
must be a model of this concept.&lt;/li&gt;
    &lt;li&gt;Added the function
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh_domain_with_polyline_features_3::add_corner()&lt;/code&gt;, which allows
users to add a single corner (that is not incident to any
polyline) to the mesh complex.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::lloyd_optimize_mesh_3&lt;/code&gt; now depends on
the &lt;em&gt;Eigen&lt;/em&gt; library.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;Polygon Mesh Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a named parameter in stitching functions that allows to
choose whether the operation should be performed per connected
component or globally.&lt;/li&gt;
    &lt;li&gt;Added a function, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::transform()&lt;/code&gt;, to
apply a transformation to a mesh.&lt;/li&gt;
    &lt;li&gt;Added a named parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;visitor&lt;/code&gt; in corefinement-related
functions that makes it possible to pass a visitor to the function
in order to track the creation of new faces.&lt;/li&gt;
    &lt;li&gt;Added a named parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throw_on_self_intersection&lt;/code&gt; in all
corefinement-related functions, which enables to check for
self-intersecting faces involved in the intersection before trying
to corefine the input meshes. This new parameter replaces the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bool&lt;/code&gt; parameter in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;corefine()&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;corefine_and_compute_boolean_operations()&lt;/code&gt;,
which can be used to compute the result of several Boolean
operations between two volumes at the same time.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clip()&lt;/code&gt;, which can be used to clip a
triangulated surface mesh by a plane or a clipping volume.&lt;/li&gt;
    &lt;li&gt;Constrained vertices are now guaranteed to be kept in the mesh
after calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isotropic_remeshing()&lt;/code&gt; (and not only the points
associated to constrained vertices, as it was before).&lt;/li&gt;
    &lt;li&gt;Added a function, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::extrude_mesh()&lt;/code&gt;,
to perform an extrusion of an open polygon mesh.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;estimation-of-local-differential-properties-of-point-sampled-surfaces-reference&quot;&gt;Estimation of Local Differential Properties of Point-Sampled Surfaces Reference&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Monge_via_jet_fitting&lt;/code&gt; now depends on
the &lt;em&gt;Eigen&lt;/em&gt; library.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;Point Set Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a callback mechanism to the following functions:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::bilateral_smooth_point_set()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::compute_average_spacing()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::grid_simplify_point_set()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::hierarchy_simplify_point_set()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::jet_estimate_normals()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::jet_smooth_point_set()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::pca_estimate_normals()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::remove_outliers()&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::wlop_simplify_and_regularize_point_set()&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;classification&quot;&gt;Classification&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added data structures to handle classification of Surface Meshes
and of Clusters.&lt;/li&gt;
    &lt;li&gt;Added public API to compute features in parallel.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: features based on products/divisions of
eigenvalues are replaced by simple eigenvalue features. Features
based on statistics on the HSV color channels are replaced by
simple HSV color channel features.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: the API of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Classification::Point_set_feature_generator&lt;/code&gt; has been
simplified.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;bounding-volumes&quot;&gt;Bounding Volumes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Approximate_min_ellipsoid_d&lt;/code&gt; now
depends on the &lt;em&gt;Eigen&lt;/em&gt; library.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;interpolation&quot;&gt;Interpolation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The output of the natural and regular neighbor functions
(resp. the gradient fitting functions) is no longer restricted to
a Point/Coordinate pair (resp. Point/Vector pair). Instead, users
can provide their own functor to format the output as they desire.&lt;/li&gt;
    &lt;li&gt;The interpolation functions can now operate on any combination of
Type/Coordinate, provided that the values and gradients functors
can also be evaluated using ‘Type’.
The combination of these two changes allow, for example, to
operate with Vertex/Coordinate pairs, which enables a more
efficient access to values and gradients by storing information
directly in the vertex.&lt;/li&gt;
    &lt;li&gt;The concepts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InterpolationTraits&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GradientFittingTraits&lt;/code&gt;
have been updated to reflect the real needs of the code (some
types and operators were used in the code but did not appear in
the concepts).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a helper function, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::is_valid_polygon_mesh&lt;/code&gt;, that
checks the validity of a polygon mesh using BGL functions.&lt;/li&gt;
    &lt;li&gt;Improved the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Euler::collapse_edge&lt;/code&gt; such that the
target vertex of the collapsed edge is now always kept after the
collapse.&lt;/li&gt;
    &lt;li&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_face_graph()&lt;/code&gt; now uses named parameters, some
allowing it to use property maps instead of output iterators.&lt;/li&gt;
    &lt;li&gt;Addition of the following named parameters :
      &lt;ul&gt;
        &lt;li&gt;vertex_to_vertex_output_iterator&lt;/li&gt;
        &lt;li&gt;halfedge_to_halfedge_output_iterator&lt;/li&gt;
        &lt;li&gt;face_to_face_output_iterator&lt;/li&gt;
        &lt;li&gt;vertex_to_vertex_map&lt;/li&gt;
        &lt;li&gt;halfedge_to_halfedge_map&lt;/li&gt;
        &lt;li&gt;face_to_face_map&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-solvers&quot;&gt;CGAL and Solvers&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Diagonalize_traits&lt;/code&gt; is now deprecated
and should not be used. The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Eigen_diagonalize_traits&lt;/code&gt;
(along with the &lt;em&gt;Eigen&lt;/em&gt; library) should be used instead.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-boost-property-maps&quot;&gt;CGAL and Boost Property Maps&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a read-write property map to convert on-the-fly geometric
objects from Cartesian kernels.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>New in CGAL: 3D Periodic Mesh Generation</title>
   <link href="http://www.cgal.org/2018/09/10/Periodic_Mesh_Generation/"/>
   <updated>2018-09-10T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2018/09/10/Periodic_Mesh_Generation</id>
   <content type="html">
&lt;h3&gt;Mikhail Bogdanov&amp;#42;, Aymeric Pellé&amp;#42;, &lt;a href=&quot;https://geometryfactory.com/who-we-are/&quot;&gt;Mael Rouxel-Labbé&lt;/a&gt;&amp;deg;,
and &lt;a href=&quot;https://members.loria.fr/Monique.Teillaud/&quot;&gt;Monique Teillaud&lt;/a&gt;&amp;#42;&lt;/h3&gt;
&lt;h4&gt;&amp;#42;&lt;a href=&quot;https://www.inria.fr&quot;&gt;INRIA&lt;/a&gt;, &amp;deg;&lt;a href=&quot;http://www.geometryfactory.com&quot; target=&quot;_blank&quot;&gt;GeometryFactory&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;The field of algorithmic geometry is traditionally limited to Euclidean spaces. Consequently,
this is also the case for most data structures and algorithms in CGAL.
However, by assuming other geometric postulates, it is possible to consider different kinds of spaces, such
as &lt;i&gt;periodic spaces&lt;/i&gt; defined as the quotient of an Euclidean space with an associative group,
also known as &lt;i&gt;flat torus&lt;/i&gt;. In a simpler-to-visualize way, such periodic spaces can been
seen as a square (in 2D) or cubic (in 3D) tile that paves the Euclidean space. Geometric entities living
in these spaces are duplicated across all tiles.&lt;/p&gt;

&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;img src=&quot;../../../../images/periodic_2D.png&quot; /&gt;&lt;br /&gt;
  &lt;small&gt;Example of 3 points in a 2D periodic space: the points and simplicies are reproduced periodically from tile to tile.&lt;/small&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;These periodic spaces are particularly well adapted to materials science and the modelling
of some physic phenomena such as crystallographic structures, the cosmic web, and more (see for example,
the program of the &lt;a href=&quot;https://members.loria.fr/MTeillaud/PeriodicSpacesWorkshop/&quot;&gt;CGAL Prospective Workshop
on Geometric Computing in Periodic Spaces &lt;/a&gt; )...
As in the Euclidean space, the study of these topics requires discretizing objects in triangulations
and meshes. The construction of 3D periodic triangulations has been available in CGAL since
&lt;a href=&quot;../../../../2009/10/05/cgal-35&quot;&gt;CGAL 3.5&lt;/a&gt;, with the release of the package
&lt;a href=&quot;https://doc.cgal.org/4.13/Periodic_3_triangulation_3/index.html#Chapter_3D_Periodic_Triangulations&quot;&gt;3D Periodic Triangulations&lt;/a&gt;.
The next natural step was to offer mesh generation, that is the automatic generation of new points
of a triangulation to construct a good approximation of a given domain living within the periodic cube.&lt;/p&gt;

&lt;h3&gt;3D Periodic Mesh Generation&lt;/h3&gt;

&lt;p&gt;Introducing the newest CGAL package: &lt;b&gt;3D Periodic Mesh Generation&lt;/b&gt; (also known as &lt;i&gt;Periodic_3_mesh_3&lt;/i&gt;).
The package Periodic_3_mesh_3 computes isotropic simplicial meshes for domains
described through implicit functional boundaries over the flat torus. The output is a periodic 3D mesh
of the domain volume and conformal surface meshes for all the boundary and subdividing surfaces.

&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;a href=&quot;../../../../images/periodic_mesh.png&quot;&gt;&lt;img src=&quot;../../../../images/periodic_mesh.png&quot; style=&quot;max-width:95%&quot; /&gt;&lt;/a&gt;&lt;br /&gt;
  &lt;small&gt;Example of a periodic mesh (8 representations of the mesh are shown, each with a different color).&lt;/small&gt;
&lt;/div&gt;

&lt;br /&gt;
&lt;p&gt;The package is closely related to the
&lt;a href=&quot;https://doc.cgal.org/4.13/Mesh_3/index.html#Chapter_3D_Mesh_Generation&quot;&gt;3D Mesh Generation package&lt;/a&gt;
(also known as &lt;i&gt;Mesh_3&lt;/i&gt;), with similar concepts, classes, and API.
The package Periodic_3_mesh_3 therefore also offers feature protection, to ensure the presence
of sharp edges in a mesh, as well as post-processing steps such as mesh optimization
(Lloyd, ODT, sliver removal, ...):&lt;/p&gt;

&lt;div style=&quot;text-align:center;&quot;&gt;
  &lt;img src=&quot;../../../../images/periodic_optimizers.png&quot; style=&quot;max-width:80%&quot; /&gt;&lt;br /&gt;
  &lt;small&gt;Optimization of a periodic mesh (8 representations shown).&lt;/small&gt;
&lt;/div&gt;

&lt;br /&gt;
&lt;p&gt;The package Periodic_3_mesh_3 is already integrated in CGAL's master branch
on the &lt;a href=&quot;https://github.com/CGAL/cgal/&quot;&gt;CGAL GitHub repository&lt;/a&gt;, and will be
officially released in the upcoming version of CGAL, CGAL 4.13, scheduled for September 2018.&lt;/p&gt;

&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.13/Periodic_3_mesh_3/index.html#Chapter_3D_Periodic_Mesh_Generation&quot;&gt;Documentation of the package Periodic_3_mesh_3&lt;/a&gt;
&lt;br /&gt;
&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/tree/master&quot;&gt;CGAL master branch on GitHub&lt;/a&gt;
&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.12.1 released</title>
   <link href="http://www.cgal.org/2018/09/04/cgal4121/"/>
   <updated>2018-09-04T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2018/09/04/cgal4121</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.12.1&quot;&gt;Download CGAL-4.12.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.12.1/Manual/index.html&quot;&gt;CGAL-4.12.1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.12.1 is a bug-fix release for &lt;a href=&quot;../../../../2018/04/25/cgal412&quot;&gt;CGAL 4.12&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2018/04/25/cgal412&quot;&gt;CGAL 4.12&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=milestone%3A4.12.1&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ SIGGRAPH 2018</title>
   <link href="http://www.cgal.org/news/2018/08/12/siggraph-2018/"/>
   <updated>2018-08-12T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2018/08/12/siggraph-2018</id>
   <content type="html">
&lt;p&gt;As in the previous years the CGAL Project has a booth on the
exhibition floor at SIGGRAPH.&lt;/p&gt;

&lt;p&gt;This is the opportunity to see what is new, to discuss how you
might contribute a result of your research, to learn about what
we do as participant at the Google Summer of Code, to discuss
licensing, to tell us what you like about CGAL and what you hate,
or what algorithm you would like to see in the future.&lt;/p&gt;

&lt;p&gt;Visit the CGAL Project on Booth No. 1039 at the exhibition of &lt;a href=&quot;http://s2018.siggraph.org/&quot;&gt;SIGGRAPH 2018&lt;/a&gt;,
Vancouver Canada, 12-18 August 2018.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.13 beta1 released</title>
   <link href="http://www.cgal.org/2018/08/01/cgal413-beta1/"/>
   <updated>2018-08-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2018/08/01/cgal413-beta1</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.13-beta1&quot;&gt;Download CGAL-4.13-beta1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.13/Manual/index.html&quot;&gt;CGAL-4.13-beta1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.13 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2018/04/25/cgal412&quot;&gt;CGAL 4.12&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;d-periodic-mesh-generation-new-package&quot;&gt;3D Periodic Mesh Generation (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package generates 3-dimensional periodic meshes. It computes
isotropic simplicial meshes for domains described through implicit
functional boundaries over the flat torus (which can also seen in
the Euclidean space as a periodic cube). The output is a periodic
3D mesh of the domain volume and conformal surface meshes for all
the boundary and subdividing surfaces.  The package is closely
related to the 3D Mesh Generation package, with similar concepts,
classes, and API.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The library &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_Qt5&lt;/code&gt; now contains a fork of the version 2.7.0 of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libQGLViewer&lt;/code&gt;.  The corresponding code is in the package
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GraphicsView&lt;/code&gt;.  The dependency for the external library
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libQGLViewer&lt;/code&gt; is therefore dropped for all demos.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A new function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::draw()&lt;/code&gt; is added in the packages Polyhedral
Surface, Surface Mesh, Linear Cell Complex, 2D Triangulations, and
3D Triangulations, enabling to draw the corresponding data
structures.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-linear-geometry-kernel&quot;&gt;2D and 3D Linear Geometry Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;An &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator()&lt;/code&gt; that takes a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ray_3&lt;/code&gt; has been added to the concept
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ConstructProjectedPoint_3&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;convex-hull-3&quot;&gt;Convex hull 3&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extreme_points_3()&lt;/code&gt; computing the points on
the convex hull without underlying connectivity.&lt;/li&gt;
    &lt;li&gt;Added a traits adapter called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Extreme_points_traits_adapter_3&lt;/code&gt;
that enables the use of the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;extreme_points_3()&lt;/code&gt; on a
range of keys, each key being associated to 3D point using a
property map.  This can be used to get the vertices of a mesh that
are on it convex hull, or the indices of points in a range that
are on it convex hull.&lt;/li&gt;
    &lt;li&gt;Fix a bug in the computation of the 3D convex hull that was
leaving extra points within subset of coplanar points that do not
belong to the minimal convex hull.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-triangulations&quot;&gt;2D and 3D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a new type of intersection to handle the insertion of
intersecting constraints in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Constrained_triangulation_2&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The long-deprecated class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_cell_base_with_circumcenter_3&lt;/code&gt; and its associated
concept have been removed. Users should use the classes
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delaunay_cell_base_with_circumcenter_3&lt;/code&gt; or
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_cell_base_with_circumcenter_3&lt;/code&gt;, depending on which type
of triangulation they are using.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The deprecated functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mirror_index&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mirror_vertex&lt;/code&gt; of the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_face_base_2&lt;/code&gt; have been
removed. Users should use the equivalent functions from the class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The template parameters of the class template
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Labeled_mesh_domain_3&lt;/code&gt; have been simplified. The three
constructors of that class template have been replaced by a new
unique constructor using Boost named parameters. Three new static
template member functions that act as named constructors have been
added:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create_gray_image_mesh_domain()&lt;/code&gt;, to create a domain from a 3D
gray image,&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create_labeled_image_mesh_domain()&lt;/code&gt;, to create a domain from a 3D
labeled image, and&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;create_implicit_mesh_domain()&lt;/code&gt;, to create a domain from an
implicit function.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;The class templates &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Implicit_mesh_domain_3&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gray_image_mesh_domain_3&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Labeled_image_mesh_domain_3&lt;/code&gt; are
now deprecated.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The headers
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/Mesh_3/Implicit_to_labeled_function_wrapper.h&amp;gt;&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/Mesh_3/Labeled_mesh_domain_3.h&amp;gt;&lt;/code&gt;, that were deprecated
since CGAL 4.5, have been removed.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; the concepts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshCellCriteria_3&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshFacetCriteria_3&lt;/code&gt; now require the triangulation to be passed
in their &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator()&lt;/code&gt;.  Models of these concepts that are provided
by CGAL have been modified accordingly.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; It is no longer possible to use the
deprecated, pre-CGAL 3.8 specifications in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshCellCriteria_3&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshFacetCriteria_3&lt;/code&gt; (that is, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Facet_badness&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cell_badness&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Is_facet_bad&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Is_cell_bad&lt;/code&gt;).&lt;/li&gt;
    &lt;li&gt;The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshFacetCriteria_3&lt;/code&gt; no longer requires the function
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator()(Cell_handle c, int i)&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshEdgeCriteria_3&lt;/code&gt; no longer requires the function
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator()(const Edge&amp;amp; e)&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshComplexWithFeatures_3InTriangulation_3&lt;/code&gt; no longer
requires the functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number_of_edges(Curve_index index)&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number_of_corners(Corner_index index)&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Introduced the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshTriangulationTraits_3&lt;/code&gt;, which covers
the needs of the traits class used in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh_3&lt;/code&gt; (and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_mesh_3&lt;/code&gt;). The traits class used as template parameter
of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh_triangulation_3&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_mesh_triangulation_3&lt;/code&gt;
must be a model of this concept.&lt;/li&gt;
    &lt;li&gt;Added the function
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh_domain_with_polyline_features_3::add_corner()&lt;/code&gt;, which allows
users to add a single corner (that is not incident to any
polyline) to the mesh complex.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::lloyd_optimize_mesh_3&lt;/code&gt; now depends on
the &lt;em&gt;Eigen&lt;/em&gt; library.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;Polygon Mesh Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a named parameter in stitching functions that allows to
choose whether the operation should be performed per connected
component or globally.&lt;/li&gt;
    &lt;li&gt;Added a function, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::transform()&lt;/code&gt;, to
apply a transformation to a mesh.&lt;/li&gt;
    &lt;li&gt;Added a named parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;visitor&lt;/code&gt; in corefinement-related
functions that makes it possible to pass a visitor to the function
in order to track the creation of new faces.&lt;/li&gt;
    &lt;li&gt;Added a named parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;throw_on_self_intersection&lt;/code&gt; in all
corefinement-related functions, which enables to check for
self-intersecting faces involved in the intersection before trying
to corefine the input meshes. This new parameter replaces the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bool&lt;/code&gt; parameter in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;corefine()&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;corefine_and_compute_boolean_operations()&lt;/code&gt;,
which can be used to compute the result of several Boolean
operations between two volumes at the same time.&lt;/li&gt;
    &lt;li&gt;Added the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clip()&lt;/code&gt;, which can be used to clip a
triangulated surface mesh by a plane or a clipping volume.&lt;/li&gt;
    &lt;li&gt;Constrained vertices are now guaranteed to be kept in the mesh
after calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isotropic_remeshing()&lt;/code&gt; (and not only the points
associated to constrained vertices, as it was before).&lt;/li&gt;
    &lt;li&gt;Added a function, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::extrude_mesh()&lt;/code&gt;,
to perform an extrusion of an open polygon mesh.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;estimation-of-local-differential-properties-of-point-sampled-surfaces-reference&quot;&gt;Estimation of Local Differential Properties of Point-Sampled Surfaces Reference&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Monge_via_jet_fitting&lt;/code&gt; now depends on
the &lt;em&gt;Eigen&lt;/em&gt; library.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;Point Set Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a callback mechanism to the following functions:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::bilateral_smooth_point_set()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::compute_average_spacing()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::grid_simplify_point_set()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::hierarchy_simplify_point_set()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::jet_estimate_normals()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::jet_smooth_point_set()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::pca_estimate_normals()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::remove_outliers()&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::wlop_simplify_and_regularize_point_set()&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;classification&quot;&gt;Classification&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added data structures to handle classification of Surface Meshes
and of Clusters.&lt;/li&gt;
    &lt;li&gt;Added public API to compute features in parallel.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: features based on products/divisions of
eigenvalues are replaced by simple eigenvalue features. Features
based on statistics on the HSV color channels are replaced by
simple HSV color channel features.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: the API of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Classification::Point_set_feature_generator&lt;/code&gt; has been
simplified.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;bounding-volumes&quot;&gt;Bounding Volumes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Approximate_min_ellipsoid_d&lt;/code&gt; now
depends on the &lt;em&gt;Eigen&lt;/em&gt; library.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;interpolation&quot;&gt;Interpolation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The output of the natural and regular neighbor functions
(resp. the gradient fitting functions) is no longer restricted to
a Point/Coordinate pair (resp. Point/Vector pair). Instead, users
can provide their own functor to format the output as they desire.&lt;/li&gt;
    &lt;li&gt;The interpolation functions can now operate on any combination of
Type/Coordinate, provided that the values and gradients functors
can also be evaluated using ‘Type’.
The combination of these two changes allow, for example, to
operate with Vertex/Coordinate pairs, which enables a more
efficient access to values and gradients by storing information
directly in the vertex.&lt;/li&gt;
    &lt;li&gt;The concepts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;InterpolationTraits&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GradientFittingTraits&lt;/code&gt;
have been updated to reflect the real needs of the code (some
types and operators were used in the code but did not appear in
the concepts).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a helper function, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::is_valid_polygon_mesh&lt;/code&gt;, that
checks the validity of a polygon mesh using BGL functions.&lt;/li&gt;
    &lt;li&gt;Improved the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Euler::collapse_edge&lt;/code&gt; such that the
target vertex of the collapsed edge is now always kept after the
collapse.&lt;/li&gt;
    &lt;li&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_face_graph()&lt;/code&gt; now uses named parameters, some
allowing it to use property maps instead of output iterators.&lt;/li&gt;
    &lt;li&gt;Addition of the following named parameters :
      &lt;ul&gt;
        &lt;li&gt;vertex_to_vertex_output_iterator&lt;/li&gt;
        &lt;li&gt;halfedge_to_halfedge_output_iterator&lt;/li&gt;
        &lt;li&gt;face_to_face_output_iterator&lt;/li&gt;
        &lt;li&gt;vertex_to_vertex_map&lt;/li&gt;
        &lt;li&gt;halfedge_to_halfedge_map&lt;/li&gt;
        &lt;li&gt;face_to_face_map&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-solvers&quot;&gt;CGAL and Solvers&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Diagonalize_traits&lt;/code&gt; is now deprecated
and should not be used. The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Eigen_diagonalize_traits&lt;/code&gt;
(along with the &lt;em&gt;Eigen&lt;/em&gt; library) should be used instead.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-boost-property-maps&quot;&gt;CGAL and Boost Property Maps&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a read-write property map to convert on-the-fly geometric
objects from Cartesian kernels.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.11.3 released</title>
   <link href="http://www.cgal.org/2018/07/31/cgal4113/"/>
   <updated>2018-07-31T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2018/07/31/cgal4113</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.11.3&quot;&gt;Download CGAL-4.11.3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.11.3/Manual/index.html&quot;&gt;CGAL-4.11.3 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.11.3 is a bug-fix release for &lt;a href=&quot;../../../../2017/09/21/cgal411&quot;&gt;CGAL 4.11&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2018/07/10/cgal4112&quot;&gt;CGAL 4.11.2&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=milestone%3A4.11.3&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.11.2 released</title>
   <link href="http://www.cgal.org/2018/07/10/cgal4112/"/>
   <updated>2018-07-10T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2018/07/10/cgal4112</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.11.2&quot;&gt;Download CGAL-4.11.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.11.2/Manual/index.html&quot;&gt;CGAL-4.11.2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.11.2 is a bug-fix release for &lt;a href=&quot;../../../../2017/09/21/cgal411&quot;&gt;CGAL 4.11&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2018/02/26/cgal4111&quot;&gt;CGAL 4.11.1&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=milestone%3A4.11.2&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ IRP 2018</title>
   <link href="http://www.cgal.org/2018/04/30/irp2017/"/>
   <updated>2018-04-30T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2018/04/30/irp2017</id>
   <content type="html">
&lt;p&gt;We present CGAL during the
&lt;a href=&quot;https://dccg.upc.edu/irp2018/details-of-the-activities/gs/&quot;&gt;Hands-on-course on Geometric Software&lt;/a&gt;.
The course is part of the
&lt;a href=&quot;https://dccg.upc.edu/irp2018/&quot;&gt;
Intensive Research Program in Discrete, Combinatorial and Computational Geometry&lt;/a&gt;
which takes place in  Barcelona, from April 16 - June 8, 2018.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.12 released</title>
   <link href="http://www.cgal.org/2018/04/25/cgal412/"/>
   <updated>2018-04-25T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2018/04/25/cgal412</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.12&quot;&gt;Download CGAL-4.12&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.12/Manual/index.html&quot;&gt;CGAL-4.12 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.12 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2017/09/21/cgal411&quot;&gt;CGAL 4.11&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;important-notice&quot;&gt;Important Notice&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The CMake scripts used by CGAL have been changed to use modern patterns
introduced by CMake 2.8.12 and CMake 3.0: instead of setting CMake
variables, the script now defines imported targets and uses link
interfaces.&lt;/li&gt;
    &lt;li&gt;That is mostly backward-compatible with existing usages of CGAL CMake
scripts. The only non-compatible effect is that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMAKE_BUILD_TYPE&lt;/code&gt;
and compilation flags are no longer copied from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_DIR&lt;/code&gt; to the
project using it. Note also that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMAKE_BUILD_TYPE&lt;/code&gt; is no longer
set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Release&lt;/code&gt; by default. For a developer using the Visual Studio
IDE or the Xcode IDE, the change should be transparent. Developers using
makefiles or the Ninja build-system should set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMAKE_BUILD_TYPE&lt;/code&gt;
to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Release&lt;/code&gt; manually, to avoid using CGAL libraries without any
compile-time optimization.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;header-only-mode&quot;&gt;Header-only Mode&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Since CGAL-4.9, it has been possible to use CGAL by configuring it
using CMake, but without compiling the CGAL libraries. With CGAL-4.12,
it is now possible to use CGAL header-only, without even configuring
it. CMake is then used only to configure programs using CGAL.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;compiler-support&quot;&gt;Compiler Support&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The Microsoft Visual C++ 2017 version 15.3 has introduced support for
C++17, with the compilation flag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/std:c++17&lt;/code&gt;. CGAL 4.12 has an initial
support for that flag: the code will compile, but a lot of deprecation
warnings will remain. Note that Boost version 1.67 is the first version
of Boost supporting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/std:c++17&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The compilation flag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/permissive-&lt;/code&gt; of Visual C++ is now supported.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-movable-separability-of-sets-new-package&quot;&gt;2D Movable Separability of Sets (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A new package called “2D Movable Separability of Sets” has been
introduced. It handles a class of problems that deal with moving
sets of objects in the plane; the challenge is to avoid collisions
between the objects while considering different kinds of motions and
various definitions of separation.&lt;/li&gt;
    &lt;li&gt;At this point this package consists of the implementations of
various predicates and constructions related to castings of
polygonal objects. In particular, it can be used to determine
whether a feasible mold for a polygonal object does exist. If a mold
exists, the package can also be used to compute all possible
orientations of the feasible molds and the corresponding motions
needed to remove the casted object from the mold.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;classification-new-package&quot;&gt;Classification (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package offers an algorithm that classifies a data set into a
user-defined set of labels (such as ground, vegetation, buildings,
etc.). A flexible API is provided so that users can classify any
type of data, compute their own local features on the input data
set, and define their own labels.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;kinetic-data-structures-removed-package&quot;&gt;Kinetic Data Structures (removed package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package has been removed from CGAL-4.12. Users of the package
will have to keep using the source code available in CGAL-4.12 or
earlier.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-convex-hull&quot;&gt;3D Convex Hull&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The header &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/convex_hull_3.h&amp;gt;&lt;/code&gt; no longer
includes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/Polyhedron_3.h&amp;gt;&lt;/code&gt;, as the convex hull function works
with any model of the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableFaceGraph&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;When removing an edge from an arrangement and the user has requested to
remove the end-vertices in case they become redundant (either isolated or
approach infinity), defer the removal of the such end-vertices to occur
after the observer is notified that the edge has been removed. This is
symmetric (opposite) to the order of notification when an edge is inserted.&lt;/li&gt;
    &lt;li&gt;The user can restore old (non-symmetric) behaviour by defining the macro:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_NON_SYMETRICAL_OBSERVER_EDGE_REMOVAL_BACKWARD_COMPATIBILITY&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-periodic-triangulations&quot;&gt;2D Periodic Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_2_triangulation_hierarchy_vertex_base_2&lt;/code&gt; (and its
corresponding header) have been removed. Users should directly use
the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_hierarchy_vertex_base_2&lt;/code&gt;, which is
identical.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;circumcenter()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;side_of_oriented_circle()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_extensible_in_1_sheet_h[12]()&lt;/code&gt;
are related to Delaunay triangulations and have been moved from
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_2_triangulation_2&lt;/code&gt; to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_2_Delaunay_triangulation_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-alpha-shapes&quot;&gt;2D Alpha Shapes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;It is now possible to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Periodic_2_triangulation_2&lt;/code&gt; as
underlying triangulation for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alpha_shape_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-surface-mesh-generation&quot;&gt;3D Surface Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Add the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;facets_in_complex_2_to_triangle_mesh()&lt;/code&gt; that
exports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Surface_mesh_complex_2_in_triangulation_3&lt;/code&gt; facets into
a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableFaceGraph&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Add the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;facets_in_complex_3_to_triangle_mesh()&lt;/code&gt; that
exports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh_complex_3_in_triangulation_3&lt;/code&gt; facets into a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableFaceGraph&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshDomainWithFeatures_3&lt;/code&gt; has been
modified, to improve the performance and the reliability of the
sampling of 1D curves of the domain.&lt;/li&gt;
    &lt;li&gt;Add the ability to ensure that the output mesh surface describes a
manifold, when the input surface is a manifold. New named parameters
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifold()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifold_with_boundary()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;non_manifold()&lt;/code&gt; are
added.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;optimal-transportation-curve-reconstruction&quot;&gt;Optimal Transportation Curve Reconstruction&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;New method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run_under_wasserstein_tolerance()&lt;/code&gt; which allows the
user to perform curve reconstruction by relying on a threshold on
the Wasserstein distance. This is useful when the number of edges
in the expected output reconstruction is not known.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;Polygon Mesh Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added two functions for orienting connected components :
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::orient()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::orient_to_bound_a_volume()&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Added a new function for intersection tests between triangle meshes
and/or polylines or range of polylines, and another one to report
all the pairs of meshes intersecting from a range of meshes:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::do_intersect()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::intersecting_meshes()&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Added new functions for feature detection and feature-guided
segmentation:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::detect_sharp_edges()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::detect_vertex_incident_patches()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::sharp_edges_segmentation()&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-shape-detection&quot;&gt;Point Set Shape Detection&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Shape_detection_3::Efficient_RANSAC_traits&lt;/code&gt; is now called
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Shape_detection_3::Shape_detection_traits&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;New algorithm: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Region_growing&lt;/code&gt;. This is a deterministic
alternative to RANSAC for plane detection.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: the API of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::regularize_planes()&lt;/code&gt; is
generalized to accept other types of input than the RANSAC output.&lt;/li&gt;
    &lt;li&gt;Added a callback mechanism for both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Efficient_RANSAC&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Region_growing&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;Point Set Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: the API of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::structure_point_set()&lt;/code&gt; is
generalized to accept other types of input than the RANSAC output.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: the API of all functions of Point Set
Processing is modified to use ranges (instead of iterators) and
Named Parameters (similarly to the API of Polygon Mesh
Processing). The old API is kept as deprecated.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added helper function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::expand_face_selection_for_removal&lt;/code&gt; that
expands a face selection to avoid creating a non manifold mesh when
removing the selected faces.&lt;/li&gt;
    &lt;li&gt;Added support for dynamic property maps.&lt;/li&gt;
    &lt;li&gt;Added an interface to the &amp;lt;a href=”http://glaros.dtc.umn.edu/gkhome/metis/metis/overview”METIS library&amp;lt;/a&amp;gt;,
which allows to partition any mesh that is a model of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceListGraph&lt;/code&gt;.  Wrappers to the
METIS functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;METIS_PartMeshNodal&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;METIS_PartMeshDual&lt;/code&gt; are
offered.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL welcomes 8 students for the GSoC 2018</title>
   <link href="http://www.cgal.org/news/2018/04/23/gsoc-2018-projects-accepted/"/>
   <updated>2018-04-23T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2018/04/23/gsoc-2018-projects-accepted</id>
   <content type="html">
&lt;p&gt;The CGAL project welcomes 8 &lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;GSoC&lt;/a&gt; students.
Have a look at the &lt;a href=&quot;https://summerofcode.withgoogle.com/organizations/6121660483108864/&quot;&gt;Accepted Projects&lt;/a&gt; page.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.12 beta2 released</title>
   <link href="http://www.cgal.org/2018/04/09/cgal412-beta2/"/>
   <updated>2018-04-09T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2018/04/09/cgal412-beta2</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.12-beta2&quot;&gt;Download CGAL-4.12-beta2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.12/Manual/index.html&quot;&gt;CGAL-4.12-beta2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.12 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2017/09/21/cgal411&quot;&gt;CGAL 4.11&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;important-notice&quot;&gt;Important Notice&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The CMake scripts used by CGAL have been changed to use modern patterns
introduced by CMake 2.8.12 and CMake 3.0: instead of setting CMake
variables, the script now defines imported targets and uses link
interfaces.&lt;/li&gt;
    &lt;li&gt;That is mostly backward-compatible with existing usages of CGAL CMake
scripts. The only non-compatible effect is that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMAKE_BUILD_TYPE&lt;/code&gt;
and compilation flags are no longer copied from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_DIR&lt;/code&gt; to the
project using it. Note also that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMAKE_BUILD_TYPE&lt;/code&gt; is no longer
set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Release&lt;/code&gt; by default. For a developer using the Visual Studio
IDE or the Xcode IDE, the change should be transparent. Developers using
makefiles or the Ninja build-system should set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMAKE_BUILD_TYPE&lt;/code&gt;
to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Release&lt;/code&gt; manually, to avoid using CGAL libraries without any
compile-time optimization.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;header-only-mode&quot;&gt;Header-only mode&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Since CGAL-4.9, it has been possible to use CGAL by configuring it using
CMake, but without compiling the CGAL libraries. With CGAL-4.12, it is
now possible to use CGAL header-only, without even configuring it. CMake
is then used only to configure programs using CGAL.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-movable-separability-of-sets-new-package&quot;&gt;2D Movable Separability of Sets (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A new package called “2D Movable Separability of Sets” has been
introduced. It handles a class of problems that deal with moving
sets of objects in the plane; the challenge is to avoid collisions
between the objects while considering different kinds of motions and
various definitions of separation.&lt;/li&gt;
    &lt;li&gt;At this point this package consists of the implementations of
various predicates and constructions related to castings of
polygonal objects. In particular, it can be used to determine
whether a feasible mold for a polygonal object does exist. If a mold
exists, the package can also be used to compute all possible
orientations of the feasible molds and the corresponding motions
needed to remove the casted object from the mold.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;classification-new-package&quot;&gt;Classification (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package offers an algorithm that classifies a data set into a
user-defined set of labels (such as ground, vegetation, buildings,
etc.). A flexible API is provided so that users can classify any
type of data, compute their own local features on the input data
set, and define their own labels.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;kinetic-data-structures-removed-package&quot;&gt;Kinetic Data Structures (removed package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package has been removed from CGAL-4.12. Users of the package
will have to keep using the source code available in CGAL-4.11 or
earlier.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-convex-hull&quot;&gt;3D Convex Hull&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The header &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/convex_hull_3.h&amp;gt;&lt;/code&gt; no longer
includes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/Polyhedron_3.h&amp;gt;&lt;/code&gt;, as the convex hull function works
with any model of the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableFaceGraph&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;When removing an edge from an arrangement and the user has requested to
remove the end-vertices in case they become redundant (either isolated or
approach infinity), defer the removal of the such end-vertices to occur
after the observer is notified that the edge has been removed. This is
symmetric (opposite) to the order of notification when an edge is inserted.&lt;/p&gt;

      &lt;p&gt;The user can restore old (non-symmetric) behaviour by defining the macro:&lt;/p&gt;

      &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_NON_SYMETRICAL_OBSERVER_EDGE_REMOVAL_BACKWARD_COMPATIBILITY&lt;/code&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-periodic-triangulations&quot;&gt;2D Periodic Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_2_triangulation_hierarchy_vertex_base_2&lt;/code&gt; (and its
corresponding header) have been removed. Users should directly use
the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_hierarchy_vertex_base_2&lt;/code&gt;, which is
identical.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;circumcenter()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;side_of_oriented_circle()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_extensible_in_1_sheet_h[12]()&lt;/code&gt;
are related to Delaunay triangulations and have been moved from
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_2_triangulation_2&lt;/code&gt; to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_2_Delaunay_triangulation_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-alpha-shapes&quot;&gt;2D Alpha Shapes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;It is now possible to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Periodic_2_triangulation_2&lt;/code&gt; as
underlying triangulation for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alpha_shape_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-surface-mesh-generation&quot;&gt;3D Surface Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Add the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;facets_in_complex_2_to_triangle_mesh()&lt;/code&gt; that
exports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Surface_mesh_complex_2_in_triangulation_3&lt;/code&gt; facets into
a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableFaceGraph&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Add the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;facets_in_complex_3_to_triangle_mesh()&lt;/code&gt; that
exports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh_complex_3_in_triangulation_3&lt;/code&gt; facets into a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableFaceGraph&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshDomainWithFeatures_3&lt;/code&gt; has been
modified, to improve the performance and the reliability of the
sampling of 1D curves of the domain.&lt;/li&gt;
    &lt;li&gt;Add the ability to ensure that the output mesh surface describes a
manifold, when the input surface is a manifold. New named parameters
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifold()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifold_with_boundary()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;non_manifold()&lt;/code&gt; are
added.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;optimal-transportation-curve-reconstruction&quot;&gt;Optimal Transportation Curve Reconstruction&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;New method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run_under_wasserstein_tolerance()&lt;/code&gt; which allows the
user to perform curve reconstruction by relying on a threshold on
the Wasserstein distance. This is useful when the number of edges
in the expected output reconstruction is not known.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;Polygon Mesh Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added two functions for orienting connected components :
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::orient()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::orient_to_bound_a_volume()&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Added a new function for intersection tests between triangle meshes
and/or polylines or range of polylines, and another one to report
all the pairs of meshes intersecting from a range of meshes:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::do_intersect()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::intersecting_meshes()&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Added new functions for feature detection and feature-guided
segmentation:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::detect_sharp_edges()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::detect_vertex_incident_patches()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::sharp_edges_segmentation()&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-shape-detection&quot;&gt;Point Set Shape Detection&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;New algorithm: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Region_growing&lt;/code&gt;. This is a deterministic
alternative to RANSAC for plane detection.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: the API of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::regularize_planes()&lt;/code&gt; is
generalized to accept other types of input than the RANSAC output.&lt;/li&gt;
    &lt;li&gt;Added a callback mechanism for both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Efficient_RANSAC&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Region_growing&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;Point Set Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: the API of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::structure_point_set()&lt;/code&gt; is
generalized to accept other types of input than the RANSAC output.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: the API of all functions of Point Set
Processing is modified to use ranges (instead of iterators) and
Named Parameters (similarly to the API of Polygon Mesh
Processing). The old API is kept as deprecated.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added helper function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::expand_face_selection_for_removal&lt;/code&gt; that
expands a face selection to avoid creating a non manifold mesh when
removing the selected faces.&lt;/li&gt;
    &lt;li&gt;Added support for dynamic property maps.&lt;/li&gt;
    &lt;li&gt;Added an interface to the &lt;a href=&quot;http://glaros.dtc.umn.edu/gkhome/metis/metis/overview&quot;&gt;METIS library&lt;/a&gt;,
which allows to partition any mesh that is a model of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceListGraph&lt;/code&gt;.  Wrappers to the
METIS functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;METIS_PartMeshNodal&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;METIS_PartMeshDual&lt;/code&gt; are
offered.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL - Finalist for the Green Project Award</title>
   <link href="http://www.cgal.org/news/2018/04/01/GreenProjectAward/"/>
   <updated>2018-04-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2018/04/01/GreenProjectAward</id>
   <content type="html">
&lt;p&gt;We are glad to be among the three finalists for the &lt;em&gt;Green Project Award&lt;/em&gt; offered
by Google Inc to the Open Source project that makes the most substantial effort
to produce software with a low carbon footprint per byte.&lt;/p&gt;

&lt;p&gt;Even the Google Summer of Code must be seen as part of Google's effort to make this
planet better instead of making escape plans for Mars. The internship program
is a match maker between students and mentors who, in average, work 4300 miles
from each other away, without the need for traveling.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&quot;The CGAL project has clearly a holistic view on how to reduce the carbon footprint.&quot;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Anonymous Reviewer no. 3&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the following we present some ideas, and more importantly actions we take, to
develop software in a sustainable manner.&lt;/p&gt;

&lt;h3&gt;A License Change&lt;/h3&gt;

&lt;p&gt;We plan a license change for CGAL Rel. 5.0 from the GPL to the GGPL, the &lt;em&gt;Green GPL&lt;/em&gt;.
This new license is pushed by Richard Stallman from the Free Software
Foundation and Sundar Pichai from Google: The fundamental idea is to
grant the right to use GGPLed code only to developers, who themselves fulfill
some minimal ecological standards. These standards will not be very demanding, but
applying (a regulatory) force is often the only thing that helps.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&quot;We should go down there, get some guys together, ya know, get some bricks and baseball bats, 
and really explain things to 'em.&quot;&lt;/p&gt;
 &lt;p&gt;&lt;small&gt;Woody Allen, Manhattan&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Google is aware of the fact that the GGPL means less income for companies
offering commercial services around Open Source software and is willing to
compensate by placing such companies more prominently in search results.&lt;/p&gt;

&lt;h3&gt;Not Just Any Electic Car&lt;/h3&gt;

&lt;p&gt;You can only join the CGAL project as a developer, when you use
a bike, public transportation, or a hybrid/electric car which
weights less than 1200/1600 kg. Depending where developers live
a car is unavoidable, but a hybrid Porsche or Lexus SUV
is, honestly, a joke as they weight more than 2.4 tons. GeometryFactory, for example,
leased a fleet of five &lt;a href=&quot;https://www.renault.fr/vehicules/vehicules-electriques/zoe/versions.html&quot;&gt;Renault &lt;em&gt;Zoe&lt;/em&gt;&lt;/a&gt; for its employees.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/zoe.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Jane and Zoe&lt;/small&gt;&lt;/p&gt;

&lt;h3&gt;The CGAL Testsuite on Fairphones&lt;/h3&gt;

&lt;p&gt;The 120 CGAL packages are tested continuously on about 30 platforms, where platform
means Linux/Windows Distribution * compiler * boost-version * Debug/Release * etc.
As CGAL is not a monolithic software, each unit test can be performed
on low energy consumption hardware. In May 2018 we migrate from a server
farm close to Reykjavik to 120*30 &lt;a href=&quot;https://www.fairphone.com/en/&quot;&gt;Fairphones&lt;/a&gt;
with OS emulators. The phones are recycled phones having broken screens, which got
replaced with small solar panels. They will go directly on the roof of the GeometryFactory
office building.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/fairphone.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Recycled Fairphone with solar panel&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;The result is recycled material, a low wiring effort, and
most importantly a future business: The CGAL Project is among the alpha tester for
this new project that is part of Fairphone's
&lt;a href=&quot;https://www.fairphone.com/en/our-goals/recycling/&quot;&gt;Reuse and Recycle&lt;/a&gt;
program. It will be fully rolled out during summer 2018, and it is not only
about recycling, but also about creating jobs for unqualified workers.
&lt;/p&gt;

&lt;h3&gt;Travelling to the GSoC Mentor Summit&lt;/h3&gt;

&lt;p&gt;The only travelling that happens in the GSoC is when two mentors per
Open Source project attend the Mentor Summit in Mountain View each autumn.&lt;/p&gt;

&lt;p&gt;Up to now two mentors from CGAL took transatlantic flights, but in November 2018
we combine ship and train. We got an important reduction
of the price for the trip on Queen Mary II from Hamburg to New York by
lecturing on board in the
&lt;a href=&quot;https://www.cunardline.ch/en/destinations/regions/transatlantic&quot;&gt;Cunard Insights Program&lt;/a&gt;.
The classes cover not only algorithms and data structures, but also generic programming,
swig, github, Open Source licensing, in order to address a larger and even untechnical public.&lt;/p&gt;

&lt;p&gt;We then continue with
&lt;a href=&quot;https://www.seat61.com/UnitedStates.htm#Long%20distance%20trains%20in%20the%20east&quot;&gt;
Amtrak's&lt;/a&gt;  &lt;em&gt;Lakeshore Limited&lt;/em&gt; and &lt;em&gt;California Zephyr&lt;/em&gt;. We arranged for getting a dining car
serving as a rolling office, and, on the way West, we pick
up fellow Open Source project mentors at Chicago, Omaha, Burlington and Denver.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/amtrak.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;NYC-SF&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;We pick up mentors not only for cost sharing but also to do collaborative work on the trip.
We still have five seats available in the train, so feel free to contact us,
in case your mentoring organization deals also with geometric computing.
As an additional benefit, travelling this way avoids jet-lag.&lt;/p&gt;

&lt;h3&gt;Kaizen&lt;/h3&gt;

&lt;p&gt;Above, we obviously only presented the most disruptive ideas, and not
the obvious ones like consuming joghurt produced locally instead of importing
it from Greece or Bulgaria and moving it around the globe. Many ideas we implemented
to reduce the energy footprint in the CGAL project come from the observation of nature (an elephant
walking slowly needs barely more energy than a colony of mound building termites),
from discussion groups on &lt;em&gt;Six Sigma&lt;/em&gt; we led at former GSoC Mentor Summits,
and from brainstorming sessions we had with companies such as Fairphone Ltd.&lt;/p&gt;

&lt;p&gt;Kaizen is about continuous improvement, because wherever we stand today
we only stand at the beginning, so if you have ideas please share them with us.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>CGAL 4.12 beta1 released</title>
   <link href="http://www.cgal.org/2018/02/27/cgal412-beta1/"/>
   <updated>2018-02-27T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2018/02/27/cgal412-beta1</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.12-beta1&quot;&gt;Download CGAL-4.12-beta1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.12/Manual/index.html&quot;&gt;CGAL-4.12-beta1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.12 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2017/09/21/cgal411&quot;&gt;CGAL 4.11&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;important-notice&quot;&gt;Important Notice&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The CMake scripts used by CGAL have been changed to use modern patterns
introduced by CMake 2.8.12 and CMake 3.0: instead of setting CMake
variables, the script now defines imported targets and uses link
interfaces.&lt;/li&gt;
    &lt;li&gt;That is mostly backward-compatible with existing usages of CGAL CMake
scripts. The only non-compatible effect is that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMAKE_BUILD_TYPE&lt;/code&gt;
and compilation flags are no longer copied from the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_DIR&lt;/code&gt; to the
project using it. Note also that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMAKE_BUILD_TYPE&lt;/code&gt; is no longer
set to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Release&lt;/code&gt; by default. For a developer using the Visual Studio
IDE or the Xcode IDE, the change should be transparent. Developers using
makefiles or the Ninja build-system should set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CMAKE_BUILD_TYPE&lt;/code&gt;
to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Release&lt;/code&gt; manually.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-movable-separability-of-sets-new-package&quot;&gt;2D Movable Separability of Sets (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A new package called “2D Movable Separability of Sets” has been
introduced. It handles a class of problems that deal with moving
sets of objects in the plane; the challenge is to avoid collisions
between the objects while considering different kinds of motions and
various definitions of separation.&lt;/li&gt;
    &lt;li&gt;At this point this package consists of the implementations of
various predicates and constructions related to castings of
polygonal objects. In particular, it can be used to determine
whether a feasible mold for a polygonal object does exist. If a mold
exists, the package can also be used to compute all possible
orientations of the feasible molds and the corresponding motions
needed to remove the casted object from the mold.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;classification-new-package&quot;&gt;Classification (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package offers an algorithm that classifies a data set into a
user-defined set of labels (such as ground, vegetation, buildings,
etc.). A flexible API is provided so that users can classify any
type of data, compute their own local features on the input data
set, and define their own labels.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;kinetic-data-structures-removed-package&quot;&gt;Kinetic Data Structures (removed package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package has been removed from CGAL-4.12. Users of the package
will have to keep using the source code available in CGAL-4.12 or
earlier.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;When removing an edge from an arrangement and the user has requested to
remove the end-vertices in case they become redundant (either isolated or
approach infinity), defer the removal of the such end-vertices to occur
after the observer is notified that the edge has been removed. This is
symmetric (opposite) to the order of notification when an edge is inserted.&lt;/li&gt;
    &lt;li&gt;The user can restore old (non-symmetric) behaviour by defining the macro:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_NON_SYMETRICAL_OBSERVER_EDGE_REMOVAL_BACKWARD_COMPATIBILITY&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-periodic-triangulations&quot;&gt;2D Periodic Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_2_triangulation_hierarchy_vertex_base_2&lt;/code&gt; (and its
corresponding header) have been removed. Users should directly use
the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_hierarchy_vertex_base_2&lt;/code&gt;, which is
identical.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;circumcenter()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;side_of_oriented_circle()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_extensible_in_1_sheet_h[12]()&lt;/code&gt;
are related to Delaunay triangulations and have been moved from
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_2_triangulation_2&lt;/code&gt; to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_2_Delaunay_triangulation_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-alpha-shapes&quot;&gt;2D Alpha Shapes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;It is now possible to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Periodic_2_triangulation_2&lt;/code&gt; as
underlying triangulation for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alpha_shape_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-surface-mesh-generation&quot;&gt;3D Surface Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;facets_in_complex_2_to_triangle_mesh()&lt;/code&gt; that
exports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Surface_mesh_complex_2_in_triangulation_3&lt;/code&gt; facets into
a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableFaceGraph&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;facets_in_complex_3_to_triangle_mesh()&lt;/code&gt; that
exports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh_complex_3_in_triangulation_3&lt;/code&gt; facets into a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableFaceGraph&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshDomainWithFeatures_3&lt;/code&gt; has been
modified, to improve the performance and the reliability of the
sampling of 1D curves of the domain.&lt;/li&gt;
    &lt;li&gt;Added the ability to ensure that the output mesh surface describes a
manifold, when the input surface is a manifold. New named parameters
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifold()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;manifold_with_boundary()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;non_manifold()&lt;/code&gt; are
added.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;optimal-transportation-curve-reconstruction&quot;&gt;Optimal Transportation Curve Reconstruction&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;New method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;run_under_wasserstein_tolerance()&lt;/code&gt; which allows the
user to perform curve reconstruction by relying on a threshold on
the Wasserstein distance. This is useful when the number of edges
in the expected output reconstruction is not known.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;Polygon Mesh Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added two functions for orienting connected components :
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::orient()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::orient_to_bound_a_volume()&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Added a new function for intersection tests between triangle meshes
and/or polylines or range of polylines, and another one to report
all the pairs of meshes intersecting from a range of meshes:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::do_intersect()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::intersecting_meshes()&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Added new functions for feature detection and feature-guided
segmentation:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::detect_sharp_edges()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::detect_vertex_incident_patches()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::sharp_edges_segmentation()&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-shape-detection&quot;&gt;Point Set Shape Detection&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;New algorithm: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Region_growing&lt;/code&gt;. This is a deterministic
alternative to RANSAC for plane detection.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: the API of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::regularize_planes()&lt;/code&gt; is
generalized to accept other types of input than the RANSAC output.&lt;/li&gt;
    &lt;li&gt;Add a callback mechanism for both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Efficient_RANSAC&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Region_growing&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;Point Set Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: the API of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::structure_point_set()&lt;/code&gt; is
generalized to accept other types of input than the RANSAC output.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: the API of all functions of Point Set
Processing is modified to use ranges (instead of iterators) and
Named Parameters (similarly to the API of Polygon Mesh
Processing). The old API is kept as deprecated.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added helper function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::expand_face_selection_for_removal&lt;/code&gt; that
expands a face selection to avoid creating a non manifold mesh when
removing the selected faces.&lt;/li&gt;
    &lt;li&gt;Added support for dynamic property maps.&lt;/li&gt;
    &lt;li&gt;Added an interface to the &lt;a href=&quot;http://glaros.dtc.umn.edu/gkhome/metis/metis/overview&quot;&gt;METIS library&lt;/a&gt;,
which allows to partition any mesh that is a model of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceListGraph&lt;/code&gt;. Wrappers to the
METIS functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;METIS_PartMeshNodal&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;METIS_PartMeshDual&lt;/code&gt; are
offered.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.11.1 released</title>
   <link href="http://www.cgal.org/2018/02/26/cgal4111/"/>
   <updated>2018-02-26T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2018/02/26/cgal4111</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.11.1&quot;&gt;Download CGAL-4.11.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.11.1/Manual/index.html&quot;&gt;CGAL-4.11.1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.11.1 is a bug-fix release for &lt;a href=&quot;../../../../2017/09/21/cgal411&quot;&gt;CGAL 4.11&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2017/09/21/cgal411&quot;&gt;CGAL 4.11&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=milestone%3A4.11.1&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL to participate in the Google Summer of Code 2018</title>
   <link href="http://www.cgal.org/news/2018/02/12/gsoc-2018-mentoring/"/>
   <updated>2018-02-12T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2018/02/12/gsoc-2018-mentoring</id>
   <content type="html">
&lt;p&gt;The CGAL Project is a &lt;a href=&quot;https://summerofcode.withgoogle.com/organizations/6121660483108864/&quot;&gt;mentoring organization&lt;/a&gt;
for &lt;a href=&quot;https://summerofcode.withgoogle.com/&quot;&gt;Google Summer of Code 2018&lt;/a&gt;.
Have a look at our &lt;a href=&quot;https://github.com/CGAL/cgal/wiki/Project-Ideas&quot;&gt;Project Ideas&lt;/a&gt; page.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.10.2 released</title>
   <link href="http://www.cgal.org/2018/01/16/cgal-4102/"/>
   <updated>2018-01-16T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2018/01/16/cgal-4102</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.10.2&quot;&gt;Download CGAL-4.10.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.10.2/Manual/index.html&quot;&gt;CGAL-4.10.2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.10.2 is a bug-fix release for &lt;a href=&quot;../../../../2017/05/29/cgal410&quot;&gt;CGAL 4.10&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2017/09/13/cgal-4101&quot;&gt;CGAL 4.10.1&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=milestone%3A4.10.2&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.11 released</title>
   <link href="http://www.cgal.org/2017/09/21/cgal411/"/>
   <updated>2017-09-21T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2017/09/21/cgal411</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.11&quot;&gt;Download CGAL-4.11&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.11/Manual/index.html&quot;&gt;CGAL-4.11 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.11 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2017/05/29/cgal410&quot;&gt;CGAL 4.10&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;d-periodic-regular-triangulations-new-feature&quot;&gt;3D Periodic Regular Triangulations (new feature)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_regular_triangulation_3&lt;/code&gt;, which provides
functionality for 3D periodic weighted Delaunay triangulations. The
construction is fully dynamic: it provides both point insertion and
vertex removal.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-regular-triangulations-new-feature&quot;&gt;dD Regular Triangulations (new feature)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation&lt;/code&gt;, which provides
functionality for dD weighted Delaunay triangulations. Note that the
removal of points is not yet supported.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-linear-geometry-kernel-breaking-change&quot;&gt;2D and 3D Linear Geometry Kernel (breaking change)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The dangerous implicit conversions between
weighted points and points in the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt; have been
disabled. Constructors offering to build a weighted point from a
point (and reversely) are still requested by the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt;
but must now be marked with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;explicit&lt;/code&gt; specifier.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The removal of implicit conversions between
points and weighted points in the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt; has incidentally
created various minor breaking changes in the following packages: 2D
Alpha Shapes, 2D and 3D Triangulations, and 3D Mesh Generation. See
the full changelog for details.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh&quot;&gt;Surface Mesh&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator &amp;gt;&amp;gt;(std::istream&amp;amp;, Surface_mesh&amp;amp;)&lt;/code&gt; no longer clears the surface mesh.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-parameterization-breaking-change&quot;&gt;Triangulated Surface Mesh Parameterization (breaking change)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The package has been rewritten and can operate
on any model of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableFaceGraph&lt;/code&gt; concept. All previous
parameterization methods are still offered, although with a
different, simpler API. The documentation has been updated and
offers a gentle introduction to the new API. Users who wish to use
the former API must use a version prior to 4.11.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The adapter to add virtual seams is now the
class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Seam_mesh&lt;/code&gt; in the package &lt;em&gt;CGAL and the BGL&lt;/em&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The package has been restructured and most
headers have been moved. In a general manner, users should replace
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/XXX.h&amp;gt;&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/Surface_mesh_parameterization/XXX.h&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Add the &lt;em&gt;As Rigid As Possible Parameterization&lt;/em&gt; method. This
parameterization allows the user to prioritize angle preservation,
shape preservation, or a balance of both.&lt;/li&gt;
    &lt;li&gt;Add the &lt;em&gt;Orbifold Tutte Embedding&lt;/em&gt; method. This parameterization
method allows to parameterize meshes that are topological spheres.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-surface-subdivision-methods-breaking-changes&quot;&gt;3D Surface Subdivision Methods (breaking changes)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The subdivision algorithms now work on any model of a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableFaceGraph&lt;/code&gt;. A new API to the subdivision methods is offered,
which uses optional named parameters to pass the number of
iterations and a vertex property map.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Removed the headers
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/Subdivision_method_3.h&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/Subdivision_mask_3.h&amp;gt;&lt;/code&gt;.
The headers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/Subdivision_method_3/subdivision_methods_3.h&amp;gt;&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/Subdivision_method_3/subdivision_masks_3.h&amp;gt;&lt;/code&gt; should
respectively be used instead.&lt;/li&gt;
    &lt;li&gt;Sqrt3 subdivision can now handle input surfaces with a border.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;scale-space-surface-reconstruction-breaking-change&quot;&gt;Scale-Space Surface Reconstruction (breaking change)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: the API was rewritten to separate the smoothing
and meshing algorithm and making it possible for the user to use
different ones. The default algorithms used are the same as before
this API change, but methods are moved to the classes
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Weighted_PCA_smoother&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alpha_shape_mesher&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Alternative smoothing and meshing methods are provided:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jet_smoother&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Advancing_front_mesher&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-alpha-shapes&quot;&gt;2D Alpha Shapes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Mirrored the concepts of the 2D alpha shape
package with those of the 3D Alpha Shapes package. Consequently, a
new concept, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WeightedAlphaShapeTraits_2&lt;/code&gt;, is introduced to provide
requirements on the traits class for 2D weighted alpha shapes. All
models of the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt; are models of this new concept.&lt;/li&gt;
    &lt;li&gt;The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AlphaShapeTraits_2&lt;/code&gt; now provides requirements on the
traits class for 2D basic alpha shapes, and refines
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DelaunayTriangulationTraits_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;interpolation&quot;&gt;Interpolation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GradientFittingTraits&lt;/code&gt; now
additionally requests a weighted point type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Weighted_point_d&lt;/code&gt; and a
functor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Construct_point_d&lt;/code&gt;. The model
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Interpolation_gradient_fitting_traits_2&lt;/code&gt; has been
appropriately modified to still be a model of the concept
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GradientFittingTraits&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-triangulations&quot;&gt;2D and 3D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Added a new functor requirement,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Construct_point_2&lt;/code&gt;, to the concepts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TriangulationTraits_2&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegularTriangulationTraits_2&lt;/code&gt; and a new functor requirement,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Construct_point_3&lt;/code&gt;, to the concepts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TriangulationTraits_3&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegularTriangulationTraits_3&lt;/code&gt;. All models of the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt;
already provide these functors.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Introduced the concepts
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegularTriangulationVertexBase_2&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegularTriangulationVertexBase_3&lt;/code&gt;. These concepts describe the
requirements on classes meant to represent a vertex of a regular
triangulation. Concepts that previously refined
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TriangulationVertexBase_2&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TriangulationVertexBase_3&lt;/code&gt; but
described in fact a vertex class used in a regular triangulation,
such as the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshVertexBase_3&lt;/code&gt; in the 3D mesh generation
package, now refine the corresponding new regular vertex concept.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Uniformized the point type across all vertex
and cell concepts. The triangulation point type name is now always
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Point&lt;/code&gt;. Note that this does not change the requirements but only
the name: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Point&lt;/code&gt; is still expected to be equal to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Traits::Point_[23]&lt;/code&gt; for basic and Delaunay triangulations or to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Traits::Weighted_point_[23]&lt;/code&gt; for regular triangulations.
Consequently:
      &lt;ul&gt;
        &lt;li&gt;The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegularTriangulationVertexBase_2&lt;/code&gt; now requests a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Point&lt;/code&gt; type (equal to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Traits::Weighted_point_2&lt;/code&gt;)&lt;/li&gt;
        &lt;li&gt;The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegularTriangulationCellBase_3&lt;/code&gt; now requests a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Point&lt;/code&gt; type instead of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Weighted_point&lt;/code&gt; type (but still equal
to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Traits::Weighted_point_3&lt;/code&gt;)&lt;/li&gt;
        &lt;li&gt;The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DelaunayTriangulationCellBase_3&lt;/code&gt; now requests a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Point&lt;/code&gt; type instead of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Point_3&lt;/code&gt; type (but still equal to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Traits::Point_3&lt;/code&gt;).&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Introduced a new concept,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegularTriangulationCellBaseWithWeightedCircumcenter_3&lt;/code&gt;, which
describes the requirements on a cell of a regular triangulation that
caches its circumcenter. The existing class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_cell_base_with_weighted_circumcenter_3&lt;/code&gt; is
the default model of this concept.&lt;/li&gt;
    &lt;li&gt;Added a new 3D traits class,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Robust_weighted_circumcenter_filtered_traits_3&lt;/code&gt; which provides
robust versions of the kernel functors
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Construct_weighted_circumcenter_3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compute_squared_radius_3&lt;/code&gt;, and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compute_squared_radius_smallest_orthogonal_sphere_3&lt;/code&gt;. This class
can be used as traits class in the the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh_3&lt;/code&gt; package to
efficiently yet robustly generate 3D meshes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-periodic-triangulations&quot;&gt;3D Periodic Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added new locate and geometric access functions for 3D periodic
triangulations.&lt;/li&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_Delaunay_triangulation_traits_3&lt;/code&gt; now inherits
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_triangulation_traits_3&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Some geometric access functions in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_triangulation_3&lt;/code&gt; were renamed. The introduction of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_regular_triangulation_3&lt;/code&gt; required to distinguish between
functions such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;segment()&lt;/code&gt; returning a segment of weightless
points, or a segment of weighted points. As a general rule, previous
geometrical access functions will return objects with point type
that of the triangulation (thus, weighted objects when using
weighted triangulations) and functions containing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;construct&lt;/code&gt; in the
name will always return weightless geometrical objects.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3TriangulationTraits_3&lt;/code&gt;
now requests a domain getter: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_domain()&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Introduced a new concept,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegularTriangulationCellBaseWithWeightedCircumcenter_3&lt;/code&gt;, which
describes the requirements on a cell of a regular triangulation that
caches its circumcenter. The existing class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_cell_base_with_weighted_circumcenter_3&lt;/code&gt; is
the default model of this concept.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The type of the surface center in the concept
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshCellBase_3&lt;/code&gt; has been changed from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation::Point&lt;/code&gt; to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TriangulationTraits::Point_3&lt;/code&gt; to reflect that it is a weightless
point.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;invalidate_circumcenter()&lt;/code&gt; of the
concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshCellBase_3&lt;/code&gt; is renamed to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;invalidate_weighted_circumcenter_cache()&lt;/code&gt; and moved to the new
concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegularTriangulationCellBaseWithWeightedCircumcenter_3&lt;/code&gt;,
which the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshCellBase_3&lt;/code&gt; now refines.&lt;/li&gt;
    &lt;li&gt;Added a new type of polyhedral domain with features,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polyhedral_complex_mesh_domain_3&lt;/code&gt;. The domain is defined by a
collection of triangulated surfaces, forming a complex.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;poisson-surface-reconstruction&quot;&gt;Poisson Surface Reconstruction&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A new global function
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::poisson_surface_reconstruction_delaunay()&lt;/code&gt; is provided in
addition to the current class-based API in order to make it easier
to use.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;Point Set Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;New functions to read from and write to LAS/LAZ files (LIDAR
format), with or without taking additional properties into account.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The API of the PLY function to read points with
properties is modified for unification with LAS (see
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_ply_points_with_properties()&lt;/code&gt;). A new function to write
PLY with properties is provided
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_ply_points_with_properties()&lt;/code&gt;).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;spatial-searching&quot;&gt;Spatial Searching&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kd_tree::remove(Point)&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-fast-intersection-and-distance-computation&quot;&gt;3D Fast Intersection and Distance Computation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a template parameter to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_traits&lt;/code&gt; for a property map that
associates a bounding box to a primitive.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library&quot;&gt;CGAL and the Boost Graph Library&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a partial specialization for the class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Linear_cell_complex_for_combinatorial_map&lt;/code&gt; so that it is a
model of the graph concepts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BidirectionalGraph&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EdgeAndVertexListGraph&lt;/code&gt; and of the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableFaceGraph&lt;/code&gt;. This
class can thus now be used in all BGL functions and algorithms.&lt;/li&gt;
    &lt;li&gt;Helper functions to create an icosahedron, a regular prism and a
pyramid have been added.&lt;/li&gt;
    &lt;li&gt;Added class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Face_filtered_graph&lt;/code&gt; that wraps an existing graph
and hide all simplices that are not in the selected connected
components.&lt;/li&gt;
    &lt;li&gt;Added the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Seam_mesh&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Seam_mesh&lt;/code&gt; is a graph
adaptor which allows to create virtual borders when marking edges as
seam edges.&lt;/li&gt;
    &lt;li&gt;Added the functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read_off()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write_off()&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.10.1 released</title>
   <link href="http://www.cgal.org/2017/09/13/cgal-4101/"/>
   <updated>2017-09-13T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2017/09/13/cgal-4101</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.10.1&quot;&gt;Download CGAL-4.10.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.10.1/Manual/index.html&quot;&gt;CGAL-4.10.1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.10.1 is a bug-fix release for &lt;a href=&quot;../../../../2017/05/29/cgal410&quot;&gt;CGAL 4.10&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2017/05/29/cgal410&quot;&gt;CGAL 4.10&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=milestone%3A4.10.1&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL in the Bay Area</title>
   <link href="http://www.cgal.org/2017/08/23/CGAL_in_the_Bay_Area/"/>
   <updated>2017-08-23T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2017/08/23/CGAL_in_the_Bay_Area</id>
   <content type="html">
&lt;p&gt;The CGAL Open Source Project organizes a half-day workshop at Stanford University.
It takes place in Seminar Room  &lt;a href=&quot;https://biox.stanford.edu/about/building-services/room-scheduling/seminar-room-s362&quot;&gt;S362&lt;/a&gt;
on Wednesday 18th of October 2017 from 9am-2pm.&lt;/p&gt;
&lt;p&gt;The room is located in the seminar area on the 3rd floor of the South wing of the Clark Center, accessible by going through Peet's Coffee.&lt;/p&gt;

&lt;p&gt;As we have limited space, we would like to ask you to register on
&lt;a href=&quot;https://fr.surveymonkey.com/r/6D92CDQ&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;9am - 10am CGAL by Example&lt;/h3&gt;

&lt;p&gt;An overview of the algorithms and data structures of CGAL, basically through demos. No theory, no detailed explanations
of the API. A word about dual licensing (GPL/commercial).&lt;/p&gt;

&lt;h3&gt;10:15am - 11:15am In Depth Session I&lt;/h3&gt;
&lt;p&gt;Polygon Mesh Processing: simplification, remeshing, skeletonization, segmentation, Boolean operations, hole filling, slicing, AABB tree, etc.&lt;/p&gt;

&lt;h3&gt;11:30am - 12:30am In Depth Session II&lt;/h3&gt;
&lt;p&gt;Mesh Generation: surface and tetrahedral volume mesh generation for input coming from voxel data, implicit functions, polyhedral surfaces, Nurbs patches. Periodic mesh generation. &lt;/p&gt;

&lt;h3&gt;12:45am - 1pm How to Contribute&lt;/h3&gt;
&lt;p&gt;Organization of  the CGAL project. The benefits for contributors. What happens with your intellectual property?&lt;/p&gt;

&lt;h3&gt;1pm- 2pm Discussion With Potential Contributors&lt;/h3&gt;
&lt;p&gt;Participants present what research result/prototype/mature software they would like to contribute.&lt;/p&gt;

&lt;h3&gt;Parking Instructions&lt;/h3&gt;

&lt;p&gt;See the &lt;a href=&quot;https://biox.stanford.edu/about/clark-center/map-directions&quot;&gt;map&lt;/a&gt;.
Please use the Via Ortega garage. (Roth Way Garage is closer, but it has a daily parking limit of 4 hours.)&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.11 beta1 released</title>
   <link href="http://www.cgal.org/2017/08/01/cgal411-beta1/"/>
   <updated>2017-08-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2017/08/01/cgal411-beta1</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.11-beta1&quot;&gt;Download CGAL-4.11-beta1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.11/Manual/index.html&quot;&gt;CGAL-4.11-beta1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.11 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2017/05/29/cgal410&quot;&gt;CGAL 4.10&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;d-periodic-regular-triangulations-new-feature&quot;&gt;3D Periodic Regular Triangulations (new feature)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_regular_triangulation_3&lt;/code&gt;, which provides
functionality for 3D periodic weighted Delaunay triangulations. The
construction is fully dynamic: it provides both point insertion and
vertex removal.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-regular-triangulations-new-feature&quot;&gt;dD Regular Triangulations (new feature)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation&lt;/code&gt;, which provides
functionality for dD weighted Delaunay triangulations. Note that the
removal of points is not yet supported.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-linear-geometry-kernel-breaking-change&quot;&gt;2D and 3D Linear Geometry Kernel (breaking change)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The dangerous implicit conversions between
weighted points and points in the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt; have been
disabled. Constructors offering to build a weighted point from a
point (and reversely) are still requested by the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt;
but must now be marked with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;explicit&lt;/code&gt; specifier.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The removal of implicit conversions between
points and weighted points in the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt; has incidentally
created various minor breaking changes in the following packages: 2D
Alpha Shapes, 2D and 3D Triangulations, and 3D Mesh Generation. See
the full changelog for details.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-parameterization-breaking-change&quot;&gt;Triangulated Surface Mesh Parameterization (breaking change)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The package has been rewritten and can operate
on any model of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableFaceGraph&lt;/code&gt; concept. All previous
parameterization methods are still offered, although with a
different, simpler API. The documentation has been updated and
offers a gentle introduction to the new API. Users who wish to use
the former API must use a version prior to 4.11.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The adapter to add virtual seams is now the
class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Seam_mesh&lt;/code&gt; in the package &lt;em&gt;CGAL and the BGL&lt;/em&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The package has been restructured and most
headers have been moved. In a general manner, users should replace
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/XXX.h&amp;gt;&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/Surface_mesh_parameterization/XXX.h&amp;gt;&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Add the &lt;em&gt;As Rigid As Possible Parameterization&lt;/em&gt; method. This
parameterization allows the user to prioritize angle preservation,
shape preservation, or a balance of both.&lt;/li&gt;
    &lt;li&gt;Add the &lt;em&gt;Orbifold Tutte Embedding&lt;/em&gt; method. This parameterization
method allows to parameterize meshes that are topological spheres.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-surface-subdivision-methods-breaking-changes&quot;&gt;3D Surface Subdivision Methods (breaking changes)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The subdivision algorithms now work on any model of a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableFaceGraph&lt;/code&gt;. A new API to the subdivision methods is offered,
which uses optional named parameters to pass the number of
iterations and a vertex property map.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Removed the headers
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/Subdivision_method_3.h&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/Subdivision_mask_3.h&amp;gt;&lt;/code&gt;.
The headers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/Subdivision_method_3/subdivision_methods_3.h&amp;gt;&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/Subdivision_method_3/subdivision_masks_3.h&amp;gt;&lt;/code&gt; should
respectively be used instead.&lt;/li&gt;
    &lt;li&gt;Sqrt3 subdivision can now handle input surfaces with a border.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;scale-space-surface-reconstruction-breaking-change&quot;&gt;Scale-Space Surface Reconstruction (breaking change)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: the API was rewritten to separate the smoothing
and meshing algorithm and making it possible for the user to use
different ones. The default algorithms used are the same as before
this API change, but methods are moved to the classes
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Weighted_PCA_smoother&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alpha_shape_mesher&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Alternative smoothing and meshing methods are provided:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jet_smoother&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Advancing_front_mesher&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-alpha-shapes&quot;&gt;2D Alpha Shapes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Mirrored the concepts of the 2D alpha shape
package with those of the 3D Alpha Shapes package. Consequently, a
new concept, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WeightedAlphaShapeTraits_2&lt;/code&gt;, is introduced to provide
requirements on the traits class for 2D weighted alpha shapes. All
models of the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt; are models of this new concept.&lt;/li&gt;
    &lt;li&gt;The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AlphaShapeTraits_2&lt;/code&gt; now provides requirements on the
traits class for 2D basic alpha shapes, and refines
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DelaunayTriangulationTraits_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-triangulations&quot;&gt;2D and 3D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Added a new functor requirement,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Construct_point_2&lt;/code&gt;, to the concepts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TriangulationTraits_2&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegularTriangulationTraits_2&lt;/code&gt; and a new functor requirement,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Construct_point_3&lt;/code&gt;, to the concepts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TriangulationTraits_3&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegularTriangulationTraits_3&lt;/code&gt;. All models of the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt;
already provide these functors.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Introduced the concepts
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegularTriangulationVertexBase_2&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegularTriangulationVertexBase_3&lt;/code&gt;. These concepts describe the
requirements on classes meant to represent a vertex of a regular
triangulation. Concepts that previously refined
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TriangulationVertexBase_2&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TriangulationVertexBase_3&lt;/code&gt; but
described in fact a vertex class used in a regular triangulation,
such as the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshVertexBase_3&lt;/code&gt; in the 3D mesh generation
package, now refine the corresponding new regular vertex concept.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Uniformized the point type across all vertex
and cell concepts. The triangulation point type name is now always
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Point&lt;/code&gt;. Note that this does not change the requirements but only
the name: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Point&lt;/code&gt; is still expected to be equal to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Traits::Point_[23]&lt;/code&gt; for basic and Delaunay triangulations or to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Traits::Weighted_point_[23]&lt;/code&gt; for regular triangulations.
Consequently:
      &lt;ul&gt;
        &lt;li&gt;The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegularTriangulationVertexBase_2&lt;/code&gt; now requests a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Point&lt;/code&gt; type (equal to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Traits::Weighted_point_2&lt;/code&gt;)&lt;/li&gt;
        &lt;li&gt;The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegularTriangulationCellBase_3&lt;/code&gt; now requests a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Point&lt;/code&gt; type instead of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Weighted_point&lt;/code&gt; type (but still equal
to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Traits::Weighted_point_3&lt;/code&gt;)&lt;/li&gt;
        &lt;li&gt;The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DelaunayTriangulationCellBase_3&lt;/code&gt; now requests a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Point&lt;/code&gt; type instead of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Point_3&lt;/code&gt; type (but still equal to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Traits::Point_3&lt;/code&gt;).&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Introduced a new concept,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegularTriangulationCellBaseWithWeightedCircumcenter_3&lt;/code&gt;, which
describes the requirements on a cell of a regular triangulation that
caches its circumcenter. The existing class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_cell_base_with_weighted_circumcenter_3&lt;/code&gt; is
the default model of this concept.&lt;/li&gt;
    &lt;li&gt;Added a new 3D traits class,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Robust_weighted_circumcenter_filtered_traits_3&lt;/code&gt; which provides
robust versions of the kernel functors
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Construct_weighted_circumcenter_3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compute_squared_radius_3&lt;/code&gt;, and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compute_squared_radius_smallest_orthogonal_sphere_3&lt;/code&gt;. This class
can be used as traits class in the the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh_3&lt;/code&gt; package to
efficiently yet robustly generate 3D meshes.&lt;/li&gt;
    &lt;li&gt;Add a new type of polyhedral domain with features,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polyhedral_complex_mesh_domain_3&lt;/code&gt;. The domain is defined by a
collection of triangulated surfaces, forming a complex.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-periodic-triangulations&quot;&gt;3D Periodic Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added new locate and geometric access functions for 3D periodic
triangulations.&lt;/li&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_Delaunay_triangulation_traits_3&lt;/code&gt; now inherits
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_triangulation_traits_3&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Some geometric access functions in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_triangulation_3&lt;/code&gt; were renamed. The introduction of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_regular_triangulation_3&lt;/code&gt; required to distinguish between
functions such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;segment()&lt;/code&gt; returning a segment of weightless
points, or a segment of weighted points. As a general rule, previous
geometrical access functions will return objects with point type
that of the triangulation (thus, weighted objects when using
weighted triangulations) and functions containing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;construct&lt;/code&gt; in the
name will always return weightless geometrical objects.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3TriangulationTraits_3&lt;/code&gt;
now requests a domain getter: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_domain()&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Introduced a new concept,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegularTriangulationCellBaseWithWeightedCircumcenter_3&lt;/code&gt;, which
describes the requirements on a cell of a regular triangulation that
caches its circumcenter. The existing class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_cell_base_with_weighted_circumcenter_3&lt;/code&gt; is
the default model of this concept.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The type of the surface center in the concept
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshCellBase_3&lt;/code&gt; has been changed from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation::Point&lt;/code&gt; to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TriangulationTraits::Point_3&lt;/code&gt; to reflect that it is a weightless
point.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;invalidate_circumcenter()&lt;/code&gt; of the
concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshCellBase_3&lt;/code&gt; is renamed to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;invalidate_weighted_circumcenter_cache()&lt;/code&gt; and moved to the new
concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegularTriangulationCellBaseWithWeightedCircumcenter_3&lt;/code&gt;,
which the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshCellBase_3&lt;/code&gt; now refines.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;poisson-surface-reconstruction&quot;&gt;Poisson Surface Reconstruction&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A new global function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::poisson_surface_reconstruction_delaunay()&lt;/code&gt; is provided in
addition to the current class-based API in order to make it easier
to use.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;Point Set Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;New functions to read from and write to LAS/LAZ files (LIDAR
format), with or without taking additional properties into account.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The API of the PLY function to read points with
properties is modified for unification with LAS (see
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_ply_points_with_properties()&lt;/code&gt;). A new function to write
PLY with properties is provided
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_ply_points_with_properties()&lt;/code&gt;).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;spatial-searching&quot;&gt;Spatial Searching&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kd_tree::remove(Point)&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library&quot;&gt;CGAL and the Boost Graph Library&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a partial specialization for the class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Linear_cell_complex_for_combinatorial_map&lt;/code&gt; so that it is a
model of the graph concepts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BidirectionalGraph&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;EdgeAndVertexListGraph&lt;/code&gt; and of the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableFaceGraph&lt;/code&gt;. This
class can thus now be used in all BGL functions and algorithms.&lt;/li&gt;
    &lt;li&gt;Helper functions to create an icosahedron, a regular prism and a
pyramid have been added.&lt;/li&gt;
    &lt;li&gt;Added class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Face_filtered_graph&lt;/code&gt; that wraps an existing graph
and hide all simplices that are not in the selected connected
components.&lt;/li&gt;
    &lt;li&gt;Added the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Seam_mesh&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Seam_mesh&lt;/code&gt; is a graph
adaptor which allows to create virtual borders when marking edges as
seam edges.&lt;/li&gt;
    &lt;li&gt;Added the functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read_off()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write_off()&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ SIGGRAPH 2017</title>
   <link href="http://www.cgal.org/news/2017/07/30/siggraph-2017/"/>
   <updated>2017-07-30T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2017/07/30/siggraph-2017</id>
   <content type="html">
&lt;p&gt;You have an implementation of a geometric algorithm that you would like to contribute?
You want us to implement an algorithm that you learned about in the technical paper sessions?
You want to know more about the open source and the commercial licensing options for CGAL?
You want to present the problem you have to solve, in order to figure out if CGAL might be helpful for you.&lt;/p&gt;

&lt;p&gt;Visit the CGAL Project on Booth No. 1015 at the exhibition of &lt;a href=&quot;http://s2017.siggraph.org/&quot;&gt;SIGGRAPH 2017&lt;/a&gt;,
Los Angeles USA, 30 July -3 August 2017.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>CGAL 4.10 released</title>
   <link href="http://www.cgal.org/2017/05/29/cgal410/"/>
   <updated>2017-05-29T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2017/05/29/cgal410</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.10&quot;&gt;Download CGAL-4.10&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.10/Manual/index.html&quot;&gt;CGAL-4.10 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.10 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2016/09/19/cgal-49&quot;&gt;CGAL 4.9&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The minimum required version of CMake is now 3.1. All CMake versions
up to 3.7 are supported.&lt;/li&gt;
    &lt;li&gt;The compilation of some demo may require a C++11 compiler. The CGAL
library itself still support C++03 compilers.&lt;/li&gt;
    &lt;li&gt;The shell script &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cgal_create_cmake_script&lt;/code&gt; now enables C++14 by
default.&lt;/li&gt;
    &lt;li&gt;A new mechanism to check which packages of CGAL are used have been
added. It is particularly interesting for commercial users to ensure
they have a valid commercial license for the packages they used.
This can also be used to make sure only LGPL header files are used.&lt;/li&gt;
    &lt;li&gt;Because of a bug in the g++ compiler about the C++11 keyword
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thread_local&lt;/code&gt;, the CGAL_Core library now always requires
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Boost.Thread&lt;/code&gt; if the g++ compiler is used.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;generalized-maps-new-package&quot;&gt;Generalized Maps (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package implements Generalized Maps in d dimensions. A
generalized map is a data structure enabling to represent an
orientable or non orientable subdivided object by describing all the
cells of the subdivision (for example in 3D vertices, edges, faces,
volumes) and all the incidence and adjacency relationships between
these cells. This data structure is the generalization of the
combinatorial maps in order to be able to represent non orientable
objects.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-point-set-new-package&quot;&gt;3D Point Set (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package provides a flexible data structure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Point_set_3&lt;/code&gt;
that allows the user to easily handle point sets with an arbitrary
number of attributes (such as normal vectors, colors, labeling,
etc.).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;combinatorial-maps-and-linear-cell-complex&quot;&gt;Combinatorial Maps and Linear cell complex&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: the requirements of the item class used to
customize a combinatorial map and a linear cell complex changed.
Instead of defining the type of darts used, you have to define the
information you want to add in each dart. You can define the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_CMAP_DART_DEPRECATED&lt;/code&gt; macro to keep the old behavior.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-shortest-paths&quot;&gt;Triangulated Surface Mesh Shortest Paths&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Rename all functions, types, and enums using
&lt;em&gt;barycentric coordinate&lt;/em&gt; to &lt;em&gt;barycentric coordinates&lt;/em&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Addition of a free function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reserve()&lt;/code&gt; in the
concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableFaceGraph&lt;/code&gt;. Models provided by CGAL have been
updated.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-linear-geometry-kernel&quot;&gt;2D and 3D Linear Geometry Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compare_slopes()&lt;/code&gt; was renamed
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compare_slope&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Added a 2D and 3D weighted point class and predicates and
constructions.&lt;/li&gt;
    &lt;li&gt;Added functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l_infinity_distance()&lt;/code&gt; for 2D and 3D.&lt;/li&gt;
    &lt;li&gt;Added a new functor in CGAL Kernel concept to compare the slope of two
3D segments. All models of the Kernel concept now provide the
functor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compare_slope_3&lt;/code&gt;, and the free function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compare_slope()&lt;/code&gt;
is available.&lt;/li&gt;
    &lt;li&gt;Added an operator in CGAL Kernel concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Angle_3&lt;/code&gt; to qualify the
angle between the normal of the triangle given by three points, and
a vector.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-convex-hull&quot;&gt;3D Convex Hull&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The convex hull function can also produce a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Surface_mesh&lt;/code&gt;, and
generally speaking any model of the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableFaceGraph&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convex_hull_3_to_polyhedron_3()&lt;/code&gt; is deprecated and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convex_hull_3_to_face_graph.h&lt;/code&gt; should be used instead.&lt;/li&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Convex_hull_traits_3&lt;/code&gt; now documents a nested type
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polygon_mesh&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polyhedron_3&lt;/code&gt;. The other nested type is
kept for backward compatibility.&lt;/li&gt;
    &lt;li&gt;Removed the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::convex_hull_incremental_3()&lt;/code&gt; deprecated
since CGAL 4.6.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-boolean-operations-on-nef-polyhedra&quot;&gt;3D Boolean Operations on Nef Polyhedra&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a new constructor from a face graph model&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;linear-cell-complex&quot;&gt;Linear cell complex&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Deprecated class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Linear_cell_complex&lt;/code&gt; which is now renamed
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Linear_cell_complex_for_combinatorial_map_dart&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulation-data-structure&quot;&gt;2D Triangulation data structure&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_in_hole&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;2D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Removed the arbitrary dimensional weighted
point class. Users must use a version prior to 4.9 if they need this
class.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;:The number type of weighted points in regular
triangulations is no longer a template parameter but the field type
of the geometric traits class. Users who need this feature must use
a version prior to 4.9&lt;/li&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_filtered_traits_2&lt;/code&gt; deprecated since
CGAL 3.6 has been removed.&lt;/li&gt;
    &lt;li&gt;Deprecated the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_euclidean_traits_2&lt;/code&gt;, as
the weighted point and the function objects for weighted points are
part of the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt;/&lt;/li&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_2&lt;/code&gt; can take a kernel as template
argument, that is one no longer has to use
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_euclidea_traits_2&lt;/code&gt;, although this still
works.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations-1&quot;&gt;3D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The number type of weighted points in regular
triangulations is no longer a template parameter but the field type
of the geometric traits class. Users who need this feature must use
a version prior to 4.9.&lt;/li&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_filtered_traits_3&lt;/code&gt; deprecated since
CGAL 3.6 has been removed.&lt;/li&gt;
    &lt;li&gt;Deprecated the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_euclidean_traits_3&lt;/code&gt;, as
the weighted point and the function objects for weighted points are
part of the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt;/&lt;/li&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_3&lt;/code&gt; can take a kernel as template
argument, that is one no longer has to use
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_euclidean_traits_3&lt;/code&gt;, although this still
works.&lt;/li&gt;
    &lt;li&gt;Added function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;link_to_face_graph()&lt;/code&gt; to copy the set of faces
incident to a vertex into a model of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceGraph&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The constructor
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polyhedral_mesh_domain_with_features_3(std::string)&lt;/code&gt; is
deprecated.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;Polygon Mesh Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added fast and robust corefinement and Boolean operation functions for
triangulated surface meshes:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::corefine_and_compute_union()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::corefine_and_compute_difference()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::corefine_and_compute_intersection()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::corefine()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::does_bound_a_volume()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::surface_intersection()&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Added functions to compute approximated Hausdorff distances between
two meshes, a mesh and a point set, or a point set and a mesh:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sample_triangle_mesh()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;approximated_Hausdorff_distance()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;approximated_symmetric_Hausdorff_distance()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max_distance_to_triangle_mesh()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max_distance_to_point_set()&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::bbox_3()&lt;/code&gt; has been
renamed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::bbox()&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;Point Set Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::remove_outliers()&lt;/code&gt; has an additional parameter based
on a distance threshold to make it easier and more intuitive to use.&lt;/li&gt;
    &lt;li&gt;New functions for automatic scale estimations: either a global scale
or multiple local scales can be estimated for both 2D and 3D point
sets based on the assumption that they sample a curve in 2D or a
surface in 3D.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl-1&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::convert_nef_polyhedron_to_polygon_mesh()&lt;/code&gt; to
convert a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nef_polyhedron_3&lt;/code&gt; to any model of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableFaceGraph&lt;/code&gt;
concept.&lt;/li&gt;
    &lt;li&gt;Added class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Graph_with_descriptor_with_graph&lt;/code&gt; that wraps an
existing graph and provides a reference to the said graph to all of
its descriptors.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cone-based-spanners&quot;&gt;Cone Based Spanners&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a parameter to compute half Tao graph and half Theta graph.&lt;/li&gt;
    &lt;li&gt;Added an ipelet for this package.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;geometric-object-generators&quot;&gt;Geometric Object Generators&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the following point random generators:
      &lt;ul&gt;
        &lt;li&gt;in a 3D triangle mesh model of the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceListGraph&lt;/code&gt;
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random_points_in_triangle_mesh_3&lt;/code&gt;),&lt;/li&gt;
        &lt;li&gt;on the boundary of a tetrahedral mesh
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random_points_in_tetrahedral_mesh_boundary_3&lt;/code&gt;),&lt;/li&gt;
        &lt;li&gt;in a tetrahedral mesh
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random_points_in_tetrahedral_mesh_3&lt;/code&gt;),&lt;/li&gt;
        &lt;li&gt;in a 2D triangle mesh
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random_points_in_triangle_mesh_2&lt;/code&gt;),&lt;/li&gt;
        &lt;li&gt;in a range of 2D or 3D triangles
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random_points_in_triangles_3&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random_points_in_triangles_2&lt;/code&gt;).&lt;/li&gt;
        &lt;li&gt;on a 3D segment (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random_points_on_segment_3&lt;/code&gt;).&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL at the College de France</title>
   <link href="http://www.cgal.org/news/2017/04/26/cgal-college-de-france/"/>
   <updated>2017-04-26T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2017/04/26/cgal-college-de-france</id>
   <content type="html">
&lt;p&gt;CGAL will be presented in the Lectures and Seminars
series “Computational Geometry: Data, Models and Programs”
at the Collège de France, where
&lt;a href=&quot;https://www-sop.inria.fr/members/Jean-Daniel.Boissonnat/&quot;&gt;Jean-Daniel Boissonnat&lt;/a&gt;
from &lt;a href=&quot;https://www.inria.fr/centre/sophia/&quot;&gt;INRIA&lt;/a&gt; is the Annual Chair of Informatics and Computational Sciences (2016-2017).&lt;/p&gt;

&lt;p&gt;For more information see the
&lt;a href=&quot;https://www.college-de-france.fr/site/en-jean-daniel-boissonnat/seminar-2017-04-26-18h00.htm&quot;&gt;program&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.10 beta1 released</title>
   <link href="http://www.cgal.org/2017/04/20/cgal410-beta1/"/>
   <updated>2017-04-20T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2017/04/20/cgal410-beta1</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.10-beta1&quot;&gt;Download CGAL-4.10-beta1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.10/Manual/index.html&quot;&gt;CGAL-4.10-beta1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.10 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2016/09/19/cgal-49&quot;&gt;CGAL 4.9&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The minimum required version of CMake is now 3.1. All CMake versions
up to 3.7 are supported.&lt;/li&gt;
    &lt;li&gt;The compilation of some demo may require a C++11 compiler. The CGAL
library itself still support C++03 compilers.&lt;/li&gt;
    &lt;li&gt;The shell script &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cgal_create_cmake_script&lt;/code&gt; now enables C++14 by
default.&lt;/li&gt;
    &lt;li&gt;A new mechanism to check which packages of CGAL are used have been
added. It is particularly interesting for commercial users to ensure
they have a valid commercial license for the packages they used.
This can also be used to make sure only LGPL header files are used.&lt;/li&gt;
    &lt;li&gt;Because of a bug in the g++ compiler about the C++11 keyword
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thread_local&lt;/code&gt;, the CGAL_Core library now always requires
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Boost.Thread&lt;/code&gt; if the g++ compiler is used.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;generalized-maps-new-package&quot;&gt;Generalized Maps (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package implements Generalized Maps in d dimensions. A
generalized map is a data structure enabling to represent an
orientable or non orientable subdivided object by describing all the
cells of the subdivision (for example in 3D vertices, edges, faces,
volumes) and all the incidence and adjacency relationships between
these cells. This data structure is the generalization of the
combinatorial maps in order to be able to represent non orientable
objects.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-point-set-new-package&quot;&gt;3D Point Set (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package provides a flexible data structure &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Point_set_3&lt;/code&gt;
that allows the user to easily handle point sets with an arbitrary
number of attributes (such as normal vectors, colors, labeling,
etc.).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;combinatorial-maps-and-linear-cell-complex&quot;&gt;Combinatorial Maps and Linear cell complex&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: the requirements of the item class used to
customize a combinatorial map and a linear cell complex changed.
Instead of defining the type of darts used, you have to define the
information you want to add in each dart. You can define the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_CMAP_DART_DEPRECATED&lt;/code&gt; macro to keep the old behavior.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-shortest-paths&quot;&gt;Triangulated Surface Mesh Shortest Paths&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Rename all functions, types, and enums using
&lt;em&gt;barycentric coordinate&lt;/em&gt; to &lt;em&gt;barycentric coordinates&lt;/em&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Addition of a free function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reserve()&lt;/code&gt; in the
concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableFaceGraph&lt;/code&gt;. Models provided by CGAL have been
updated.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-linear-geometry-kernel&quot;&gt;2D and 3D Linear Geometry Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a 2D and 3D weighted point class and predicates and
constructions.&lt;/li&gt;
    &lt;li&gt;Added functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;l_infinity_distance()&lt;/code&gt; for 2D and 3D.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-convex-hull&quot;&gt;3D Convex Hull&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The convex hull function can also produce a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Surface_mesh&lt;/code&gt;, and
generally speaking any model of the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableFaceGraph&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convex_hull_3_to_polyhedron_3()&lt;/code&gt; is deprecated and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convex_hull_3_to_face_graph.h&lt;/code&gt; should be used instead.&lt;/li&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Convex_hull_traits_3&lt;/code&gt; now documents a nested type
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polygon_mesh&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polyhedron_3&lt;/code&gt;. The other nested type is
kept for backward compatibility.&lt;/li&gt;
    &lt;li&gt;Removed the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::convex_hull_incremental_3()&lt;/code&gt; deprecated
since CGAL 4.6.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-boolean-operations-on-nef-polyhedra&quot;&gt;3D Boolean Operations on Nef Polyhedra&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a new constructor from a face graph model&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;linear-cell-complex&quot;&gt;Linear cell complex&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Deprecated class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Linear_cell_complex&lt;/code&gt; which is now renamed
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Linear_cell_complex_for_combinatorial_map_dart&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulation-data-structure&quot;&gt;2D Triangulation data structure&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_in_hole&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;2D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Removed the arbitrary dimensional weighted
point class. Users must use a version prior to 4.9 if they need this
class.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;:The number type of weighted points in regular
triangulations is no longer a template parameter but the field type
of the geometric traits class. Users who need this feature must use
a version prior to 4.9&lt;/li&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_filtered_traits_2&lt;/code&gt; deprecated since
CGAL 3.6 has been removed.&lt;/li&gt;
    &lt;li&gt;Deprecated the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_euclidean_traits_2&lt;/code&gt;, as
the weighted point and the function objects for weighted points are
part of the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt;/&lt;/li&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_2&lt;/code&gt; can take a kernel as template
argument, that is one no longer has to use
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_euclidea_traits_2&lt;/code&gt;, although this still
works.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations-1&quot;&gt;3D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: The number type of weighted points in regular
triangulations is no longer a template parameter but the field type
of the geometric traits class. Users who need this feature must use
a version prior to 4.9.&lt;/li&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_filtered_traits_3&lt;/code&gt; deprecated since
CGAL 3.6 has been removed.&lt;/li&gt;
    &lt;li&gt;Deprecated the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_euclidean_traits_3&lt;/code&gt;, as
the weighted point and the function objects for weighted points are
part of the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel&lt;/code&gt;/&lt;/li&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_3&lt;/code&gt; can take a kernel as template
argument, that is one no longer has to use
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_euclidean_traits_3&lt;/code&gt;, although this still
works.&lt;/li&gt;
    &lt;li&gt;Added function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;link_to_face_graph()&lt;/code&gt; to copy the set of faces
incident to a vertex into a model of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceGraph&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The constructor
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polyhedral_mesh_domain_with_features_3(std::string)&lt;/code&gt; is
deprecated.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;Polygon Mesh Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added fast and robust corefinement and Boolean operation functions for
triangulated surface meshes:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::corefine_and_compute_union()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::corefine_and_compute_difference()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::corefine_and_compute_intersection()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::corefine()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::does_bound_a_volume()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::surface_intersection()&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Added functions to compute approximated Hausdorff distances between
two meshes, a mesh and a point set, or a point set and a mesh:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sample_triangle_mesh()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;approximated_Hausdorff_distance()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;approximated_symmetric_Hausdorff_distance()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max_distance_to_triangle_mesh()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max_distance_to_point_set()&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::bbox_3()&lt;/code&gt; has been
renamed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::bbox()&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;Point Set Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::remove_outliers()&lt;/code&gt; has an additional parameter based
on a distance threshold to make it easier and more intuitive to use.&lt;/li&gt;
    &lt;li&gt;New functions for automatic scale estimations: either a global scale
or multiple local scales can be estimated for both 2D and 3D point
sets based on the assumption that they sample a curve in 2D or a
surface in 3D.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl-1&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::convert_nef_polyhedron_to_polygon_mesh()&lt;/code&gt; to
convert a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nef_polyhedron_3&lt;/code&gt; to any model of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MutableFaceGraph&lt;/code&gt;
concept.&lt;/li&gt;
    &lt;li&gt;Added class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Graph_with_descriptor_with_graph&lt;/code&gt; that wraps an
existing graph and provides a reference to the said graph to all of
its descriptors.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cone-based-spanners&quot;&gt;Cone Based Spanners&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a parameter to compute half Tao graph and half Theta graph.&lt;/li&gt;
    &lt;li&gt;Added an ipelet for this package.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;geometric-object-generators&quot;&gt;Geometric Object Generators&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the following point random generators:
      &lt;ul&gt;
        &lt;li&gt;in a 3D triangle mesh model of the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceListGraph&lt;/code&gt;
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random_points_in_triangle_mesh_3&lt;/code&gt;),&lt;/li&gt;
        &lt;li&gt;on the boundary of a tetrahedral mesh
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random_points_in_tetrahedral_mesh_boundary_3&lt;/code&gt;),&lt;/li&gt;
        &lt;li&gt;in a tetrahedral mesh
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random_points_in_tetrahedral_mesh_3&lt;/code&gt;),&lt;/li&gt;
        &lt;li&gt;in a 2D triangle mesh
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random_points_in_triangle_mesh_2&lt;/code&gt;),&lt;/li&gt;
        &lt;li&gt;in a range of 2D or 3D triangles
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random_points_in_triangles_3&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random_points_in_triangles_2&lt;/code&gt;).&lt;/li&gt;
        &lt;li&gt;on a 3D segment (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random_points_on_segment_3&lt;/code&gt;).&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.9.1 released</title>
   <link href="http://www.cgal.org/2017/04/12/cgal-491/"/>
   <updated>2017-04-12T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2017/04/12/cgal-491</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.9.1&quot;&gt;Download CGAL-4.9.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.9.1/Manual/index.html&quot;&gt;CGAL-4.9.1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.9.1 is a bug-fix release for &lt;a href=&quot;../../../../2016/09/19/cgal-49&quot;&gt;CGAL 4.9&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2016/09/19/cgal-49&quot;&gt;CGAL 4.9&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=milestone%3A4.9.1&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL User Portrait: Swarowski and the Ivanka Diagram</title>
   <link href="http://www.cgal.org/news/2017/04/01/Swarowski/"/>
   <updated>2017-04-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2017/04/01/Swarowski</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;http://www.swarowski.com/&quot;&gt;Swarowski&lt;/a&gt; designs
and manufactures the world's most beautiful jewelry for the
most beautiful people.&lt;/p&gt;

&lt;p&gt;When Kmart, Sears, and Nordstrom decided to evict Ivanka Trump branded 
jewelry from their U.S. online stores, Swarowski seized the opportunity
and asked Ms. Trump to design exclusively for Swarowski for the next four 
years.&lt;/p&gt;

&lt;p&gt;The upcoming Ivanka Trump jewelry collection uses quite disruptive
technology, namely (a) 3D printing which is a challenge as the material
used is gold powder, (b) &lt;a href=&quot;https://www.rhino3d.com/gallery/4&quot;&gt;Rhino&lt;/a&gt; as a
design tool, and (c) Rhino plugins based on CGAL multiplicatively weighted
Voronoi diagrams (also called Apollonius graph), as well as
the CGAL Hilbert sort algorithm for producing space filling
curves.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/april2017.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Left: Voronoi ring  Right: Space filling ear ring&lt;/small&gt;&lt;/p&gt;

&lt;h3&gt;A Unified Naming Scheme&lt;/h3&gt;
&lt;p&gt;Laure N.T. Rhino, the chief software architect at McNeel  who gave 
this most wonderful design software its name, contacted the CGAL Editorial 
Board, asking if it wouldn't be possible to rename the  &lt;i&gt;multiplicatively 
weighted Voronoi diagrams&lt;/i&gt; to &lt;i&gt;Ivanka Diagram&lt;/i&gt;, so that it 
has the same name as the plugin they produced exclusively for Swarowski. &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&quot;With the CGAL Multiplicatively weighted Voronoi diagram  as a key routine 
of the &lt;em&gt;Ivanka&lt;/em&gt; plugin, astonishing pieces can be designed at a fraction 
of the cost and time of traditional design methods.  It enables our designers 
to push the boundaries of how jewelery can look like in the 21st century&quot;&lt;/p&gt;

 &lt;p&gt;&lt;small&gt;Sebastien L.O. Riot, Chief Technologist at Swarowki&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;According to Swarowski and McNeel, we would do them a favor if the
collection, the tool, as well as the CGAL component had the same name.
This is somehow understandable, if we think about the naming mess 
of Visual Studio 2013, sitting in the directory Microsoft Visual Studio 12.0,
and having the version number MSC_VER = 18 in case you want to #if it
in your C++ code.&lt;/p&gt;

&lt;h3&gt;Your Opinon is Important for Us &lt;/h3&gt;

&lt;p&gt;Before making this move, we would like to gather feedback from 
the CGAL User Community, as first of all we are a software development
project run by developers for developers.&lt;/p&gt;

&lt;p&gt;As the C++ programming language does only allow templated typedefs starting
with C++11, we are
reluctant to break backward compatibility, by just renaming the class 
&lt;i&gt;CGAL::Multiplicatively_weighted_voronoi_diagram_3&lt;/i&gt; to &lt;i&gt;Ivanka_diagram&lt;/i&gt;,
but there are maybe even non-technical issues we should take into account,
so maybe you can help us to add items to our pro and con list which
will be the base for the next Editorial Board meeting co-located with
&lt;a href=&quot;http://geometry.cs.ucl.ac.uk/SGP2017/&quot;&gt;SGP 2017&lt;/a&gt; in London.&lt;/p&gt;

&lt;h2&gt; Comments&lt;/h2&gt;
&lt;div class=&quot;container&quot;&gt;
  &lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-sm-8&quot;&gt;
      &lt;div class=&quot;post-comments&quot;&gt;
        &lt;div class=&quot;comment-wrapper product-detail-info&quot;&gt;
          It is just a query replace all, and a serious developer has
          derived her own class anyways, so renaming is not really an issue...
        &lt;/div&gt;&lt;br /&gt;
        &lt;div class=&quot;comment-wrapper product-detail-info&quot;&gt;
          Don't do this!! You know who profits from viral marketing!
        &lt;/div&gt;&lt;br /&gt;
        &lt;div class=&quot;comment-wrapper product-detail-info&quot;&gt;
          Open Source projects such as CGAL must stay politically neutral.
        &lt;/div&gt;&lt;br /&gt;
        &lt;div class=&quot;comment-wrapper product-detail-info&quot;&gt;
          It must be an obsession of some people to tag things with their name:
          Obamacare, Ivanka diagram,...
          I am shocked to hear where the name of the Rhino software comes from!
        &lt;/div&gt;&lt;br /&gt;
        &lt;div class=&quot;comment-wrapper product-detail-info&quot;&gt;
          As software developers tend towards the Democrats, this is not a clever move.
        &lt;/div&gt;&lt;br /&gt;
        &lt;div class=&quot;comment-wrapper product-detail-info&quot;&gt;
          I appreciate, because you help to make America great again!!
        &lt;/div&gt;&lt;br /&gt;
        &lt;div class=&quot;comment-wrapper product-detail-info&quot;&gt;
          You risk not to pass immigration when you fly into LAX for the next SIGGRAPH...
        &lt;/div&gt;&lt;br /&gt;
        &lt;div class=&quot;comment-wrapper product-detail-info&quot;&gt;
          In 1000 years, educated people will still remember Apollonius.
        &lt;/div&gt;&lt;br /&gt;
        &lt;div class=&quot;comment-wrapper product-detail-info&quot;&gt;
          If you call this stuff jewelry, then better call the class &lt;i&gt;Merkel_diagram&lt;/i&gt;.
        &lt;/div&gt;&lt;br /&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;This post was written on April Fool's Day.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL to participate in the Google Summer of Code 2017</title>
   <link href="http://www.cgal.org/2017/03/06/gsoc-2017-mentoring/"/>
   <updated>2017-03-06T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2017/03/06/gsoc-2017-mentoring</id>
   <content type="html">
&lt;p&gt;The CGAL Project is a &lt;a href=&quot;https://summerofcode.withgoogle.com/archive/2017/organizations/6565611412914176/&quot;&gt;mentoring organization&lt;/a&gt;
for &lt;a href=&quot;https://summerofcode.withgoogle.com/archive/2017/projects/&quot;&gt;Google Summer of Code 2017&lt;/a&gt;.
Have a look at our &lt;a href=&quot;https://cgal.github.io/cgal-web/gsoc/2017.html&quot;&gt;Project Ideas&lt;/a&gt; page.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.9 released</title>
   <link href="http://www.cgal.org/2016/09/19/cgal-49/"/>
   <updated>2016-09-19T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2016/09/19/cgal-49</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.9&quot;&gt;Download CGAL-4.9&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.9/Manual/index.html&quot;&gt;CGAL-4.9 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.9 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2016/04/08/cgal48&quot;&gt;CGAL 4.8&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;header-only-mode&quot;&gt;Header-only mode&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;CGAL can now be used in headers only mode, i.e. without compiling
the CGAL libraries and linking with these libraries when compiling
examples, tests and demos. Note that running CMake on CGAL is still
required in order to generate some configuration files.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cone-based-spanners-new-package&quot;&gt;Cone Based Spanners (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package provides algorithms for constructing two kinds of
cone-based spanners: Yao graph and Theta graph, given a set of
vertices on the plane and the directions of cone boundaries.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-minkowski-sums&quot;&gt;2D Minkowski Sums&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Introduced a convex decomposition strategy, namely
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polygon_nop_decomposition_2&lt;/code&gt;, that merely passed the input polygon
to the list of output polygons.&lt;/li&gt;
    &lt;li&gt;Introduced overloads of the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minkowski_sum_2()&lt;/code&gt;, which
accepts 2 decomposition strategies.&lt;/li&gt;
    &lt;li&gt;Introduced an overloaded function called
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minkowski_sum_by_decomposition_2(P, Q, decom_no_holes,     decomp_with_holes)&lt;/code&gt;,
which computes the 2D Minkowski sum using optimal choices of
decomposition strategies.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;combinatorial-maps&quot;&gt;Combinatorial Maps&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Deprecated global functions (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make_combinatorial_hexahedron()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make_combinatorial_polygon()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make_combinatorial_tetrahedron()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make_edge()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_cell_0_in_cell_1()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_cell_0_in_cell_2()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_cell_1_in_cell_2()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_cell_2_in_cell_3()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_dangling_cell_1_in_cell_2()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_insertable_cell_1_in_cell_2()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_insertable_cell_2_in_cell_3()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_removable()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove_cell()&lt;/code&gt;) which are now member functions in the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CombinatorialMap&lt;/code&gt; concept.&lt;/li&gt;
    &lt;li&gt;It is not longer possible to use the old API switched on by defining
the macro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_CMAP_DEPRECATED&lt;/code&gt;. This API was deprecated since CGAL
4.4.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;Point Set Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;New function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_ply_custom_points()&lt;/code&gt; that allows the user
to read any additional point attribute from a PLY input point set.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::structure_point_set()&lt;/code&gt;: new algorithm that takes advantage of
detected planes to produce a structured point set (with flat
regions, sharp edges and vertices).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-shape-detection&quot;&gt;Point Set Shape Detection&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;New post-processing algorithm: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::regularize_planes()&lt;/code&gt;. This
allows the user to favor parallelism, orthogonality, coplanarity
and/or axial symmetry between detected planes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;Polygon Mesh Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::is_polygon_soup_a_polygon_mesh()&lt;/code&gt; to
check whether a polygon soup is a polygon mesh.&lt;/li&gt;
    &lt;li&gt;Added some new features to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::isotropic_remeshing()&lt;/code&gt;:
      &lt;ul&gt;
        &lt;li&gt;It is now possible to select fixed vertices that survive the
remeshing process, and to keep face attributes such as colors
valid after remeshing.&lt;/li&gt;
        &lt;li&gt;The user can choose the number of relaxation steps happening at
each loop, and to run 1-dimensional relaxation along constrained
polylines.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;The functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::triangulate_face()&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::triangulate_faces()&lt;/code&gt; now
indicate whether some faces have not been triangulated.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-deformation&quot;&gt;Surface Mesh Deformation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a new tag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SRE_ARAP&lt;/code&gt; to use the Smoothed Rotation Enhanced
As-Rigid-As-Possible deformation algorithm.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-fast-intersection-and-distance-computation&quot;&gt;3D Fast Intersection and Distance Computation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_tree::first_intersection()&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_tree::first_intersected_primitive()&lt;/code&gt; that compute the
intersection which is closest to the source of a ray&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a helper function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::copy_face_graph()&lt;/code&gt; to copy a source
FaceListGraph into another FaceListGraph of different type.&lt;/li&gt;
    &lt;li&gt;Added a class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Dual&lt;/code&gt; that creates the dual view of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceGraph&lt;/code&gt;
and a creation function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::dual(primal)&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;cgal-and-boost-property-maps&quot;&gt;CGAL and Boost Property Maps&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;It is not longer possible to use the old API of the property maps
provided by CGAL, switched on by defining the macro
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_USE_PROPERTY_MAPS_API_V1&lt;/code&gt;. This API was deprecated since CGAL
4.3.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.8.2 released</title>
   <link href="http://www.cgal.org/2016/09/19/cgal-482/"/>
   <updated>2016-09-19T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2016/09/19/cgal-482</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.8.2&quot;&gt;Download CGAL-4.8.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.8.2/Manual/index.html&quot;&gt;CGAL-4.8.2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.8.2 is a bug-fix release for &lt;a href=&quot;../../../../2016/04/08/cgal48&quot;&gt;CGAL 4.8&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2016/06/13/cgal-481&quot;&gt;CGAL 4.8.1&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=milestone%3A4.8.2&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.9 beta1 released</title>
   <link href="http://www.cgal.org/2016/08/04/cgal49-beta1/"/>
   <updated>2016-08-04T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2016/08/04/cgal49-beta1</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.9-beta1&quot;&gt;Download CGAL-4.9-beta1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.9/Manual/index.html&quot;&gt;CGAL-4.9-beta1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.9 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2016/04/08/cgal48&quot;&gt;CGAL 4.8&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;header-only-mode&quot;&gt;Header-only mode&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;CGAL can now be used in headers only mode, i.e. without compiling
the CGAL libraries and linking with these libraries when compiling
examples, tests and demos. Note that running CMake on CGAL is still
required in order to generate some configuration files.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cone-based-spanners-new-package&quot;&gt;Cone Based Spanners (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package provides algorithms for constructing two kinds of
cone-based spanners: Yao graph and Theta graph, given a set of
vertices on the plane and the directions of cone boundaries.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-minkowski-sums&quot;&gt;2D Minkowski Sums&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Introduced a convex decomposition strategy, namely
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polygon_nop_decomposition_2&lt;/code&gt;, that merely passed the input polygon
to the list of output polygons.&lt;/li&gt;
    &lt;li&gt;Introduced overloads of the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minkowski_sum_2()&lt;/code&gt;, which
accepts 2 decomposition strategies.&lt;/li&gt;
    &lt;li&gt;Introduced an overloaded function called
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minkowski_sum_by_decomposition_2(P, Q, decom_no_holes,     decomp_with_holes)&lt;/code&gt;,
which computes the 2D Minkowski sum using optimal choices of
decomposition strategies.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;combinatorial-maps&quot;&gt;Combinatorial Maps&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Deprecated global functions (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make_combinatorial_hexahedron()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make_combinatorial_polygon()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make_combinatorial_tetrahedron()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make_edge()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_cell_0_in_cell_1()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_cell_0_in_cell_2()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_cell_1_in_cell_2()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_cell_2_in_cell_3()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_dangling_cell_1_in_cell_2()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_insertable_cell_1_in_cell_2()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_insertable_cell_2_in_cell_3()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_removable()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove_cell()&lt;/code&gt;) which are now member functions in the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CombinatorialMap&lt;/code&gt; concept.&lt;/li&gt;
    &lt;li&gt;It is not longer possible to use the old API switched on by defining
the macro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_CMAP_DEPRECATED&lt;/code&gt;. This API was deprecated since CGAL
4.4.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;Point Set Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;New function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_ply_custom_points()&lt;/code&gt; that allows the user
to read any additional point attribute from a PLY input point set.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::structure_point_set()&lt;/code&gt;: new algorithm that takes advantage of
detected planes to produce a structured point set (with flat
regions, sharp edges and vertices).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-shape-detection&quot;&gt;Point Set Shape Detection&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;New post-processing algorithm: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::regularize_planes()&lt;/code&gt;. This
allows the user to favor parallelism, orthogonality, coplanarity
and/or axial symmetry between detected planes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;Polygon Mesh Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::is_polygon_soup_a_polygon_mesh()&lt;/code&gt; to
check whether a polygon soup is a polygon mesh.&lt;/li&gt;
    &lt;li&gt;Added some new features to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::isotropic_remeshing()&lt;/code&gt;:
      &lt;ul&gt;
        &lt;li&gt;It is now possible to select fixed vertices that survive the
remeshing process, and to keep face attributes such as colors
valid after remeshing.&lt;/li&gt;
        &lt;li&gt;The user can choose the number of relaxation steps happening at
each loop, and to run 1-dimensional relaxation along constrained
polylines.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;The functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::triangulate_face()&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::triangulate_faces()&lt;/code&gt; now
indicate whether some faces have not been triangulated.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-deformation&quot;&gt;Surface Mesh Deformation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a new tag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SRE_ARAP&lt;/code&gt; to use the Smoothed Rotation Enhanced
As-Rigid-As-Possible deformation algorithm.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-fast-intersection-and-distance-computation&quot;&gt;3D Fast Intersection and Distance Computation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_tree::first_intersection()&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_tree::first_intersected_primitive()&lt;/code&gt; that compute the
intersection which is closest to the source of a ray&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a helper function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::copy_face_graph()&lt;/code&gt; to copy a source
FaceListGraph into another FaceListGraph of different type.&lt;/li&gt;
    &lt;li&gt;Added a class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Dual&lt;/code&gt; that creates the dual view of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceGraph&lt;/code&gt;
and a creation function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::dual(primal)&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;cgal-and-boost-property-maps&quot;&gt;CGAL and Boost Property Maps&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;It is not longer possible to use the old API of the property maps
provided by CGAL, switched on by defining the macro
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_USE_PROPERTY_MAPS_API_V1&lt;/code&gt;. This API was deprecated since CGAL
4.3.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ SIGGRAPH 2016</title>
   <link href="http://www.cgal.org/news/2016/07/26/siggraph-2016/"/>
   <updated>2016-07-26T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2016/07/26/siggraph-2016</id>
   <content type="html">
&lt;p&gt;You have an implementation of a geometric algorithm that you would like to contribute?
You want us to implement an algorithm that you learned about in the technical paper sessions?
You want to know more about the open source and the commercial licensing options for CGAL?
You want to present the problem you have to solve, in order to figure out if CGAL might be helpful for you.&lt;/p&gt;

&lt;p&gt;Visit the CGAL Project on Booth No. 667 at the exhibition of &lt;a href=&quot;http://s2016.siggraph.org/&quot;&gt;SIGGRAPH 2016&lt;/a&gt;,
Los Angeles USA, 24-28 Jul 2016.&lt;/p&gt;

&lt;p&gt;We also offer an 1.5h course on Tuesday 26 July, 9-10:30 am.&lt;/p&gt;

&lt;p&gt;The goal of the course is not so much to present all algorithms,
but more to show how they can be adapted to user needs.&lt;/p&gt;

&lt;p&gt;We explain “property maps” and an extension of the BGL “Graph”
concepts, which enables users, to run, for example,  a CGAL
mesh segmentation algorithm directly on a mesh of OpenMesh,
without converting it to a mesh of CGAL.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.8.1 released</title>
   <link href="http://www.cgal.org/2016/06/13/cgal-481/"/>
   <updated>2016-06-13T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2016/06/13/cgal-481</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.8.1&quot;&gt;Download CGAL-4.8.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.8.1/Manual/index.html&quot;&gt;CGAL-4.8.1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.8.1 is a bug-fix release for &lt;a href=&quot;../../../../2016/04/08/cgal48&quot;&gt;CGAL 4.8&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2016/04/08/cgal48&quot;&gt;CGAL 4.8&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=milestone%3A4.8.1&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.8 released</title>
   <link href="http://www.cgal.org/2016/04/08/cgal48/"/>
   <updated>2016-04-08T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2016/04/08/cgal48</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.8&quot;&gt;Download CGAL-4.8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.8/Manual/index.html&quot;&gt;CGAL-4.8 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.8 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2015/10/20/cgal-47&quot;&gt;CGAL 4.7&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The support for Qt3 is dropped and all demos using it have been removed.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Starting with Visual C++ 2015 we no longer require &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Boost.Thread&lt;/code&gt; as
we use the C++11 keyword &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thread_local&lt;/code&gt; and the C+11 class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::mutex&lt;/code&gt; .&lt;/li&gt;
    &lt;li&gt;The same holds for g++ 4.8 or later when the C++11 standard is used.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;optimal-transportation-curve-reconstruction-new-package&quot;&gt;Optimal Transportation Curve Reconstruction (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package implements a method to reconstruct and simplify 2D
point sets. The input is a set of 2D points with mass attributes,
possibly hampered by noise and outliers. The output is a set of line
segments and isolated points which approximate the input points.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-regularized-boolean-set-operations&quot;&gt;2D Regularized Boolean Set-Operations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Improved the performance of operations in some settings.
&lt;strong&gt;Breaking change&lt;/strong&gt;: This improvement requires changes of the face
and halfedge type of the underlying arrangement Dcel. See the
concepts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GeneralPolygonSetDcelHalfedge&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GeneralPolygonSetDcelFace&lt;/code&gt; for more details. If you use a different
simplex types, inheriting your simplices from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Gps_face_base&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Gps_halfedge_base&lt;/code&gt; is sufficient to accommodate for the
update.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-boolean-operations-on-nef-polyhedra&quot;&gt;3D Boolean Operations on Nef Polyhedra&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added 3 new constructors: from a point range, from a point, and from a
segment.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;combinatorial-maps&quot;&gt;Combinatorial Maps&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Changed the type of Boolean marks, old type is
int, new type is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size_type&lt;/code&gt;. If no more mark is available,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_new_mark&lt;/code&gt; throws an exception, instead of returning &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Sped up the edge removal in case the incident faces contains many
holes.&lt;/li&gt;
    &lt;li&gt;Set the format of polylines and polycurves. The format of a general
polyline or polycurve consists of the sequence of subcurves that
comprise the original curve. The format of a polyline of linear
segments consists of the sequence of points that define the original
curve. (The latter restores the format used before polycurves were
introduced in 4.7.) Fix the extraction from istream and insertion
into ostream operators of polylines and polycurves accordingly.&lt;/li&gt;
    &lt;li&gt;Fixed the traits class that handles Bezier curves. In particular, fix
the case where the curve is closed (i.e, the first and last control
points coincide).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added support of 3D gray level images as input for the tetrahedral
mesh generation.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; All models of the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshDomain_3&lt;/code&gt; must
now provide a member function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bbox()&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;advancing-front-surface-reconstruction&quot;&gt;Advancing Front Surface Reconstruction&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Optional template functor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filter&lt;/code&gt; is replaced by another optional
template functor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Priority&lt;/code&gt;. This allows to change the way facets
are prioritized by the algorithm instead of having a simple option
to reject some facets.
&lt;strong&gt;Breaking change&lt;/strong&gt;: Programs using the old &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filter&lt;/code&gt; API will not
compile anymore as it must be replaced with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Priority&lt;/code&gt; API as
described in the manual. Codes using the default behavior are not
impacted.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;Polygon Mesh Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a new triangle-based isotropic remeshing algorithm for
triangulated surface meshes,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::isotropic_remeshing()&lt;/code&gt; and a helper
function for isotropic remeshing :
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::split_long_edges()&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Added the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::border_halfedges()&lt;/code&gt;
to collect the border of a given face range&lt;/li&gt;
    &lt;li&gt;Added the function
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::remove_isolated_vertices()&lt;/code&gt; to be
used on any polygon mesh&lt;/li&gt;
    &lt;li&gt;Added the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::triangulate_face()&lt;/code&gt;
to triangulate a single face of a polygon mesh&lt;/li&gt;
    &lt;li&gt;Added an overload for
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::triangulate_faces()&lt;/code&gt; to triangulate
a range of faces of a polygon mesh&lt;/li&gt;
    &lt;li&gt;Added function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keep_large_connected_components()&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Added measuring functions for polygon meshes, to compute length, area,
and volume of simplices or group of simplices of a polygon mesh.&lt;/li&gt;
    &lt;li&gt;Added function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bbox_3()&lt;/code&gt; to compute the bounding box of a polygon
mesh.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;Point Set Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; new template parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrency_tag&lt;/code&gt; for
the functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compute_average_spacing()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edge_aware_upsample_point_set()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jet_estimate_normals()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jet_smooth_point_set()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pca_estimate_normals()&lt;/code&gt;. To update
your code simply add as first template parameter
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Sequential_tag&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Parallel_tag&lt;/code&gt; when calling one of
these functions.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Parallel_tag&lt;/code&gt; can no longer be used in Point Set Processing
algorithms if TBB is not available.&lt;/li&gt;
    &lt;li&gt;Added a new simplification algorithm based on hierarchical clustering:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::hierarchy_simplify_point_set()&lt;/code&gt;. It allows either to
uniformly simplify the point set or to automatically adapt the local
density of points to the local variation of the input computed by
principal component analysis.&lt;/li&gt;
    &lt;li&gt;New IO functions for PLY format (Polygon File Format):
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_ply_points()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_ply_points_and_normals()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_ply_points()&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_ply_points_and_normals()&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-parameterization&quot;&gt;Surface Mesh Parameterization&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LSCM_parameterizer_3&lt;/code&gt; now uses by default Eigen instead of OpenNL
as a model of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SparseLinearAlgebraTraits_d&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;spatial-searching&quot;&gt;Spatial Searching&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added function to find any point in a range query, that is neither all
points, nor the closest one.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;principal-component-analysis&quot;&gt;Principal Component Analysis&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a template parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiagonalizeTraits&lt;/code&gt; for functions
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::linear_least_squares_fitting_2()&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::linear_least_squares_fitting_3()&lt;/code&gt;. This allows to either
choose the legacy internal diagonalization code from CGAL or the
Eigen implementation (or any class that is a model of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiagonalizeTraits&lt;/code&gt;). Variants of the function that automatically
deduce the kernel also automatically select the diagonalizer, so the
API is mostly preserved.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-solvers&quot;&gt;CGAL and Solvers&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package now includes all CGAL concepts for solvers with models
using the third party Eigen library.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::split_graph_into_polylines()&lt;/code&gt; that allows to
extract from a soup of segments given as a graph, polylines with
nodes of degree at most 2. In addition a functor can be passed to
the function to specify additional polyline endpoints.&lt;/li&gt;
    &lt;li&gt;New functions to manipulate selection of faces, edges and vertices
in a halfedge graph are added: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::expand_face_selection()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::reduce_face_selection()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::expand_edge_selection()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::reduce_edge_selection()&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::expand_vertex_selection()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::reduce_vertex_selection()&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::select_incident_faces()&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Added a helper function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::clear&lt;/code&gt; which clears a MutableFaceGraph
efficiently and generically.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL Flash Mob at SIGGRAPH</title>
   <link href="http://www.cgal.org/news/2016/04/01/Flashmob/"/>
   <updated>2016-04-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2016/04/01/Flashmob</id>
   <content type="html">
&lt;p&gt;As in the previous years, the CGAL Project will be present at 
&lt;a href=&quot;http://s2016.siggraph.org/&quot;&gt;Siggraph&lt;/a&gt;.
Having 20K subscribers on &lt;em&gt;cgal-discuss@inria.fr&lt;/em&gt;, we are pretty sure
to find at least 100 subscribers who also attend SIGGRAPH, and who
would like to share the fun of a CGAL Flash Mob in front of the 
convention center&lt;/p&gt;

&lt;h4&gt;If You Plan to Participate&lt;/h4&gt;

&lt;h5&gt;Before 1st of July&lt;/h5&gt;
&lt;p&gt;Drop a &lt;a href=&quot;mailto:cgal-discuss@inria.fr?Subject=FlashMob Registration&quot; target=&quot;_top&quot;&gt;registration mail&lt;/a&gt; with your name, and t-shirt size so that
   we know how many t-shirts we have to provide.&lt;/p&gt;

&lt;h5&gt;About a week before Siggraph&lt;/h5&gt;
&lt;p&gt;   Learn the 60sec CGAL performance.  It is important that we are 
   all perfectly synchronized, so please learn the gestures and 
   words by heart, imitating what we teach on the youtube video
   that we will post on 15th of June.&lt;/p&gt;

&lt;h5&gt;During 26th of July&lt;/h5&gt;
&lt;p&gt;Pick up your favorite t-shirt at the CGAL booth #667.
     We will at the same time communicate you your &quot;personal spot&quot;
     which will depend on the final head count.
     We will communicate when exactly the performance starts.  It is synchronized with
     the end of the key note (the exact time is not announced yet), 
     which is generally boring (so you don't miss a lot), but 
     surprisingly well attended (so we will have a huge audience, coming from a boring event).&lt;/p&gt;

&lt;p&gt;Identify your personal spot so that you know where exactly
     to get the next day.&lt;/p&gt;
&lt;p&gt;Walk 2min away and memorize where you are as &quot;start spot&quot;&lt;/p&gt;

&lt;h5&gt;On 27th of July&lt;/h5&gt;

&lt;p&gt;We start the performance at time &lt;b&gt;T&lt;/b&gt;.&lt;/p&gt;

&lt;dl&gt;
   &lt;dt&gt;T-60&lt;/dt&gt;  &lt;dd&gt;&lt;p&gt;Put the CGAL t-shirt on, and put another t-shirt on top.
         Preferably wear a black jeans. If you want one of the spots 
         in the water, better wear Bermuda shorts.&lt;/p&gt;&lt;/dd&gt;
   &lt;dt&gt;T-15&lt;/dt&gt;  &lt;dd&gt;&lt;p&gt;Be at your start spot. Do not rush to get there.&lt;/p&gt;&lt;/dd&gt;
   &lt;dt&gt;T-02&lt;/dt&gt;  &lt;dd&gt;&lt;p&gt;Head to your personal spot. Rush, as this raises attention.&lt;/p&gt;&lt;/dd&gt;
   &lt;dt&gt;T&lt;dt&gt;     &lt;dd&gt;&lt;p&gt;Rip off the cover t-shirt and start the performance.&lt;/p&gt;&lt;/dd&gt;
   &lt;dt&gt;T+01&lt;/dt&gt;  &lt;dd&gt;&lt;p&gt;Put on the cover t-shirt and walk away as if 
         nothing had happened. In fact nothing has happened and it was all a dream&lt;p&gt;&amp;lt;/dd&amp;gt;
&amp;lt;/dl&amp;gt; 

&lt;h4&gt;Recommendations&lt;/h4&gt;


&lt;p&gt;We will cover the event with a HD camera, and currently apply for a
permission at the Siggraph Organization Committee as well as at
the Anaheim City Council to film the CGAL Flash Mob with a drone.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.cgal.org/news/2014/04/01/GoogleGrass/&quot;&gt;Google Grass&lt;/a&gt;
proved that Cannabis makes C++ developers more
productive, and as a side effect more funny, so feel free to
do what you want at &lt;em&gt;T-30&lt;/em&gt;.  As the California law is still 
relatively strict, please be sure to carry your &lt;em&gt;Medical Marijuana
Identification Card&lt;/em&gt; with you, in case you are resident of California,
or the most recent prescription you obtained from your doctor.&lt;/p&gt;

&lt;p&gt;To keep the moment of surprise, don't mention it to people
who do not use CGAL, even if they are your office mates.&lt;/p&gt;

&lt;p&gt;Alternatively, convince all your colleagues,
tweet it, retweet it, or whatever.&lt;/p&gt;

&lt;h4&gt;Maps&lt;/h4&gt;

&lt;p&gt;We will be in the area in front of the East entrance.&lt;/p&gt;

&lt;img src=&quot;../../../../../images/AnaheimFlashMob.JPG&quot; /&gt;

&lt;p&gt;Stand along the palm trees, and in the water. When you register
please let us know if you are ready for the water.&lt;/p&gt;
&lt;img src=&quot;../../../../../images/AnaheimFlashMobZoom.JPG&quot; /&gt;


&lt;p&gt;See you at &lt;em&gt;T&lt;/em&gt;&lt;/p&gt;

&lt;/p&gt;&lt;/p&gt;&lt;/dd&gt;&lt;/dt&gt;&lt;/dt&gt;&lt;/dl&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.8 beta2 released</title>
   <link href="http://www.cgal.org/2016/03/20/cgal48-beta2/"/>
   <updated>2016-03-20T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2016/03/20/cgal48-beta2</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.8-beta2&quot;&gt;Download CGAL-4.8-beta2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.8/Manual/index.html&quot;&gt;CGAL-4.8-beta2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.8 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2015/10/20/cgal-47&quot;&gt;CGAL 4.7&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The support for Qt3 is dropped and all demos using it have been removed.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Starting with Visual C++ 2015 we no longer require &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Boost.Thread&lt;/code&gt; as
we use the C++11 keyword &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thread_local&lt;/code&gt; and the C+11 class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::mutex&lt;/code&gt; .&lt;/li&gt;
    &lt;li&gt;The same holds for g++ 4.8 or later when the C++11 standard is used.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-reconstruction-and-simplification-from-point-set-new-package&quot;&gt;2D Reconstruction and Simplification from Point Set (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package implements a method to reconstruct and simplify 2D
point sets. The input is a set of 2D points with mass attributes,
possibly hampered by noise and outliers. The output is a set of line
segments and isolated points which approximate the input points.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-regularized-boolean-set-operations&quot;&gt;2D Regularized Boolean Set-Operations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Improved the performance of operations in some settings.
&lt;strong&gt;Breaking change&lt;/strong&gt;: This improvement requires changes of the face
and halfedge type of the underlying arrangement Dcel. See the
concepts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GeneralPolygonSetDcelHalfedge&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GeneralPolygonSetDcelFace&lt;/code&gt; for more details. If you use a different
simplex types, inheriting your simplices from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Gps_face_base&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Gps_halfedge_base&lt;/code&gt; is sufficient to accommodate for the
update.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-boolean-operations-on-nef-polyhedra&quot;&gt;3D Boolean Operations on Nef Polyhedra&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added 3 new constructors: from a point range, from a point, and from a
segment.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;combinatorial-maps&quot;&gt;Combinatorial Maps&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Changed the type of Boolean marks, old type is
int, new type is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size_type&lt;/code&gt;. If no more mark is available,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_new_mark&lt;/code&gt; throws an exception, instead of returning &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Sped up the edge removal in case the incident faces contains many
holes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added support of 3D gray level images as input for the tetrahedral
mesh generation.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; All models of the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshDomain_3&lt;/code&gt; must
now provide a member function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bbox()&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;advancing-front-surface-reconstruction&quot;&gt;Advancing Front Surface Reconstruction&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Optional template functor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filter&lt;/code&gt; is replaced by another optional
template functor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Priority&lt;/code&gt;. This allows to change the way facets
are prioritized by the algorithm instead of having a simple option
to reject some facets.
&lt;strong&gt;Breaking change&lt;/strong&gt;: Programs using the old &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filter&lt;/code&gt; API will not
compile anymore as it must be replaced with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Priority&lt;/code&gt; API as
described in the manual. Codes using the default behavior are not
impacted.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;Polygon Mesh Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a new triangle-based isotropic remeshing algorithm for
triangulated surface meshes,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::isotropic_remeshing()&lt;/code&gt; and a helper
function for isotropic remeshing :
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::split_long_edges()&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Added the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::border_halfedges()&lt;/code&gt;
to collect the border of a given face range&lt;/li&gt;
    &lt;li&gt;Added the function
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::remove_isolated_vertices()&lt;/code&gt; to be
used on any polygon mesh&lt;/li&gt;
    &lt;li&gt;Added the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::triangulate_face()&lt;/code&gt;
to triangulate a single face of a polygon mesh&lt;/li&gt;
    &lt;li&gt;Added an overload for
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::triangulate_faces()&lt;/code&gt; to triangulate
a range of faces of a polygon mesh&lt;/li&gt;
    &lt;li&gt;Added function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keep_large_connected_components()&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Added measuring functions for polygon meshes, to compute length, area,
and volume of simplices or group of simplices of a polygon mesh.&lt;/li&gt;
    &lt;li&gt;Added function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bbox_3()&lt;/code&gt; to compute the bounding box of a polygon
mesh.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-parameterization&quot;&gt;Surface Mesh Parameterization&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LSCM_parameterizer_3&lt;/code&gt; now uses by default Eigen instead of OpenNL
as a model of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SparseLinearAlgebraTraits_d&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;Point Set Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; new template parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrency_tag&lt;/code&gt; for
the functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compute_average_spacing()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edge_aware_upsample_point_set()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jet_estimate_normals()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jet_smooth_point_set()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pca_estimate_normals()&lt;/code&gt;. To update
your code simply add as first template parameter
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Sequential_tag&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Parallel_tag&lt;/code&gt; when calling one of
these functions.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Parallel_tag&lt;/code&gt; can no longer be used in Point Set Processing
algorithms if TBB is not available.&lt;/li&gt;
    &lt;li&gt;Added a new simplification algorithm based on hierarchical clustering:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::hierarchy_simplify_point_set()&lt;/code&gt;. It allows either to
uniformly simplify the point set or to automatically adapt the local
density of points to the local variation of the input computed by
principal component analysis.&lt;/li&gt;
    &lt;li&gt;New IO functions for PLY format (Polygon File Format):
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_ply_points()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_ply_points_and_normals()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_ply_points()&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_ply_points_and_normals()&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;spatial-searching&quot;&gt;Spatial Searching&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added function to find any point in a range query, that is neither all
points, nor the closest one.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;principal-component-analysis&quot;&gt;Principal Component Analysis&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a template parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiagonalizeTraits&lt;/code&gt; for functions
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::linear_least_squares_fitting_2()&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::linear_least_squares_fitting_3()&lt;/code&gt;. This allows to either
choose the legacy internal diagonalization code from CGAL or the
Eigen implementation (or any class that is a model of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiagonalizeTraits&lt;/code&gt;). Variants of the function that automatically
deduce the kernel also automatically select the diagonalizer, so the
API is mostly preserved.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-solvers&quot;&gt;CGAL and Solvers&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package now includes all CGAL concepts for solvers with models
using the third party Eigen library.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::split_graph_into_polylines()&lt;/code&gt; that allows to
extract from a soup of segments given as a graph, polylines with
nodes of degree at most 2. In addition a functor can be passed to
the function to specify additional polyline endpoints.&lt;/li&gt;
    &lt;li&gt;New functions to manipulate selection of faces, edges and vertices
in a halfedge graph are added: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::expand_face_selection()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::reduce_face_selection()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::expand_edge_selection()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::reduce_edge_selection()&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::expand_vertex_selection()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::reduce_vertex_selection()&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::select_incident_faces()&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Added a helper function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::clear&lt;/code&gt; which clears a MutableFaceGraph
efficiently and generically.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.8 beta1 released</title>
   <link href="http://www.cgal.org/2016/02/10/cgal48-beta1/"/>
   <updated>2016-02-10T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2016/02/10/cgal48-beta1</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.8-beta1&quot;&gt;Download CGAL-4.8-beta1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.8/Manual/index.html&quot;&gt;CGAL-4.8-beta1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.8 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2015/10/20/cgal-47&quot;&gt;CGAL 4.7&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The support for Qt3 is dropped and all demos using it have been removed.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Starting with Visual C++ 2015 we no longer require &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Boost.Thread&lt;/code&gt; as
we use the C++11 keyword &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;thread_local&lt;/code&gt; and the C+11 class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::mutex&lt;/code&gt; .&lt;/li&gt;
    &lt;li&gt;The same holds for g++ 4.8 or later when the C++11 standard is used.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-reconstruction-and-simplification-from-point-set-new-package&quot;&gt;2D Reconstruction and Simplification from Point Set (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package implements a method to reconstruct and simplify 2D
point sets. The input is a set of 2D points with mass attributes,
possibly hampered by noise and outliers. The output is a set of line
segments and isolated points which approximate the input points.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-regularized-boolean-set-operations&quot;&gt;2D Regularized Boolean Set-Operations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Improved the performance of operations in some settings.
&lt;strong&gt;Breaking change&lt;/strong&gt;: This improvement requires changes of the face
and halfedge type of the underlying arrangement Dcel. See the
concepts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GeneralPolygonSetDcelHalfedge&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GeneralPolygonSetDcelFace&lt;/code&gt; for more details. If you use a different
simplex types, inheriting your simplices from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Gps_face_base&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Gps_halfedge_base&lt;/code&gt; is sufficient to accommodate for the
update.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-boolean-operations-on-nef-polyhedra&quot;&gt;3D Boolean Operations on Nef Polyhedra&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added 3 new constructors: from a point range, from a point, and from a
segment.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;combinatorial-maps&quot;&gt;Combinatorial Maps&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change&lt;/strong&gt;: Changed the type of Boolean marks, old type is
int, new type is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size_type&lt;/code&gt;. If no more mark is available,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_new_mark&lt;/code&gt; throws an exception, instead of returning &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Sped up the edge removal in case the incident faces contains many
holes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added support of 3D gray level images as input for the tetrahedral
mesh generation.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; All models of the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MeshDomain_3&lt;/code&gt; must
now provide a member function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bbox()&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;advancing-front-surface-reconstruction&quot;&gt;Advancing Front Surface Reconstruction&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Optional template functor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filter&lt;/code&gt; is replaced by another optional
template functor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Priority&lt;/code&gt;. This allows to change the way facets
are prioritized by the algorithm instead of having a simple option
to reject some facets.
&lt;strong&gt;Breaking change&lt;/strong&gt;: Programs using the old &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filter&lt;/code&gt; API will not
compile anymore as it must be replaced with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Priority&lt;/code&gt; API as
described in the manual. Codes using the default behavior are not
impacted.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing&quot;&gt;Polygon Mesh Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a new triangle-based isotropic remeshing algorithm for
triangulated surface meshes,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::isotropic_remeshing()&lt;/code&gt; and a helper
function for isotropic remeshing :
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::split_long_edges()&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Added the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::border_halfedges()&lt;/code&gt;
to collect the border of a given face range&lt;/li&gt;
    &lt;li&gt;Added the function
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::remove_isolated_vertices()&lt;/code&gt; to be
used on any polygon mesh&lt;/li&gt;
    &lt;li&gt;Added the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::triangulate_face()&lt;/code&gt;
to triangulate a single face of a polygon mesh&lt;/li&gt;
    &lt;li&gt;Added an overload for
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polygon_mesh_processing::triangulate_faces()&lt;/code&gt; to triangulate
a range of faces of a polygon mesh&lt;/li&gt;
    &lt;li&gt;Added function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;keep_large_connected_components()&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Added measuring functions for polygon meshes, to compute length, area,
and volume of simplices or group of simplices of a polygon mesh.&lt;/li&gt;
    &lt;li&gt;Added function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bbox_3()&lt;/code&gt; to compute the bounding box of a polygon
mesh.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-parameterization&quot;&gt;Surface Mesh Parameterization&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;LSCM_parameterizer_3&lt;/code&gt; now uses by default Eigen instead of OpenNL
as a model of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SparseLinearAlgebraTraits_d&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;Point Set Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; new template parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrency_tag&lt;/code&gt; for
the functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compute_average_spacing()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edge_aware_upsample_point_set()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jet_estimate_normals()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jet_smooth_point_set()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pca_estimate_normals()&lt;/code&gt;. To update
your code simply add as first template parameter
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Sequential_tag&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Parallel_tag&lt;/code&gt; when calling one of
these functions.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Parallel_tag&lt;/code&gt; can no longer be used in Point Set Processing
algorithms if TBB is not available.&lt;/li&gt;
    &lt;li&gt;Added a new simplification algorithm based on hierarchical clustering:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::hierarchy_simplify_point_set()&lt;/code&gt;. It allows either to
uniformly simplify the point set or to automatically adapt the local
density of points to the local variation of the input computed by
principal component analysis.&lt;/li&gt;
    &lt;li&gt;New IO functions for PLY format (Polygon File Format):
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_ply_points()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::read_ply_points_and_normals()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_ply_points()&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::write_ply_points_and_normals()&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;spatial-searching&quot;&gt;Spatial Searching&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added function to find any point in a range query, that is neither all
points, nor the closest one.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;principal-component-analysis&quot;&gt;Principal Component Analysis&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a template parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiagonalizeTraits&lt;/code&gt; for functions
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::linear_least_squares_fitting_2()&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::linear_least_squares_fitting_3()&lt;/code&gt;. This allows to either
choose the legacy internal diagonalization code from CGAL or the
Eigen implementation (or any class that is a model of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DiagonalizeTraits&lt;/code&gt;). Variants of the function that automatically
deduce the kernel also automatically select the diagonalizer, so the
API is mostly preserved.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-solvers&quot;&gt;CGAL and Solvers&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package now includes all CGAL concepts for solvers with models
using the third party Eigen library.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl&quot;&gt;CGAL and the Boost Graph Library (BGL)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::split_graph_into_polylines()&lt;/code&gt; that allows to
extract from a soup of segments given as a graph, polylines with
nodes of degree at most 2. In addition a functor can be passed to
the function to specify additional polyline endpoints.&lt;/li&gt;
    &lt;li&gt;New functions to manipulate selection of faces, edges and vertices
in a halfedge graph are added: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::expand_face_selection()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::reduce_face_selection()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::expand_edge_selection()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::reduce_edge_selection()&lt;/code&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::expand_vertex_selection()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::reduce_vertex_selection()&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::select_incident_faces()&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Added a helper function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::clear&lt;/code&gt; which clears a MutableFaceGraph
efficiently and generically.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.7 released</title>
   <link href="http://www.cgal.org/2015/10/20/cgal-47/"/>
   <updated>2015-10-20T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2015/10/20/cgal-47</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.7&quot;&gt;Download CGAL-4.7&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.7/Manual/index.html&quot;&gt;CGAL-4.7 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.7 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2015/04/19/cgal-46&quot;&gt;CGAL 4.6&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The minimum required version of CMake is now 2.8.11. CMake versions
3.1, 3.2, and 3.3 are supported.&lt;/li&gt;
    &lt;li&gt;All Qt4 demos have been updated and now require Qt5 to be compiled.
Qt5 version 5.3 or higher is required. The support for Qt4 is
dropped. To compile libCGAL_Qt5 and demos, you must set the cmake
or environment variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qt5_DIR&lt;/code&gt; to point to the path to the
directory containing the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qt5Config.cmake&lt;/code&gt; created by your Qt5
installation. If you are using the open source edition it should be
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/path-to/qt-everywhere-opensource-src-&amp;lt;version&amp;gt;/qtbase/lib/cmake/Qt5&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The code of the 3D demos now uses modern OpenGL, with shaders,
instead of the fixed pipeline API of OpenGL-1.&lt;/li&gt;
    &lt;li&gt;The Microsoft Windows Visual C++ compiler 2015 (VC14) is now
supported. However, since this compiler is not officially supported
by Intel TBB 4.4 and Qt 5.5 (the latest versions available at the
time of this release), the parallelism features of CGAL and Qt5
demos will not work.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;l-infinity-segment-delaunay-graphs-new-package&quot;&gt;L Infinity Segment Delaunay Graphs (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The package provides the geometric traits for constructing the
segment Delaunay graph in the max-norm (L Infinity). The traits also
contain methods to draw the edges of the dual of the segment
Delaunay graph in the max-norm i.e., the segment Voronoi diagram in
the max-norm. The algorithm and traits rely on the segment Delaunay
graph algorithm and traits under the Euclidean distance. The segment
Voronoi diagram in the max-norm has applications in VLSI CAD.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;advancing-front-surface-reconstruction-new-package&quot;&gt;Advancing Front Surface Reconstruction (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package provides a greedy algorithm for surface reconstruction
from an unorganized point set. Starting from a seed facet, a
piecewise linear surface is grown by adding Delaunay triangles one
by one. The most plausible triangles are added first, in a way that
avoids the appearance of topological singularities.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-shortest-paths-new-package&quot;&gt;Triangulated Surface Mesh Shortest Paths (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The package provides methods for computing shortest path on
triangulated surface meshes. Given a set of source points on the
surface, this package provides a data structure that can efficiently
provides the shortest path from any point on the surface to the
sources points. There is no restriction on the genus or the number
of connected components of the mesh.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-skeletonization-new-package&quot;&gt;Triangulated Surface Mesh Skeletonization (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package provides a (1D) curve skeleton extraction algorithm for
a triangulated polygonal mesh without borders based on the mean
curvature flow. The particularity of this skeleton is that it
captures the topology of the input. For each skeleton vertex one can
obtain its location and its corresponding vertices from the input
mesh. The code is generic and works with any model of the
`FaceListGraph` concept.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-point-set-shape-detection-new-package&quot;&gt;3D Point-Set Shape Detection (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package implements the efficient RANSAC method for shape
detection, contributed by Schnabel et al. From an unstructured point
set with unoriented normals, the algorithm detects a set of shapes.
Five types of primitive shapes are provided by this package: plane,
sphere, cylinder, cone and torus. Detecting other types of shapes is
possible by implementing a class derived from a base shape.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-visibility-new-package&quot;&gt;2D Visibility (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package provides several variants to compute the visibility
area of a point within polygonal regions in two dimensions.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing-new-package&quot;&gt;Polygon Mesh Processing (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package implements a collection of methods and classes for
polygon mesh processing, ranging from basic operations on simplices,
to complex geometry processing algorithms. The implementation of
this package mainly follows algorithms and references given in
Botsch et al.’s book on polygon mesh processing.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Support for unordered sets and maps of the stdlib and of boost for
handle and index classes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;approximation-of-ridges-and-umbilics-on-triangulated-surface-meshes&quot;&gt;Approximation of Ridges and Umbilics on Triangulated Surface Meshes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package now supports any model of the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceGraph&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The package no longer supports models of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TriangulatedSurfaceMesh&lt;/code&gt; which are not at the same time models of
the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceGraph&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-geometry-kernel&quot;&gt;dD Geometry Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Epick_d gains 3 new functors: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Construct_circumcenter_d&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compute_squared_radius_d&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Side_of_bounded_sphere_d&lt;/code&gt;. Those are
essential for the computation of alpha-shapes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Introduced a new traits class, called
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polycurve_traits_2&amp;lt;SubcurveTraits&amp;gt;&lt;/code&gt;, which handles general
piece-wise (polycurve) curves. The pieces do not necessarily have to
be linear.&lt;/li&gt;
    &lt;li&gt;Introduced two new concepts called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrangementApproximateTraits_2&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrangementConstructXMonotoneCurveTraits_2&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The existing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrangementLandmarkTraits_2&lt;/code&gt; concept, which has
two requirements, now refines the two respective concepts above.&lt;/li&gt;
    &lt;li&gt;The template parameter of the existing
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polyline_traits_2&amp;lt;SegmentTraits&amp;gt;&lt;/code&gt; template must be
substituted with a traits class that is a model of the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrangementConstructXMonotoneTraits_2&lt;/code&gt; concept among the other
when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polyline_traits_2&lt;/code&gt; is instantiated.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-minkowski-sums&quot;&gt;2D Minkowski Sums&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added support for polygons with holes and optimized the construction
of Minkowski sums.&lt;/li&gt;
    &lt;li&gt;Introduced an implementation of the “reduced convolution”
method, a variant of the method described in “2D Minkowski Sum
of Polygons Using Reduced Convolution” by Behar and Lien. The
new method supports polygons with holes and in many cases out
pergorms the implementation of the exsisting (full) convolution
method.&lt;/li&gt;
    &lt;li&gt;Introduced two new classes that decompose polygons into convex
pieces (models of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PolygonConvexDecomposition_2&lt;/code&gt; concept)
based on vertical decomposition and constrained Delaunay
triangulation, respectively. These new models also support the
convex decomposition of polygons with holes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-periodic-triangulations&quot;&gt;3D Periodic Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Renamed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_triangulation_traits_3&lt;/code&gt; to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_Delaunay_triangulation_traits_3&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Renamed the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3TriangulationTraits_3&lt;/code&gt; to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3DelaunayTriangulationTraits_3&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Created &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_triangulation_traits_3&lt;/code&gt; and the concept
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3TriangulationTraits_3&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-conforming-triangulations-and-meshes&quot;&gt;2D Conforming Triangulations and Meshes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added an optimization method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::lloyd_optimize_mesh_2()&lt;/code&gt; that
implements the Lloyd (or Centroidal Voronoi Tesselation)
optimization algorithm in a Constrained Delaunay Triangulation. For
optimization, the triangulation data structure on which the mesher
relies needs its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VertexBase&lt;/code&gt; template parameter to be a model of
the new concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DelaunayMeshVertexBase_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing-and-surface-reconstruction-from-point-sets&quot;&gt;Point Set Processing and Surface Reconstruction from Point Sets&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::compute_vcm()&lt;/code&gt; for computing the Voronoi
Covariance Measure (VCM) of a point set. The output of this function
can be used with the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::vcm_is_on_feature_edge()&lt;/code&gt; to
determine whether a point is on or close to a feature edge. The
former function is also internally used by
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::vcm_estimate_normals()&lt;/code&gt; to estimate the normals of a point
set and it is particularly suited to point sets with noise.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;spatial-sorting&quot;&gt;Spatial Sorting&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the possibility to sort points on a sphere along a space-filling
curve using the functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::hilbert_sort_on_sphere&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::spatial_sort_on_sphere&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;geometric-object-generators&quot;&gt;Geometric Object Generators&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added new random generator of points in a 2D and 3D triangle and in a
tetrahedron (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random_points_in_triangle_2&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random_points_in_triangle_3&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random_points_in_tetrahedron_3&lt;/code&gt;).&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.7 beta2 released</title>
   <link href="http://www.cgal.org/2015/09/21/cgal-47-beta2/"/>
   <updated>2015-09-21T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2015/09/21/cgal-47-beta2</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.7-beta2&quot;&gt;Download CGAL-4.7-beta2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.7/Manual/index.html&quot;&gt;CGAL-4.7-beta2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.7 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2015/04/19/cgal-46&quot;&gt;CGAL 4.6&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The minimum required version of CMake is now 2.8.11. CMake versions
3.1, 3.2, and 3.3 are supported.&lt;/li&gt;
    &lt;li&gt;All Qt4 demos have been updated and now require Qt5 to be compiled.
Qt5 version 5.3 or higher is required. The support for Qt4 is
dropped. To compile libCGAL_Qt5 and demos, you must set the cmake
or environment variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qt5_DIR&lt;/code&gt; to point to the path to the
directory containing the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qt5Config.cmake&lt;/code&gt; created by your Qt5
installation. If you are using the open source edition it should be
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/path-to/qt-everywhere-opensource-src-&amp;lt;version&amp;gt;/qtbase/lib/cmake/Qt5&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The code of the 3D demos now uses modern OpenGL, with shaders,
instead of the fixed pipeline API of OpenGL-1.&lt;/li&gt;
    &lt;li&gt;The Microsoft Windows Visual C++ compiler 2015 (VC14) is now
supported. However, since this compiler is not officially supported
by Intel TBB 4.4 and Qt 5.5 (the latest versions available at the
time of this release), the parallelism features of CGAL and Qt5
demos will not work.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;l-infinity-segment-delaunay-graphs-new-package&quot;&gt;L Infinity Segment Delaunay Graphs (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The package provides the geometric traits for constructing the
segment Delaunay graph in the max-norm (L Infinity). The traits also
contain methods to draw the edges of the dual of the segment
Delaunay graph in the max-norm i.e., the segment Voronoi diagram in
the max-norm. The algorithm and traits rely on the segment Delaunay
graph algorithm and traits under the Euclidean distance. The segment
Voronoi diagram in the max-norm has applications in VLSI CAD.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;advancing-front-surface-reconstruction-new-package&quot;&gt;Advancing Front Surface Reconstruction (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package provides a greedy algorithm for surface reconstruction
from an unorganized point set. Starting from a seed facet, a
piecewise linear surface is grown by adding Delaunay triangles one
by one. The most plausible triangles are added first, in a way that
avoids the appearance of topological singularities.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-shortest-paths-new-package&quot;&gt;Triangulated Surface Mesh Shortest Paths (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The package provides methods for computing shortest path on
triangulated surface meshes. Given a set of source points on the
surface, this package provides a data structure that can efficiently
provides the shortest path from any point on the surface to the
sources points. There is no restriction on the genus or the number
of connected components of the mesh.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-skeletonization-new-package&quot;&gt;Triangulated Surface Mesh Skeletonization (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package provides a (1D) curve skeleton extraction algorithm for
a triangulated polygonal mesh without borders based on the mean
curvature flow. The particularity of this skeleton is that it
captures the topology of the input. For each skeleton vertex one can
obtain its location and its corresponding vertices from the input
mesh. The code is generic and works with any model of the
`FaceListGraph` concept.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-point-set-shape-detection-new-package&quot;&gt;3D Point-Set Shape Detection (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package implements the efficient RANSAC method for shape
detection, contributed by Schnabel et al. From an unstructured point
set with unoriented normals, the algorithm detects a set of shapes.
Five types of primitive shapes are provided by this package: plane,
sphere, cylinder, cone and torus. Detecting other types of shapes is
possible by implementing a class derived from a base shape.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-visibility-new-package&quot;&gt;2D Visibility (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package provides several variants to compute the visibility
area of a point within polygonal regions in two dimensions.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing-new-package&quot;&gt;Polygon Mesh Processing (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package implements a collection of methods and classes for
polygon mesh processing, ranging from basic operations on simplices,
to complex geometry processing algorithms. The implementation of
this package mainly follows algorithms and references given in
Botsch et al.’s book on polygon mesh processing.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Support for unordered sets and maps of the stdlib and of boost for
handle and index classes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;approximation-of-ridges-and-umbilics-on-triangulated-surface-meshes&quot;&gt;Approximation of Ridges and Umbilics on Triangulated Surface Meshes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package now supports any model of the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceGraph&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The package no longer supports models of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TriangulatedSurfaceMesh&lt;/code&gt; which are not at the same time models of
the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceGraph&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-geometry-kernel&quot;&gt;dD Geometry Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Epick_d gains 3 new functors: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Construct_circumcenter_d&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compute_squared_radius_d&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Side_of_bounded_sphere_d&lt;/code&gt;. Those are
essential for the computation of alpha-shapes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Introduced a new traits class, called
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polycurve_traits_2&amp;lt;SubcurveTraits&amp;gt;&lt;/code&gt;, which handles general
piece-wise (polycurve) curves. The pieces do not necessarily have to
be linear.&lt;/li&gt;
    &lt;li&gt;Introduced two new concepts called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrangementApproximateTraits_2&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrangementConstructXMonotoneCurveTraits_2&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The existing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrangementLandmarkTraits_2&lt;/code&gt; concept, which has
two requirements, now refines the two respective concepts above.&lt;/li&gt;
    &lt;li&gt;The template parameter of the existing
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polyline_traits_2&amp;lt;SegmentTraits&amp;gt;&lt;/code&gt; template must be
substituted with a traits class that is a model of the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrangementConstructXMonotoneTraits_2&lt;/code&gt; concept among the other
when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polyline_traits_2&lt;/code&gt; is instantiated.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-minkowski-sums&quot;&gt;2D Minkowski Sums&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added support for polygons with holes and optimized the construction
of Minkowski sums.&lt;/li&gt;
    &lt;li&gt;Introduced an implementation of the “reduced convolution”
method, a variant of the method described in “2D Minkowski Sum
of Polygons Using Reduced Convolution” by Behar and Lien. The
new method supports polygons with holes and in many cases out
pergorms the implementation of the exsisting (full) convolution
method.&lt;/li&gt;
    &lt;li&gt;Introduced two new classes that decompose polygons into convex
pieces (models of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PolygonConvexDecomposition_2&lt;/code&gt; concept)
based on vertical decomposition and constrained Delaunay
triangulation, respectively. These new models also support the
convex decomposition of polygons with holes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-periodic-triangulations&quot;&gt;3D Periodic Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Renamed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_triangulation_traits_3&lt;/code&gt; to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_Delaunay_triangulation_traits_3&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Renamed the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3TriangulationTraits_3&lt;/code&gt; to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3DelaunayTriangulationTraits_3&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Created &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_triangulation_traits_3&lt;/code&gt; and the concept
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3TriangulationTraits_3&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-conforming-triangulations-and-meshes&quot;&gt;2D Conforming Triangulations and Meshes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added an optimization method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::lloyd_optimize_mesh_2()&lt;/code&gt; that
implements the Lloyd (or Centroidal Voronoi Tesselation)
optimization algorithm in a Constrained Delaunay Triangulation. For
optimization, the triangulation data structure on which the mesher
relies needs its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VertexBase&lt;/code&gt; template parameter to be a model of
the new concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DelaunayMeshVertexBase_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing-and-surface-reconstruction-from-point-sets&quot;&gt;Point Set Processing and Surface Reconstruction from Point Sets&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::compute_vcm()&lt;/code&gt; for computing the Voronoi
Covariance Measure (VCM) of a point set. The output of this function
can be used with the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::vcm_is_on_feature_edge()&lt;/code&gt; to
determine whether a point is on or close to a feature edge. The
former function is also internally used by
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::vcm_estimate_normals()&lt;/code&gt; to estimate the normals of a point
set and it is particularly suited to point sets with noise.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;spatial-sorting&quot;&gt;Spatial Sorting&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the possibility to sort points on a sphere along a space-filling
curve using the functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::hilbert_sort_on_sphere&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::spatial_sort_on_sphere&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;geometric-object-generators&quot;&gt;Geometric Object Generators&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added new random generator of points in a 2D and 3D triangle and in a
tetrahedron (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random_points_in_triangle_2&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random_points_in_triangle_3&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random_points_in_tetrahedron_3&lt;/code&gt;).&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.6.3 released</title>
   <link href="http://www.cgal.org/2015/09/21/cgal-463/"/>
   <updated>2015-09-21T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2015/09/21/cgal-463</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.6.3&quot;&gt;Download CGAL-4.6.3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.6.3/Manual/index.html&quot;&gt;CGAL-4.6.3 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.6.1 is a bug-fix release for &lt;a href=&quot;../../../../2015/04/19/cgal-46&quot;&gt;CGAL 4.6&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2015/08/20/cgal-462&quot;&gt;CGAL 4.6.2&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=milestone%3A4.6.3&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.6.2 released</title>
   <link href="http://www.cgal.org/2015/08/20/cgal-462/"/>
   <updated>2015-08-20T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2015/08/20/cgal-462</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.6.2&quot;&gt;Download CGAL-4.6.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.6.2/Manual/index.html&quot;&gt;CGAL-4.6.2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.6.1 is a bug-fix release for &lt;a href=&quot;../../../../2015/04/19/cgal-46&quot;&gt;CGAL 4.6&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2015/06/28/cgal-461&quot;&gt;CGAL 4.6.1&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=milestone%3A4.6.2&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ SIGGRAPH 2015</title>
   <link href="http://www.cgal.org/news/2015/08/09/siggraph-2015/"/>
   <updated>2015-08-09T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2015/08/09/siggraph-2015</id>
   <content type="html">
&lt;p&gt;Visit the CGAL Project on Booth No. 328 at the exhibition of &lt;a href=&quot;http://s2015.siggraph.org/&quot;&gt;SIGGRAPH 2015&lt;/a&gt;,
Los Angeles USA, 9-13 Aug 2015.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.7 beta1 released</title>
   <link href="http://www.cgal.org/2015/08/07/cgal-47-beta1/"/>
   <updated>2015-08-07T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2015/08/07/cgal-47-beta1</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.7-beta1&quot;&gt;Download CGAL-4.7-beta1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.7/Manual/index.html&quot;&gt;CGAL-4.7-beta1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.7 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2015/04/19/cgal-46&quot;&gt;CGAL 4.6&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The minimum required version of CMake is now 2.8.11. CMake versions
3.1, 3.2, and 3.3 are supported.&lt;/li&gt;
    &lt;li&gt;All Qt4 demos have been updated and now require Qt5 to be compiled.
Qt5 version 5.3 or higher is required. The support for Qt4 is
dropped. To compile libCGAL_Qt5 and demos, you must set the cmake
or environment variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qt5_DIR&lt;/code&gt; to point to the path to the
directory containing the file &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qt5Config.cmake&lt;/code&gt; created by your Qt5
installation. If you are using the open source edition it should be
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/path-to/qt-everywhere-opensource-src-&amp;lt;version&amp;gt;/qtbase/lib/cmake/Qt5&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The code of the 3D demos now uses modern OpenGL, with shaders,
instead of the fixed pipeline API of OpenGL-1.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Support for unordered sets and maps of the stdlib and of boost for
handle and index classes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;l-infinity-segment-delaunay-graphs-new-package&quot;&gt;L Infinity Segment Delaunay Graphs (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The package provides the geometric traits for constructing the
segment Delaunay graph in the max-norm (L Infinity). The traits also
contain methods to draw the edges of the dual of the segment
Delaunay graph in the max-norm i.e., the segment Voronoi diagram in
the max-norm. The algorithm and traits rely on the segment Delaunay
graph algorithm and traits under the Euclidean distance. The segment
Voronoi diagram in the max-norm has applications in VLSI CAD.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;advancing-front-surface-reconstruction-new-package&quot;&gt;Advancing Front Surface Reconstruction (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package provides a greedy algorithm for surface reconstruction
from an unorganized point set. Starting from a seed facet, a
piecewise linear surface is grown by adding Delaunay triangles one
by one. The most plausible triangles are added first, in a way that
avoids the appearance of topological singularities.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-shortest-paths-new-package&quot;&gt;Triangulated Surface Mesh Shortest Paths (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The package provides methods for computing shortest path on
triangulated surface meshes. Given a set of source points on the
surface, this package provides a data structure that can efficiently
provides the shortest path from any point on the surface to the
sources points. There is no restriction on the genus or the number
of connected components of the mesh.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-skeletonization-new-package&quot;&gt;Triangulated Surface Mesh Skeletonization (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package provides a (1D) curve skeleton extraction algorithm for
a triangulated polygonal mesh without borders based on the mean
curvature flow. The particularity of this skeleton is that it
captures the topology of the input. For each skeleton vertex one can
obtain its location and its corresponding vertices from the input
mesh. The code is generic and works with any model of the
`FaceListGraph` concept.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-point-set-shape-detection-new-package&quot;&gt;3D Point-Set Shape Detection (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package implements the efficient RANSAC method for shape
detection, contributed by Schnabel et al. From an unstructured point
set with unoriented normals, the algorithm detects a set of shapes.
Five types of primitive shapes are provided by this package: plane,
sphere, cylinder, cone and torus. Detecting other types of shapes is
possible by implementing a class derived from a base shape.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-visibility-new-package&quot;&gt;2D Visibility (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package provides several variants to compute the visibility
area of a point within polygonal regions in two dimensions.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygon-mesh-processing-new-package&quot;&gt;Polygon Mesh Processing (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package implements a collection of methods and classes for
polygon mesh processing, ranging from basic operations on simplices,
to complex geometry processing algorithms. The implementation of
this package mainly follows algorithms and references given in
Botsch et al.’s book on polygon mesh processing.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;approximation-of-ridges-and-umbilics-on-triangulated-surface-meshes&quot;&gt;Approximation of Ridges and Umbilics on Triangulated Surface Meshes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package now supports any model of the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceGraph&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The package no longer supports models of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TriangulatedSurfaceMesh&lt;/code&gt; which are not at the same time models of
the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceGraph&lt;/code&gt;.
      &lt;h3 id=&quot;dd-geometry-kernel&quot;&gt;dD Geometry Kernel&lt;/h3&gt;
    &lt;/li&gt;
    &lt;li&gt;Epick_d gains 3 new functors: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Construct_circumcenter_d&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compute_squared_radius_d&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Side_of_bounded_sphere_d&lt;/code&gt;. Those are
essential for the computation of alpha-shapes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Introduced a new traits class, called
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polycurve_traits_2&amp;lt;SubcurveTraits&amp;gt;&lt;/code&gt;, which handles general
piece-wise (polycurve) curves. The pieces do not necessarily have to
be linear.&lt;/li&gt;
    &lt;li&gt;Introduced two new concepts called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrangementApproximateTraits_2&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrangementConstructXMonotoneCurveTraits_2&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The existing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrangementLandmarkTraits_2&lt;/code&gt; concept, which has
two requirements, now refines the two respective concepts above.&lt;/li&gt;
    &lt;li&gt;The template parameter of the existing
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polyline_traits_2&amp;lt;SegmentTraits&amp;gt;&lt;/code&gt; template must be
substituted with a traits class that is a model of the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrangementConstructXMonotoneTraits_2&lt;/code&gt; concept among the other
when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polyline_traits_2&lt;/code&gt; is instantiated.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-minkowski-sums&quot;&gt;2D Minkowski Sums&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added support for polygons with holes and optimized the construction
of Minkowski sums.&lt;/li&gt;
    &lt;li&gt;Introduced an implementation of the “reduced convolution”
method, a variant of the method described in “2D Minkowski Sum
of Polygons Using Reduced Convolution” by Behar and Lien. The
new method supports polygons with holes and in many cases out
pergorms the implementation of the exsisting (full) convolution
method.&lt;/li&gt;
    &lt;li&gt;Introduced two new classes that decompose polygons into convex
pieces (models of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PolygonConvexDecomposition_2&lt;/code&gt; concept)
based on vertical decomposition and constrained Delaunay
triangulation, respectively. These new models also support the
convex decomposition of polygons with holes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-periodic-triangulations&quot;&gt;3D Periodic Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Renamed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_triangulation_traits_3&lt;/code&gt; to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_Delaunay_triangulation_traits_3&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Renamed the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3TriangulationTraits_3&lt;/code&gt; to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3DelaunayTriangulationTraits_3&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Created &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3_triangulation_traits_3&lt;/code&gt; and the concept
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Periodic_3TriangulationTraits_3&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-conforming-triangulations-and-meshes&quot;&gt;2D Conforming Triangulations and Meshes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added an optimization method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::lloyd_optimize_mesh_2()&lt;/code&gt; that
implements the Lloyd (or Centroidal Voronoi Tesselation)
optimization algorithm in a Constrained Delaunay Triangulation. For
optimization, the triangulation data structure on which the mesher
relies needs its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VertexBase&lt;/code&gt; template parameter to be a model of
the new concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DelaunayMeshVertexBase_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing-and-surface-reconstruction-from-point-sets&quot;&gt;Point Set Processing and Surface Reconstruction from Point Sets&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::compute_vcm()&lt;/code&gt; for computing the Voronoi
Covariance Measure (VCM) of a point set. The output of this function
can be used with the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::vcm_is_on_feature_edge()&lt;/code&gt; to
determine whether a point is on or close to a feature edge. The
former function is also internally used by
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::vcm_estimate_normals()&lt;/code&gt; to estimate the normals of a point
set and it is particularly suited to point sets with noise.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;spatial-sorting&quot;&gt;Spatial Sorting&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added the possibility to sort points on a sphere along a space-filling
curve using the functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::hilbert_sort_on_sphere&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::spatial_sort_on_sphere&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;geometric-object-generators&quot;&gt;Geometric Object Generators&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added new random generator of points in a 2D and 3D triangle and in a
tetrahedron (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random_points_in_triangle_2&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random_points_in_triangle_3&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random_points_in_tetrahedron_3&lt;/code&gt;).&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.6.1 released</title>
   <link href="http://www.cgal.org/2015/06/28/cgal-461/"/>
   <updated>2015-06-28T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2015/06/28/cgal-461</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.6.1&quot;&gt;Download CGAL-4.6.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.6.1/Manual/index.html&quot;&gt;CGAL-4.6.1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.6.1 is a bug-fix release for &lt;a href=&quot;../../../../2015/04/19/cgal-46&quot;&gt;CGAL 4.6&lt;/a&gt;.
The list of fixed bugs since &lt;a href=&quot;../../../../2015/04/19/cgal-46&quot;&gt;CGAL 4.6&lt;/a&gt;
can be accessed &lt;a href=&quot;https://github.com/CGAL/cgal/issues?q=milestone%3A4.6.1&quot;&gt;on Github&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.6 released</title>
   <link href="http://www.cgal.org/2015/04/19/cgal-46/"/>
   <updated>2015-04-19T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2015/04/19/cgal-46</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.6&quot;&gt;Download CGAL-4.6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.6/Manual/index.html&quot;&gt;CGAL-4.6 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.6 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2015/02/15/cgal-452&quot;&gt;CGAL 4.5.2&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The required version of Boost is now 1.48 or higher.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-polyline-simplification-new-package&quot;&gt;2D Polyline Simplification (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package enables to simplify polylines with the guarantee that
the topology of the polylines does not change. This can be done for
a single polyline as well as for a set of polyline constraints in a
constrained triangulation. The simplification can be controlled with
cost and stop functions.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-generalized-barycentric-coordinates-new-package&quot;&gt;2D Generalized Barycentric Coordinates (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package offers an efficient and robust implementation of
two-dimensional closed-form generalized barycentric coordinates
defined for simple two-dimensional polygons.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;scale-space-surface-reconstruction-new-package&quot;&gt;Scale-Space Surface Reconstruction (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This new package provides a class gathering a dedicated smoothing
algorithm and some convenience functions to help the creation of a
surface out of a point set using the 3D Alpha Shapes package. The
particularity of this reconstruction pipeline is that the input
point are in the output and no new points are created. Note that in
the current version, the output is a triangle soup that is not
necessarily a valid (manifold) polyhedral surface.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-new-package&quot;&gt;Surface Mesh (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The surface mesh class provided by this package is an implementation
of the halfedge data structure allowing to represent polyhedral
surfaces. It is an alternative to the packages &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polyhedron_3&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::HalfedgeDS&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-triangulation-new-package&quot;&gt;dD Triangulation (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This new package provides classes for manipulating triangulations in
Euclidean spaces whose dimension can be specified at compile-time or
at run-time. It also provides a class that represents Delaunay
triangulations.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-convex-hulls-and-delaunay-triangulations&quot;&gt;dD Convex Hulls and Delaunay Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package is deprecated and the new package Triangulation should
be used instead.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-geometry-kernel&quot;&gt;dD Geometry Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;It has been reported that the recently introduced &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epick_d&lt;/code&gt; kernel
may not work with Intel C++ Compiler prior to version 15.
Documentation has been updated.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-convex-hulls&quot;&gt;3D Convex Hulls&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;halfspace_intersection_3&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;halfspace_intersection_with_constructions_3&lt;/code&gt; to compute the
intersection of halfspaces defining a closed polyhedron.&lt;/li&gt;
    &lt;li&gt;Fixed a bug introduced in CGAL 4.5 that can appear while computing the
convex hull of coplanar points.&lt;/li&gt;
    &lt;li&gt;Fixed a robustness issue in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Convex_hull_traits_3&lt;/code&gt;. This traits is
used by default with the kernel
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exact_predicates_inexact_constructions_kernel&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::convex_hull_incremental_3&lt;/code&gt; is deprecated and the
function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convex_hull_3&lt;/code&gt; should be used instead.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;combinatorial-maps-and-linear-cell-complex&quot;&gt;Combinatorial Maps and Linear Cell Complex&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;correct_invalid_attributes&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set_automatic_attributes_management&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;are_attributes_automatically_managed&lt;/code&gt; methods in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CombinatorialMap&lt;/code&gt;
concept. This allows high level operations to not update non void
attributes during massive calls of these operations, but only after
the end of their executions.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;2D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Constrained_triangulation_plus_2&lt;/code&gt; now can handle
polylines as constraints.&lt;/li&gt;
    &lt;li&gt;As a consequence a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Constraint_id&lt;/code&gt; has been introduced which
replaces &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pair&amp;lt;Vertex_handle,Vertex_handle&amp;gt;&lt;/code&gt; as identifier of a
constraint.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added member functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;output_boundary_to_off&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;output_facets_in_complex_to_off&lt;/code&gt; in the class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Mesh_complex_3_in_triangulation_3&lt;/code&gt; to export the boundary of
a domain or a subdomain.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-fast-intersection-and-distance-computation&quot;&gt;3D Fast Intersection and Distance Computation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added new constructors to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_halfedge_graph_segment_primitive&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_face_graph_triangle_primitive&lt;/code&gt; in order to be able to build
primitives one by one.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;spatial-searching&quot;&gt;Spatial Searching&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a bug in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Splitters.h&lt;/code&gt; sliding midpoint rule, where
degenerated point sets (e.g.,points on segment) caused the kd-tree
to get linear.&lt;/li&gt;
    &lt;li&gt;Improved performance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Orthogonal_k_neighbor_search&lt;/code&gt;. Note that VC
2013 does not compile &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::container::deque&lt;/code&gt; of Boost 1_55 and
does hence have a workaround which does not have the improvement.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OrthogonalDistance&lt;/code&gt; has new
function overloads for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;min_distance_to_rectangle&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max_distance_to_rectangle&lt;/code&gt; with an additional reference parameter
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::vector&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The order of the points in the iterator range
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[tree.begin(),tree.end()]&lt;/code&gt; is not the order of insertion of the
points into the tree. This was not guaranteed before but might have
been observed and exploited by users.&lt;/li&gt;
    &lt;li&gt;Derived &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kd_tree_leaf_node&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kd_tree_internal_node&lt;/code&gt; from
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kd_tree_node&lt;/code&gt; to save memory.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;geometric-object-generators&quot;&gt;Geometric Object Generators&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a new function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;random_convex_hull_in_disc_2&lt;/code&gt; that efficiently
generates a random polygon as the convex hull of uniform random
points chosen in a disc.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>A New CGAL Homepage</title>
   <link href="http://www.cgal.org/2015/04/01/a-new-cgal-homepage/"/>
   <updated>2015-04-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2015/04/01/a-new-cgal-homepage</id>
   <content type="html">
&lt;p&gt;Already back in 2011, we tried to upgrade the CGAL website to newer technology.&lt;p&gt;

&lt;p&gt;As the reactions were devastating (&quot;No advertisements please&quot;, &quot;And
what if I am even to shy to sign up on Parship?&quot;), we decided to roll
back.&lt;p&gt;

&lt;p&gt;Since then, more and more people reported that they had a hard time
with our site on their tablet or smartphone. We thought that it is
time for a fresh start using jekyll and bootstrap to offer a site
with responsive web design.&lt;p&gt;

&lt;p&gt;Besides responsiveness, we thought it is time to get a slightly cooler
look: A large image on the home page, something between &lt;a href=&quot;http://www.airbnb.com/&quot;&gt;airbnb&lt;/a&gt;
and &lt;a href=&quot;http://www.abercrombie.com/&quot;&gt;Abercrombie&amp;amp;Fitch&lt;/a&gt;.&lt;/p&gt; 

&lt;p&gt;What our users do, most often has a higher coolness factor than
a geometric algorithm with &lt;em&gt;O(n log log n)&lt;/em&gt; amortized runtime complexity. 
We identified and contacted some users, who were willing to provide us with 
images and testimonials.
We today start our series of &lt;em&gt;User Portraits&lt;/em&gt; 
with &lt;a href=&quot;https://cgal.github.io/cgal-web/news/2015/04/01/SpaceX/&quot;&gt;SpaceX&lt;/a&gt;. Stay tuned, even if you think
that SpaceX will be hard to beat.&lt;/p&gt;
&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL User Portrait: SpaceX</title>
   <link href="http://www.cgal.org/news/2015/04/01/SpaceX/"/>
   <updated>2015-04-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2015/04/01/SpaceX</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;http://www.spacex.com/&quot;&gt;SpaceX&lt;/a&gt; designs, manufactures,
and launches the world's most advanced rockets and spacecraft.  The
company was founded in 2002 to revolutionize space technology, with
the ultimate goal of enabling people to live on other planets.&lt;/p&gt;

&lt;h3&gt;Standing on the Shoulders of Giants&lt;/h3&gt;

&lt;p&gt;Key to their success is that they embrace disruptive open source
technology such as the 
&lt;a href=&quot;http://www.raspberrypi.org/&quot;&gt;Raspberry Pi&lt;/a&gt; to replace custom
hardware that, when delivered to the customer, is almost immediately obsolete, 
&lt;a href=&quot;http://eigen.tuxfamily.org&quot;&gt;Eigen&lt;/a&gt; to replace old
Fortran libraries, 
&lt;a href=&quot;http://www.makerbot.com/&quot;&gt;MakerBot&lt;/a&gt; to enable their engineers
to adapt printing hardware to their needs, going far beyond what can be achieved with 
commercial 3D printers, 
and &lt;a href=&quot;http://www.cgal.org&quot;&gt;CGAL&lt;/a&gt;, as it is cutting edge technology in 
geometric computing that enables their engineers to come up with the ultimate
drivers for the Makerbot.&lt;p&gt;



&lt;blockquote&gt;
&lt;p&gt;&quot;With the CGAL Slicer based on the 
&lt;a href=&quot;http://doc.cgal.org/latest/Manual/packages.html#PkgAABB_treeSummary&quot;&gt;AABB Tree&lt;/a&gt;, as a key routine of our 
in-house 3D printing software, robust and high-performing
engine parts can be created at a fraction of the cost and time of
traditional manufacturing methods.  It enables us to push the boundaries
of what additive manufacturing can do in the 21st century, ultimately
making our vehicles more efficient, reliable and robust than ever
before.&quot;&lt;/p&gt;
 &lt;p&gt;&lt;small&gt;Elon Musk, Chief Designer and CEO,SpaceX&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;h3&gt;Exponential Leverage&lt;/h3&gt;

&lt;p&gt;SpaceX is a privately held company, with relatively few engineers
compared to US companies and institutions of the industrial-military complex.
It is hence a must for them to use off-the-shelf software and hardware.
Their secret is to identify &lt;em&gt;exponential levers&lt;/em&gt;. In CGAL we
use Eigen, GMP, Mpfr, RS, Qt, boost, because we identified them as
the leaders in their field.&lt;/p&gt;


&lt;blockquote&gt;
&lt;p&gt;&quot;The leverage is exponential, if you use a technology that exploits
best a technology, that exploits best a technology, that exploits best a technology,....  We identified
software and hardware projects that do not suffer from the &lt;em&gt;Not Invented Here&lt;/em&gt;
syndrome. They lead the pack, and they are in line with our technology strategy --
the CGAL project is part of this elite.&quot;&lt;/p&gt;
 &lt;p&gt;&lt;small&gt;M.T. Ehjoh, CTO, SpaceX&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h3&gt;Hello Europe&lt;/h3&gt;

&lt;p&gt;SpaceX can not only pick the best technologies available worlwide, 
but it also does not limit itself to doing joint research with
Ivy Leage universities. That turns out to be a key problem for the Nasa.&lt;p&gt;

&lt;p&gt;SpaceX works with the &lt;a href=&quot;http://www.zib.de&quot;&gt;Zuse Institut Berlin&lt;/a&gt; in
Germany, on novel strategies to produce fuel from sunlight, water and carbon dioxide.
Their project&lt;a href=&quot;http://www.zib.de/projects/plasmonic-concepts-solar-fuel-generation&quot;&gt;
Plasmonic Concepts for Solar Fuel Generation&lt;/a&gt; uses the 
&lt;a href=&quot;http://doc.cgal.org/latest/Manual/packages.html#PkgPeriodic3Triangulation3Summary&quot;&gt;Periodic Triangulations&lt;/a&gt; of CGAL, as there are several thousand of the 0.5 micron wide helices in a single &lt;em&gt;Sweat&lt;/em&gt;&amp;reg; panel.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&quot;Transforming sweat and exhaled out CO&lt;sub&gt;2&lt;/sub&gt; with the help of the sun to fuel sounds space,
but that's what SpaceX needs for the spacecraft they currently design to bring women to Mars.
We could not have designed the helices with a classical mesh generator.
The only way to avoid simulation artefacts due to artificial boundary conditions was to switch to the periodic space.&quot;&lt;/p&gt;
&lt;p&gt;&lt;small&gt;Prof. Dr. Frank Schmidt, ZIB&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;h3&gt;Raspberry Fields Forever&lt;/h3&gt;

&lt;p&gt;Combine the parallel version of the CGAL mesh generation components, 
with a Raspberry Pi&lt;sup&gt;3&lt;/sup&gt; consisting of 2048&lt;sup&gt;3&lt;/sup&gt; of these
low cost single board computers, and
you can beat Cray at 5&amp;#37; of its costs. The tricky part is to
get the &lt;a href=&quot;http://doc.cgal.org/latest/Manual/packages.html#PkgAlgebraicFoundationsSummary&quot;&gt;Algebraic Foundations&lt;/a&gt; layer working, and to have &lt;a href=&quot;http://doc.cgal.org/latest/Number_types/group__PkgNumberTypes.html#gaad1ab6a12affa6daba8724bd40523753&quot;&gt;&lt;em&gt;CGAL_PI&lt;/em&gt;&lt;/a&gt; at
arbitrary precision.&lt;p&gt;

&lt;blockquote&gt;
&lt;p&gt;&quot;It is incredible what you can get from SMEs nowadays. 
GeometryFactory, based in Sophia-Antipolis, the French Silicon Valley,
did an incredible job when they ported the 3D mesh generator developed at Inria
(&lt;em&gt;Inventeurs du Monde numerique&lt;/em&gt;) to the Raspberry Cluster.&quot;&lt;/p&gt;
 &lt;p&gt;&lt;small&gt;Prof. John-Daniel Boassona, Geometry Evangelist, SpaceX&lt;/small&gt;&lt;/p&gt;
&lt;/blockquote&gt;


&lt;p&gt;A space radiation harded Raspberry Pi is also used in the RTS&amp;reg;
KP 32/16. With the help of the CGAL 
&lt;a href=&quot;http://doc.cgal.org/latest/Manual/packages.html#PkgInterpolation2Summary&quot;&gt;Interpolation&lt;/a&gt; package the voice of astronauts is smoothed,  and the voice of control unsmoothed.
&lt;/p&gt;


&lt;p&gt;&lt;b&gt;We work hard to make all the above a reality - so far it is only an april joke.
It even came with a &lt;a href=&quot;https://cgal.github.io/cgal-web/April2015.html&quot;&gt;gallery.&lt;/a&gt;&lt;/b&gt;&lt;/p&gt;

&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Point Set Shape Detection</title>
   <link href="http://www.cgal.org/2015/03/15/cgal-wipRansac/"/>
   <updated>2015-03-15T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2015/03/15/cgal-wipRansac</id>
   <content type="html">
&lt;h3&gt;Sven Oesau, Yannick Verdi&amp;eacute;, Cl&amp;eacute;ment Jamin, and Pierre Alliez&lt;/h3&gt;
&lt;h4&gt; &lt;a href=&quot;https://team.inria.fr/titane/&quot; target=&quot;_blank&quot;&gt;TITANE&lt;/a&gt; Inria&lt;/h4&gt;

&lt;p&gt;This CGAL component will implement the Efficient RANSAC method [1] for
primitive shape detection. From an unstructured point set with unoriented normals, the algorithm is
able to detect a set of primitive shapes (plane, sphere, cylinder,
cone and torus).
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Status:&lt;/b&gt; Submitted to the Editorial Board and targeted for CGAL 4.7, Autumn 2015&lt;/p&gt;

&lt;h4&gt;Bibliography&lt;/h4&gt;
&lt;p&gt;
[1] Ruwen Schnabel, Roland Wahl, and Reinhard Klein, 
&lt;a href=&quot;http://cg.cs.uni-bonn.de/en/publications/paper-details/schnabel-2007-efficient/&quot;&gt;Efficient RANSAC for Point-Cloud Shape Detection&lt;/a&gt;, Computer Graphics Forum (June 2007), 26:2(214-226).
&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>Triangulated Surface Mesh Skeletonization</title>
   <link href="http://www.cgal.org/2015/02/27/cgal-wipMCF/"/>
   <updated>2015-02-27T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2015/02/27/cgal-wipMCF</id>
   <content type="html">
&lt;h3&gt;Xiang Gao, Sebastien Loriot, and Andrea Tagliasacchi&lt;/h3&gt;
&lt;h4&gt; &lt;a href=&quot;http://www.geometryfactory.com&quot; target=&quot;_blank&quot;&gt;GeometryFactory&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This new package provides a (1D) curve skeleton extraction algorithm for 
 a triangulated poylgonal mesh without borders based on the mean curvature flow.
 The particularity of this skeleton is that it has the same topology
 as the input mesh. For each skeleton vertex, one can obtain its location
 and its corresponding vertices of the input mesh. 
 The code is generic and works with any model of the `HalfedgeGraph` concept.
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Status:&lt;/b&gt; Submitted to the Editorial Board and targeted for CGAL 4.7, Autumn 2015&lt;/p&gt;

&lt;h4&gt;Bibliography&lt;/h4&gt;
&lt;p&gt;
[1] Andrea Tagliasacchi, Ibraheem Alhashim, Matt Olson, and Hao Zhang. Mean curvature skeletons. Computer Graphics Forum (Proceedings of the Symposium on Geometry Processing), 31(5):1735–1744, 2012.
&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.6 beta1 released</title>
   <link href="http://www.cgal.org/2015/02/20/cgal-46-beta1/"/>
   <updated>2015-02-20T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2015/02/20/cgal-46-beta1</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.6-beta1&quot;&gt;Download CGAL-4.6-beta1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.6/Manual/index.html&quot;&gt;CGAL-4.6-beta1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.6 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2015/02/15/cgal-452&quot;&gt;CGAL 4.5.2&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The required version of Boost is now 1.48 or higher.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-polyline-simplification-new-package&quot;&gt;2D Polyline Simplification (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package enables to simplify polylines with the guarantee that
the topology of the polylines does not change. This can be done for
a single polyline as well as for a set of polyline constraints in a
constrained triangulation. The simplification can be controlled with
cost and stop functions.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-generalized-barycentric-coordinates-new-package&quot;&gt;2D Generalized Barycentric Coordinates (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package offers an efficient and robust implementation of
two-dimensional closed-form generalized barycentric coordinates
defined for simple two-dimensional polygons.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;scale-space-surface-reconstruction-new-package&quot;&gt;Scale-Space Surface Reconstruction (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This new package provides a class gathering a dedicated smoothing
algorithm and some convenience functions to help the creation of a
surface out of a point set using the 3D Alpha Shapes package. The
particularity of this reconstruction pipeline is that the input
point are in the output and no new points are created. Note that in
the current version, the output is a triangle soup that is not
necessarily a valid (manifold) polyhedral surface.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-new-package&quot;&gt;Surface Mesh (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The surface mesh class provided by this package is an implementation
of the halfedge data structure allowing to represent polyhedral
surfaces. It is an alternative to the packages &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polyhedron_3&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::HalfedgeDS&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-triangulation-new-package&quot;&gt;dD Triangulation (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This new package provides classes for manipulating triangulations in
Euclidean spaces whose dimension can be specified at compile-time or
at run-time. It also provides a class that represents Delaunay
triangulations.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-convex-hulls-and-delaunay-triangulations&quot;&gt;dD Convex Hulls and Delaunay Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package is deprecated and the new package Triangulation should
be used instead.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-geometry-kernel&quot;&gt;dD Geometry Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;It has been reported that the recently introduced &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epick_d&lt;/code&gt; kernel
may not work with Intel C++ Compiler prior to version 15.
Documentation has been updated.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-convex-hulls&quot;&gt;3D Convex Hulls&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;halfspace_intersection_3&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;halfspace_intersection_with_constructions_3&lt;/code&gt; to compute the
intersection of halfspaces defining a closed polyhedron.&lt;/li&gt;
    &lt;li&gt;Fixed a bug introduced in CGAL 4.5 that can appear while computing the
convex hull of coplanar points.&lt;/li&gt;
    &lt;li&gt;Fixed a robustness issue in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Convex_hull_traits_3&lt;/code&gt;. This traits is
used by default with the kernel
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exact_predicates_inexact_constructions_kernel&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;combinatorial-maps-and-linear-cell-complex&quot;&gt;Combinatorial Maps and Linear Cell Complex&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;correct_invalid_attributes&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set_automatic_attributes_management&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;are_attributes_automatically_managed&lt;/code&gt; methods in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CombinatorialMap&lt;/code&gt;
concept. This allows high level operations to not update non void
attributes during massive calls of these operations, but only after
the end of their executions.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;2D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Constrained_triangulation_plus_2&lt;/code&gt; now can handle
polylines as constraints.&lt;/li&gt;
    &lt;li&gt;As a consequence a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Constraint_id&lt;/code&gt; has been introduced which
replaces &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pair&amp;lt;Vertex_handle,Vertex_handle&amp;gt;&lt;/code&gt; as identifier of a
constraint.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added member functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;output_boundary_to_off&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;output_facets_in_complex_to_off&lt;/code&gt; in the class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Mesh_complex_3_in_triangulation_3&lt;/code&gt; to export the boundary of
a domain or a subdomain.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-fast-intersection-and-distance-computation&quot;&gt;3D Fast Intersection and Distance Computation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added new constructors to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_halfedge_graph_segment_primitive&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_face_graph_triangle_primitive&lt;/code&gt; in order to be able to build
primitives one by one.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;spatial-searching&quot;&gt;Spatial Searching&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a bug in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Splitters.h&lt;/code&gt; sliding midpoint rule, where
degenerated point sets (e.g.,points on segment) caused the kd-tree
to get linear.&lt;/li&gt;
    &lt;li&gt;Improved performance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Orthogonal_k_neighbor_search&lt;/code&gt;. Note that VC
2013 does not compile &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::container::deque&lt;/code&gt; of Boost 1_55 and
does hence have a workaround which does not have the improvement.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OrthogonalDistance&lt;/code&gt; has new
function overloads for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;min_distance_to_rectangle&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max_distance_to_rectangle&lt;/code&gt; with an additional reference parameter
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::vector&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; The order of the points in the iterator range
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[tree.begin(),tree.end()]&lt;/code&gt; is not the order of insertion of the
points into the tree. This was not guaranteed before but might have
been observed and exploited by users.&lt;/li&gt;
    &lt;li&gt;Derived &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kd_tree_leaf_node&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kd_tree_internal_node&lt;/code&gt; from
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kd_tree_node&lt;/code&gt; to save memory.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;geometric-object-generators&quot;&gt;Geometric Object Generators&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a new function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;random_convex_hull_in_disc_2&lt;/code&gt; that efficiently
generates a random polygon as the convex hull of uniform random
points chosen in a disc.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.5.2 released</title>
   <link href="http://www.cgal.org/2015/02/15/cgal-452/"/>
   <updated>2015-02-15T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2015/02/15/cgal-452</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.5.2&quot;&gt;Download CGAL-4.5.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.5.2/Manual/index.html&quot;&gt;CGAL-4.5.2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a minor bug fix release. The following has been changed since
&lt;a href=&quot;../../../../2014/12/22/cgal-451&quot;&gt;CGAL 4.5.1&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a bug that prevented the compilation with recent versions of
Boost (&amp;gt;=1.56) when explicit conversions operators (from C++11)
are supported. That prevented the compilation with Microsoft Visual
Studio 2013.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-convex-hulls&quot;&gt;3D Convex Hulls&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a non-robust predicate bug that was showing up when input points
where lexicographically sorted.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a bug in the sliver perturbation optimization method. It could
create some holes on the surface of the mesh.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Polygon Mesh Processing</title>
   <link href="http://www.cgal.org/2015/01/12/cgal-wipPMP/"/>
   <updated>2015-01-12T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2015/01/12/cgal-wipPMP</id>
   <content type="html">
&lt;h3&gt;Ilker O. Yaz, Sebastien Loriot, and Jane Tournois&lt;/h3&gt;
&lt;h4&gt; &lt;a href=&quot;http://www.geometryfactory.com&quot; target=&quot;_blank&quot;&gt;GeometryFactory&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This package implements a collection of methods and classes for
polygon mesh processing, ranging from basic operations on simplices,
to complex geometry processing algorithms. The implementation of this
package mainly follows algorithms and references given in Botsch et
al.'s book on polygon mesh processing [1]&lt;/p&gt;

&lt;p&gt;The package will offer refining and fairing on a surface mesh,
hole filling, self-intersection and orientation tests, slicing a
surface mesh, and identifying its connected components.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Status:&lt;/b&gt; In preparation for submission to the Editorial Board and targeted for CGAL 4.7, Autumn 2015&lt;/p&gt;

&lt;h4&gt;Bibliography&lt;/h4&gt;
&lt;p&gt;
[1] M. Botsch, L. Kobbelt, M. Pauly, P. Alliez, and B. Lévy. Polygon mesh processing. CRC press, 2010.
&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>CGAL 4.5.1 released</title>
   <link href="http://www.cgal.org/2014/12/22/cgal-451/"/>
   <updated>2014-12-22T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2014/12/22/cgal-451</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.5.1&quot;&gt;Download CGAL-4.5.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.5.1/Manual/index.html&quot;&gt;CGAL-4.5.1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a minor bug fix release. The following has been changed since
&lt;a href=&quot;../../../../2014/10/10/cgal-45&quot;&gt;CGAL 4.5&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fix a bug in the sliver exudation preservation of boundaries.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Header-Only CGAL</title>
   <link href="http://www.cgal.org/2014/12/14/cgal-HeaderOnly/"/>
   <updated>2014-12-14T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2014/12/14/cgal-HeaderOnly</id>
   <content type="html">
&lt;h3&gt;Guillaume Damiand, and Clement Jamin&lt;/h3&gt;
&lt;h4&gt;Liris, Lyon&lt;/h4&gt;

&lt;p&gt;When you install CGAL, you typically build 4 libraries: CGAL itself, Algebraic numbers, Qt, and ImageIO.
As CGAL uses C++ templates, these libraries are rather empty, and we are working towards making them obsolete.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Status:&lt;/b&gt; Submitted to the Editorial Board and targeted for CGAL 4.7, Autumn 2015&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.5 released</title>
   <link href="http://www.cgal.org/2014/10/10/cgal-45/"/>
   <updated>2014-10-10T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2014/10/10/cgal-45</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.5&quot;&gt;Download CGAL-4.5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.5/Manual/index.html&quot;&gt;CGAL-4.5 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.5 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2014/04/04/cgal-44&quot;&gt;CGAL 4.4&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Changes in the set of supported platforms:
      &lt;ul&gt;
        &lt;li&gt;The Microsoft Windows Visual C++ compiler 2008 (VC9) is no
longer supported since CGAL-4.5.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Since CGAL version 4.0, Eigen was the recommended third-party
library to use with &lt;em&gt;Planar Parameterization of Triangulated Surface
Meshes&lt;/em&gt;, &lt;em&gt;Surface Reconstruction from Point Sets&lt;/em&gt;, &lt;em&gt;Approximation of
Ridges and Umbilics on Triangulated Surface Meshes&lt;/em&gt;, and &lt;em&gt;Estimation
of Local Differential Properties of Point-Sampled Surfaces&lt;/em&gt;
packages. From CGAL version 4.5, Taucs, Blas and Lapack are no
longer supported.&lt;/li&gt;
    &lt;li&gt;CGAL is now compatible with the new CMake version 3.0.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-deformation-new-package&quot;&gt;Triangulated Surface Mesh Deformation (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package allows to deform a triangulated surface mesh under
positional constraints of some of its vertices without requiring any
additional structure other than the surface mesh itself. The methods
provided implements an as-rigid-as-possible deformation. Note that
the main class name has changed between the 4.5-beta1 and the 4.5
releases to better match the CGAL naming conventions (from
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Deform_mesh&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Surface_mesh_deformation&lt;/code&gt;).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-major-changes&quot;&gt;CGAL and the Boost Graph Library (major changes)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Cleanup of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HalfedgeGraph&lt;/code&gt; concept. In particular:
      &lt;ul&gt;
        &lt;li&gt;Introduction of the notion of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;halfedge_descriptor&lt;/code&gt; in the
specialization of the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::graph_traits&lt;/code&gt;.&lt;/li&gt;
        &lt;li&gt;Deprecation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;halfedge_graph_traits&lt;/code&gt;.&lt;/li&gt;
        &lt;li&gt;A model of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HalfedgeGraph&lt;/code&gt; is considered as an undirected graph.
Thus any call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edges()&lt;/code&gt; should be replaced by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;halfedges()&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num_edges()&lt;/code&gt; now returns the number of (undirected) edges.&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_border_edge&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_border_halfedge&lt;/code&gt;
properties are removed. The free functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_border()&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_border_edge()&lt;/code&gt; should be used instead.&lt;/li&gt;
        &lt;li&gt;Renaming of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HalfedgeGraph&lt;/code&gt; specific free functions.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Introduction of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceGraph&lt;/code&gt; concept.&lt;/li&gt;
    &lt;li&gt;Adaptation of the package &lt;em&gt;Triangulated Surface Mesh Simplification&lt;/em&gt;
and of the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_halfedge_graph_segment_primitive&lt;/code&gt; from the
package &lt;em&gt;3D Fast Intersection and Distance Computation&lt;/em&gt; to the API
change.&lt;/li&gt;
    &lt;li&gt;Update of the package &lt;em&gt;Triangulated Surface Mesh Segmentation&lt;/em&gt; and
of the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_face_graph_triangle_primitive&lt;/code&gt; from the package
&lt;em&gt;3D Fast Intersection and Distance Computation&lt;/em&gt; to accept model of
the newly introduced concepts.&lt;/li&gt;
    &lt;li&gt;Offer &lt;em&gt;Euler&lt;/em&gt; operations as free functions for models of the graph
concepts provided by CGAL.&lt;/li&gt;
    &lt;li&gt;Specialization of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::graph_traits&lt;/code&gt; for
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenMesh::PolyMesh_ArrayKernelT&lt;/code&gt; as proof of concept. A
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenMesh::PolyMesh_ArrayKernelT&lt;/code&gt; becomes a model of the
aforementioned concepts when including
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL/boost/graph/graph_traits_PolyMesh_ArrayKernelT.h&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-geometry-kernel&quot;&gt;dD Geometry Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A new model &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epick_d&lt;/code&gt; of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel_d&lt;/code&gt; concept is introduced. It
provides better performance through arithmetic filtering and
specializations for fixed dimensions. It may not work with compilers
as old as gcc-4.2, but was tested with gcc-4.4.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-convex-hulls&quot;&gt;3D Convex Hulls&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Clean up the documentation of the concepts&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a bug in removing an unbounded curve (e.g., a ray) from an
arrangement induced by unbounded curves.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-snap-rounding&quot;&gt;2D Snap Rounding&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Replaced use of private &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kd_tree&lt;/code&gt; with CGAL’s official &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kd_tree&lt;/code&gt;
from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spatial_searching&lt;/code&gt; package; results in a small performance
gain. Removed the private &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kd_tree&lt;/code&gt; package.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;3D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added an experimental parallel version of the Delaunay triangulation
and the regular triangulation algorithms, which allows parallel
insertion and removal of point ranges.&lt;/li&gt;
    &lt;li&gt;Added caching of circumcenters to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_cell_base_3&lt;/code&gt;.
The cache value is computed when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cell-&amp;gt;circumcenter()&lt;/code&gt; or
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rt.dual(cell)&lt;/code&gt; functions are called.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-periodic-triangulations&quot;&gt;3D Periodic Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a method to locate point with inexact predicates.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a new constructor for the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Labeled_mesh_domain_3&lt;/code&gt; which
takes an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Iso_cuboid_3&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Added a new labeling function wrapper for meshing multi-domain.&lt;/li&gt;
    &lt;li&gt;The meshing functionality in the Qt demos in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo/Polyhedron/&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo/Mesh_3/&lt;/code&gt; can now use the handling of 1d-features, that exists
in CGAL since version 3.8.&lt;/li&gt;
    &lt;li&gt;Added an experimental parallel version of the 3D mesh refinement and
mesh optimization methods.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing-and-surface-reconstruction-from-point-sets&quot;&gt;Point Set Processing and Surface Reconstruction from Point Sets&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The former demo has been removed and is fully merge in the
Polyhedron demo.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;Point Set Processing&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Workaround a bug in dijsktra shortest path of boost 1.54 by shipping
    and using the boost header from the 1.55 release. This header will
    be used only if you are using the version 1.54 of boost.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-simplification&quot;&gt;Triangulated Surface Mesh Simplification&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; Due to the cleanup of the concepts of the
package &lt;em&gt;CGAL and the Boost Graph Library&lt;/em&gt;, the named parameter
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edge_is_border_map&lt;/code&gt; has been removed, and the named parameter
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edge_is_constrained_map&lt;/code&gt; now expects a property map with an edge
descriptor as key type (vs. halfedge descriptor before).&lt;/li&gt;
    &lt;li&gt;Added some optimization in the code making the implementation faster
(depending on the cost and the placement chosen). However, for an
edge which collapse is not topologically valid, the vector of
vertices of the link provided by its profile might contains
duplicates, thus also breaking the orientation guarantee in the
vector. This must not be a problem for users as the edge is not
collapsible anyway but if it is a absolute requirement for user
defined cost/placement, defining the macro
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_SMS_EDGE_PROFILE_ALWAYS_NEED_UNIQUE_VERTEX_IN_LINK&lt;/code&gt; will
restore the former behavior.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-spatial-searching&quot;&gt;dD Spatial Searching&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added methods &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reserve(size_t size)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size_t       capacity()&lt;/code&gt;
to class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kd_tree&lt;/code&gt; to allocate memory to store &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size&lt;/code&gt; points and to
report that number (STL compliance).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;stl-extensions-for-cgal&quot;&gt;STL Extensions for CGAL&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compact_container::operator[]&lt;/code&gt;, allowing a direct access to the
ith element of a compact container.&lt;/li&gt;
    &lt;li&gt;Added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrent_compact_container&lt;/code&gt;, a compact container which allows
concurrent insertion and removal.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.5 beta1 released</title>
   <link href="http://www.cgal.org/2014/08/12/cgal-45-beta1/"/>
   <updated>2014-08-12T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2014/08/12/cgal-45-beta1</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.5-beta1&quot;&gt;Download CGAL-4.5-beta1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.5/Manual/index.html&quot;&gt;CGAL-4.5-beta1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.5 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2014/04/04/cgal-44&quot;&gt;CGAL 4.4&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Changes in the set of supported platforms:
      &lt;ul&gt;
        &lt;li&gt;The Microsoft Windows Visual C++ compiler 2008 (VC9) is no
longer supported since CGAL-4.5.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Since CGAL version 4.0, Eigen was the recommended third-party
library to use with &lt;em&gt;Planar Parameterization of Triangulated Surface
Meshes&lt;/em&gt;, &lt;em&gt;Surface Reconstruction from Point Sets&lt;/em&gt;, &lt;em&gt;Approximation of
Ridges and Umbilics on Triangulated Surface Meshes&lt;/em&gt;, and &lt;em&gt;Estimation
of Local Differential Properties of Point-Sampled Surfaces&lt;/em&gt;
packages. From CGAL version 4.5, Taucs, Blas and Lapack are no
longer supported.&lt;/li&gt;
    &lt;li&gt;CGAL is now compatible with the new CMake version 3.0.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-deformation-new-package&quot;&gt;Triangulated Surface Mesh Deformation (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package allows to deform a triangulated surface mesh under
positional constraints of some of its vertices without requiring any
additional structure other than the surface mesh itself. The methods
provided implements an as-rigid-as-possible deformation. Note that
the main class name has changed between the 4.5-beta1 and the 4.5
releases to better match the CGAL naming conventions (from
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Deform_mesh&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Surface_mesh_deformation&lt;/code&gt;).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-major-changes&quot;&gt;CGAL and the Boost Graph Library (major changes)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Cleanup of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HalfedgeGraph&lt;/code&gt; concept. In particular:
      &lt;ul&gt;
        &lt;li&gt;Introduction of the notion of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;halfedge_descriptor&lt;/code&gt; in the
specialization of the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::graph_traits&lt;/code&gt;.&lt;/li&gt;
        &lt;li&gt;Deprecation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;halfedge_graph_traits&lt;/code&gt;.&lt;/li&gt;
        &lt;li&gt;A model of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HalfedgeGraph&lt;/code&gt; is considered as an undirected graph.
Thus any call to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edges()&lt;/code&gt; should be replaced by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;halfedges()&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num_edges()&lt;/code&gt; now returns the number of (undirected) edges.&lt;/li&gt;
        &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_border_edge&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_border_halfedge&lt;/code&gt;
properties are removed. The free functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_border()&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_border_edge()&lt;/code&gt; should be used instead.&lt;/li&gt;
        &lt;li&gt;Renaming of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HalfedgeGraph&lt;/code&gt; specific free functions.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Introduction of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FaceGraph&lt;/code&gt; concept.&lt;/li&gt;
    &lt;li&gt;Adaptation of the package &lt;em&gt;Triangulated Surface Mesh Simplification&lt;/em&gt;
and of the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_halfedge_graph_segment_primitive&lt;/code&gt; from the
package &lt;em&gt;3D Fast Intersection and Distance Computation&lt;/em&gt; to the API
change.&lt;/li&gt;
    &lt;li&gt;Update of the package &lt;em&gt;Triangulated Surface Mesh Segmentation&lt;/em&gt; and
of the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_face_graph_triangle_primitive&lt;/code&gt; from the package
&lt;em&gt;3D Fast Intersection and Distance Computation&lt;/em&gt; to accept model of
the newly introduced concepts.&lt;/li&gt;
    &lt;li&gt;Offer &lt;em&gt;Euler&lt;/em&gt; operations as free functions for models of the graph
concepts provided by CGAL.&lt;/li&gt;
    &lt;li&gt;Specialization of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::graph_traits&lt;/code&gt; for
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenMesh::PolyMesh_ArrayKernelT&lt;/code&gt; as proof of concept. A
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OpenMesh::PolyMesh_ArrayKernelT&lt;/code&gt; becomes a model of the
aforementioned concepts when including
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL/boost/graph/graph_traits_PolyMesh_ArrayKernelT.h&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-geometry-kernel&quot;&gt;dD Geometry Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A new model &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Epick_d&lt;/code&gt; of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel_d&lt;/code&gt; concept is introduced. It
provides better performance through arithmetic filtering and
specializations for fixed dimensions. It may not work with compilers
as old as gcc-4.2, but was tested with gcc-4.4.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-convex-hulls&quot;&gt;3D Convex Hulls&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Cleaned up the documentation of the concepts&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a bug in removing an unbounded curve (e.g., a ray) from an
arrangement induced by unbounded curves.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-snap-rounding&quot;&gt;2D Snap Rounding&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Replaced use of private &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kd_tree&lt;/code&gt; with CGAL’s official &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kd_tree&lt;/code&gt;
from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Spatial_searching&lt;/code&gt; package; results in a small performance
gain. Removed the private &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kd_tree&lt;/code&gt; package.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;3D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added an experimental parallel version of the Delaunay triangulation
and the regular triangulation algorithms, which allows parallel
insertion and removal of point ranges.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a new constructor for the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Labeled_mesh_domain_3&lt;/code&gt; which
takes an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Iso_cuboid_3&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Added a new labeling function wrapper for meshing multi-domain.&lt;/li&gt;
    &lt;li&gt;The meshing functionality in the Qt demos in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo/Polyhedron/&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo/Mesh_3/&lt;/code&gt; can now use the handling of 1d-features, that exists
in CGAL since version 3.8.&lt;/li&gt;
    &lt;li&gt;Added an experimental parallel version of the 3D mesh refinement and
mesh optimization methods.&lt;/li&gt;
    &lt;li&gt;Added caching of circumcenters to
&lt;code&gt;Regular_triangulation_cell_base_3&lt;/code&gt;. The cache value is
computed when &lt;code&gt;cell-&amp;gt;circumcenter()&lt;/code&gt;
or &lt;code&gt;rt.dual(cell)&lt;/code&gt; functions are called.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing-and-surface-reconstruction-from-point-sets&quot;&gt;Point Set Processing and Surface Reconstruction from Point Sets&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The former demo has been removed and is fully merge in the
Polyhedron demo.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;point-set-processing&quot;&gt;Point Set Processing&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Workaround a bug in dijsktra shortest path of boost 1.54 by shipping
and using the boost header from the 1.55 release. This header will
be used only if you are using the version 1.54 of boost.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-simplification&quot;&gt;Triangulated Surface Mesh Simplification&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; Due to the cleanup of the concepts of the
package &lt;em&gt;CGAL and the Boost Graph Library&lt;/em&gt;, the named parameter
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edge_is_border_map&lt;/code&gt; has been removed, and the named parameter
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edge_is_constrained_map&lt;/code&gt; now expects a property map with an edge
descriptor as key type (vs. halfedge descriptor before).&lt;/li&gt;
    &lt;li&gt;Added some optimization in the code making the implementation faster
(depending on the cost and the placement chosen). However, for an
edge which collapse is not topologically valid, the vector of
vertices of the link provided by its profile might contains
duplicates, thus also breaking the orientation guarantee in the
vector. This must not be a problem for users as the edge is not
collapsible anyway but if it is a absolute requirement for user
defined cost/placement, defining the macro
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_SMS_EDGE_PROFILE_ALWAYS_NEED_UNIQUE_VERTEX_IN_LINK&lt;/code&gt; will
restore the former behavior.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-spatial-searching&quot;&gt;dD Spatial Searching&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added methods &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reserve(size_t size)&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size_t       capacity()&lt;/code&gt;
to class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kd_tree&lt;/code&gt; to allocate memory to store &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;size&lt;/code&gt; points and to
report that number (STL compliance).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;stl-extensions-for-cgal&quot;&gt;STL Extensions for CGAL&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compact_container::operator[]&lt;/code&gt;, allowing a direct access to the
ith element of a compact container.&lt;/li&gt;
    &lt;li&gt;Added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Concurrent_compact_container&lt;/code&gt;, a compact container which allows
concurrent insertion and removal.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ SIGGRAPH 2014</title>
   <link href="http://www.cgal.org/news/2014/08/08/siggraph-2014/"/>
   <updated>2014-08-08T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2014/08/08/siggraph-2014</id>
   <content type="html">
&lt;p&gt;Visit the CGAL Project on Booth No. 618 at the exhibition of &lt;a href=&quot;http://s2014.siggraph.org/&quot;&gt;SIGGRAPH 2014&lt;/a&gt;,
Vancouver Canada, 12-14 July 2014.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL welcomes 7 students for the GSoC 2014</title>
   <link href="http://www.cgal.org/news/2014/05/24/gsoc-2014/"/>
   <updated>2014-05-24T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2014/05/24/gsoc-2014</id>
   <content type="html">
&lt;p&gt;The CGAL project welcomes 7 &lt;a href=&quot;https://code.google.com/soc/&quot;&gt;GSoC&lt;/a&gt; students.
Have a look at the &lt;a href=&quot;https://cgal.github.io/cgal-web/gsoc/2014.html&quot;&gt;Accepted Projects&lt;/a&gt; page.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL to participate in the Google Summer of Code 2014</title>
   <link href="http://www.cgal.org/2014/04/12/gsoc-2014-mentoring/"/>
   <updated>2014-04-12T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2014/04/12/gsoc-2014-mentoring</id>
   <content type="html">
&lt;p&gt;The CGAL Project is a &lt;a href=&quot;https://www.google-melange.com/archive/gsoc/2014/orgs/cgal&quot;&gt;mentoring organization&lt;/a&gt;
for &lt;a href=&quot;https://www.google-melange.com/archive/gsoc/2014&quot;&gt;Google Summer of Code 2014&lt;/a&gt;.
Have a look at our &lt;a href=&quot;https://cgal.github.io/cgal-web/gsoc/2014.html&quot;&gt;Project Ideas&lt;/a&gt; page.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.4 released</title>
   <link href="http://www.cgal.org/2014/04/04/cgal-44/"/>
   <updated>2014-04-04T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2014/04/04/cgal-44</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.4&quot;&gt;Download CGAL-4.4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.4/Manual/index.html&quot;&gt;CGAL-4.4 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.4 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2013/10/17/cgal-43&quot;&gt;CGAL 4.3&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Additional supported platforms:
      &lt;ul&gt;
        &lt;li&gt;The Apple Clang compiler version 5.0 is now supported on
OS X Mavericks.&lt;/li&gt;
        &lt;li&gt;The Microsoft Windows Visual C++ compiler 2013 (VC12) is now
supported.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-segmentation-new-package&quot;&gt;Triangulated Surface Mesh Segmentation (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package implements the segmentation of triangulated surface
meshes based on the Shape Diameter Function (SDF). In addition, it
also provides functions to generate segmentations based on a user
defined alternative to the SDF.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;number-types&quot;&gt;Number Types&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A new class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Mpzf&lt;/code&gt; is introduced on some platforms for exact
ring operations. It is used to improve the speed of the evaluation
of predicates in degenerate situations.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-geometry-kernel&quot;&gt;2D and 3D Geometry Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a bug introduced in CGAL 4.3 when computing the intersection of
two 3D triangles.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-polygon-partitioning&quot;&gt;2D Polygon Partitioning&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Bug-fix to make the partition algorithms working with a Lazy kernel
such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exact_predicates_exact_constructions_kernel&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-regularized-boolean-set-operations&quot;&gt;2D Regularized Boolean Set-Operations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed two memory leaks in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::General_polygon_set_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;combinatorial-maps-and-linear-cell-complex&quot;&gt;Combinatorial Maps and Linear Cell Complex&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null_dart_handle&lt;/code&gt; is no longer a static data member in the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CombinatorialMap&lt;/code&gt; concept. This implies to move the following
methods of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dart&lt;/code&gt; concept into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CombinatorialMap&lt;/code&gt; concept:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_free&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;highest_nonfree_dimension&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opposite&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;other_extremity&lt;/code&gt;. We also transform the static methods
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vertex_attribute&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;point&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Linear_cell_complex&lt;/code&gt; class into
non static methods. You can define the CGAL_CMAP_DEPRECATED macro
to keep the old behavior.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Revised the API of &lt;strong&gt;polylines&lt;/strong&gt;. In particular, &lt;em&gt;construction&lt;/em&gt; is
now done using functors and &lt;em&gt;iteration&lt;/em&gt; is possible only on the
segments of a polyline.&lt;/li&gt;
    &lt;li&gt;Fix a bug in the &lt;em&gt;Landmark&lt;/em&gt; point-location strategy.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-snap-rounding&quot;&gt;2D Snap Rounding&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a memory leak&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;2D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added different overloads of the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_constraints&lt;/code&gt; that
inserts a range of points and segments, or a range of segments.
These functions uses the spatial sorting in order to speed up the
time needed for the insertion.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-alpha-shapes&quot;&gt;3D Alpha Shapes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added member functions in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Alpha_shape_3&lt;/code&gt; to give access to the
alpha status of edges and facets (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_alpha_status())&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Added another filtration method (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filtration_with_alpha_values()&lt;/code&gt;)
that reports the alpha value at which each face appears in the
filtration.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed the access to functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number_of_facets&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number_of_cells&lt;/code&gt;
in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh_complex_3_in_triangulation_3&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Changed the internal API of the sliver perturber, to make possible
for developers to optimize another criterion than the (default)
minimal dihedral angle. Developers can also define a new
perturbation vector (for angles we had gradient of squared
circumradius, gradient of volume, gradient of minimal dihedral
angle, and random) which is better suitable to optimize their
criterion.&lt;/li&gt;
    &lt;li&gt;Improved the use of cache values in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh_cell_base_3&lt;/code&gt; to (re)compute
circumcenters and sliver criterion values only when needed.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-simplification&quot;&gt;Triangulated Surface Mesh Simplification&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a bug in the way edges can be marked as non-removable by adding
a named-parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edge_is_constrained_map&lt;/code&gt; to the function
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edge_collapse&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-spatial-searching&quot;&gt;dD Spatial Searching&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a documentation bug: The property map passed as template
parameter to the classes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Search_traits_adapter&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Distance_adapter&lt;/code&gt; must be a lvalue property map. To avoid incorrect
usage, a static assertion has been added in the CGAL code to prevent
the user from instantiating these classes with an incorrect property
map type.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-ipelets&quot;&gt;CGAL ipelets&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Better description of the demo ipelets in the user manual&lt;/li&gt;
    &lt;li&gt;New ipelet for pencils of circles&lt;/li&gt;
    &lt;li&gt;New ipelet for hyperbolic geometry in Poincaré model&lt;/li&gt;
    &lt;li&gt;The generator ipelet now generates point in a selected zone&lt;/li&gt;
    &lt;li&gt;Hilbert sort ipelet implements two policies&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ Google Grass</title>
   <link href="http://www.cgal.org/news/2014/04/01/GoogleGrass/"/>
   <updated>2014-04-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2014/04/01/GoogleGrass</id>
   <content type="html">
&lt;p&gt;The CGAL Open Source Project, a &lt;a href=&quot;http://www.cgal.org/project_ideas.html&quot;&gt;mentoring organization
of the Google Summer of Code 2014&lt;/a&gt;, participates in &lt;em&gt;Google Grass&lt;/em&gt;,
a study run by Google and several medical schools worldwide.
The goal is to find out if a moderate consumption of cannabis
makes software developers more creative and more productive.
This study is triggered by the U.S. state of Colorado having
liberalized the consumption of cannabis, and the state
of California discussing to follow this move.
&amp;lt;/p&amp;gt;&lt;/p&gt;

&lt;h4&gt;Who Participates in Google Grass ?&lt;/h4&gt;

&lt;p&gt;
&lt;em&gt;Google Grass&lt;/em&gt; is a study run in the Google Labs in Boulder 
and in selected GSoC 2014 projects: The participating
mentoring  organizations are based in tolerant countries,
such as the Netherlands and Urugay.  As Utrecht University is an active
member of the CGAL Project, we were asked to participate 
in this unique experience.  Other participating mentoring organizations
with an affiliation in Colorado, the Netherlands, and Urugay are 
the 
&lt;a href=&quot;http://www.google-melange.com/gsoc/org2/google/gsoc2014/blender&quot;&gt;Blender Foundation&lt;/a&gt;,
&lt;a href=&quot;http://www.google-melange.com/gsoc/org2/google/gsoc2014/crystal&quot;&gt;Crystal Space&lt;/a&gt;,

&lt;a href=&quot;http://www.google-melange.com/gsoc/org2/google/gsoc2014/ganglia&quot;&gt;Ganglia&lt;/a&gt;,
and
&lt;a href=&quot;http://www.google-melange.com/gsoc/org2/google/gsoc2014/metabrainz&quot;&gt;MetaBrainz&lt;/a&gt;.



&lt;h4&gt;How Does it Work for Students ?&lt;/h4&gt;

&lt;p&gt;Students who wish to participate in &lt;em&gt;Google Grass&lt;/em&gt; must fulfill the usual 
&lt;a href=&quot;http://www.google-melange.com/gsoc/document/show/gsoc_program/google/gsoc2014/help_page#2._Whos_eligible_to_participate_as_a&quot;&gt;
GSoC conditions&lt;/a&gt;, that is they have to prove their technical competence, 
their full time  availability, and they must be enrolled in a Bachelor, Masters,
or PhD programme. Additionally, students who work
for the aforementioned mentoring organizations, must be willing 
to spend the months of May, June and July in Boulder, Montevideo,
or Utecht, because the program is supervised by local medical schools.
&lt;/p&gt;

&lt;p&gt; 
For each of the proposed GSoC student projects, each mentoring
organization will accept up to three students: one smoking placebos, 
and the other two students smoking different doses of cannabis.
Who of the students gets which dose is only known by the supervising 
medical schools, in order to avoid repressive measures of the country
of origin of the students.
&lt;/p&gt;

&lt;h4&gt;Don't be Evil !&lt;/h4&gt;

&lt;p&gt;As compensation students receive twice the amount of the 
GSoC base stipend, unless they already live in 
Colorado, the Netherlands, or Urugay.&lt;/p&gt;

&lt;p&gt;Google considers the Google Summer of Code as a perfect 
test ground for &lt;em&gt;Google Grass&lt;/em&gt;. &lt;em&gt;&quot;How else could you run
a study with young geeks at such a scale&quot;&lt;/em&gt; comments Robert Rauch, 
head of Google's human ressources department. Depending of the 
experience made in the GoogleLabs in Boulder, and with GSoC 2014 and 2015, 
and depending on the evolution of the legislation in California,
Google plans to offer cannabis in its offices, just as it does
now with apples, candy bars, coffee, tee, and softdrinks.&lt;/p&gt;

&lt;p&gt;As said Robert Rauch,  &lt;em&gt;&quot;Google Grass will make us the coolest
employer again, and it will reconcile us with Haight Street, 
after the corporate shuttle bus clash we had with the poeple of 
San Francisco.&quot;&lt;/em&gt;  

&lt;p&gt;
It already today makes Blender, CGAL, Crystal Space, Ganglia, 
and MetaBrainz the coolest mentoring organizations of GSoC 2014.&lt;/p&gt;
&lt;/p&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.4 beta1 released</title>
   <link href="http://www.cgal.org/2014/03/07/cgal-44-beta1/"/>
   <updated>2014-03-07T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2014/03/07/cgal-44-beta1</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.4-beta1&quot;&gt;Download CGAL-4.4-beta1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.4/Manual/index.html&quot;&gt;CGAL-4.4-beta1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.4 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2013/10/17/cgal-43&quot;&gt;CGAL 4.3&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Additional supported platforms:
      &lt;ul&gt;
        &lt;li&gt;The Apple Clang compiler version 5.0 is now supported on
OS X Mavericks.&lt;/li&gt;
        &lt;li&gt;The Microsoft Windows Visual C++ compiler 2013 (VC12) is now
supported.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-segmentation-new-package&quot;&gt;Triangulated Surface Mesh Segmentation (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package implements the segmentation of triangulated surface
meshes based on the Shape Diameter Function (SDF). In addition, it
also provides functions to generate segmentations based on a user
defined alternative to the SDF.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;number-types&quot;&gt;Number Types&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A new class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Mpzf&lt;/code&gt; is introduced on some platforms for exact
ring operations. It is used to improve the speed of the evaluation
of predicates in degenerate situations.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-geometry-kernel&quot;&gt;2D and 3D Geometry Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a bug introduced in CGAL 4.3 when computing the intersection of
two 3D triangles.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-polygon-partitioning&quot;&gt;2D Polygon Partitioning&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Bug-fix to make the partition algorithms working with a Lazy kernel
such as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exact_predicates_exact_constructions_kernel&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-regularized-boolean-set-operations&quot;&gt;2D Regularized Boolean Set-Operations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed two memory leaks in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::General_polygon_set_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;combinatorial-maps-and-linear-cell-complex&quot;&gt;Combinatorial Maps and Linear Cell Complex&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null_dart_handle&lt;/code&gt; is no longer a static data member in the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CombinatorialMap&lt;/code&gt; concept. This implies to move the following
methods of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dart&lt;/code&gt; concept into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CombinatorialMap&lt;/code&gt; concept:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_free&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;highest_nonfree_dimension&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;opposite&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;other_extremity&lt;/code&gt;. We also transform the static methods
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vertex_attribute&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;point&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Linear_cell_complex&lt;/code&gt; class into
non static methods. You can define the CGAL_CMAP_DEPRECATED macro
to keep the old behavior.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Revised the API of &lt;strong&gt;polylines&lt;/strong&gt;. In particular, &lt;em&gt;construction&lt;/em&gt; is
now done using functors and &lt;em&gt;iteration&lt;/em&gt; is possible only on the
segments of a polyline.&lt;/li&gt;
    &lt;li&gt;Fix a bug in the &lt;em&gt;Landmark&lt;/em&gt; point-location strategy.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-snap-rounding&quot;&gt;2D Snap Rounding&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a memory leak&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;2D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added different overloads of the function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_constraints&lt;/code&gt; that
inserts a range of points and segments, or a range of segments.
These functions uses the spatial sorting in order to speed up the
time needed for the insertion.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-alpha-shapes&quot;&gt;3D Alpha Shapes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added member functions in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Alpha_shape_3&lt;/code&gt; to give access to the
alpha status of edges and facets (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_alpha_status())&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Added another filtration method (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filtration_with_alpha_values()&lt;/code&gt;)
that reports the alpha value at which each face appears in the
filtration.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed the access to functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number_of_facets&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number_of_cells&lt;/code&gt;
in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh_complex_3_in_triangulation_3&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Changed the internal API of the sliver perturber, to make possible
for developers to optimize another criterion than the (default)
minimal dihedral angle. Developers can also define a new
perturbation vector (for angles we had gradient of squared
circumradius, gradient of volume, gradient of minimal dihedral
angle, and random) which is better suitable to optimize their
criterion.&lt;/li&gt;
    &lt;li&gt;Improved the use of cache values in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh_cell_base_3&lt;/code&gt; to (re)compute
circumcenters and sliver criterion values only when needed.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-simplification&quot;&gt;Triangulated Surface Mesh Simplification&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a bug in the way edges can be marked as non-removable by adding
a named-parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edge_is_constrained_map&lt;/code&gt; to the function
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;edge_collapse&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-spatial-searching&quot;&gt;dD Spatial Searching&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a documentation bug: The property map passed as template
parameter to the classes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Search_traits_adapter&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Distance_adapter&lt;/code&gt; must be a lvalue property map. To avoid incorrect
usage, a static assertion has been added in the CGAL code to prevent
the user from instantiating these classes with an incorrect property
map type.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-ipelets&quot;&gt;CGAL ipelets&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Better description of the demo ipelets in the user manual&lt;/li&gt;
    &lt;li&gt;New ipelet for pencils of circles&lt;/li&gt;
    &lt;li&gt;New ipelet for hyperbolic geometry in Poincaré model&lt;/li&gt;
    &lt;li&gt;The generator ipelet now generates point in a selected zone&lt;/li&gt;
    &lt;li&gt;Hilbert sort ipelet implements two policies&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.3 released</title>
   <link href="http://www.cgal.org/2013/10/17/cgal-43/"/>
   <updated>2013-10-17T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2013/10/17/cgal-43</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.3&quot;&gt;Download CGAL-4.3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.3/Manual/index.html&quot;&gt;CGAL-4.3 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.3 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2013/04/11/cgal-42&quot;&gt;CGAL 4.2&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;the-cgal-manual&quot;&gt;The CGAL Manual&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The documentation of CGAL is now generated with Doxygen.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-periodic-triangulations-new-package&quot;&gt;2D Periodic Triangulations (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package allows to build and handle triangulations of point sets
in the two-dimensional flat torus. Triangulations are built
incrementally and can be modified by insertion or removal of
vertices. They offer point location facilities. The package provides
Delaunay triangulations and offers nearest neighbor queries and
primitives to build the dual Voronoi diagrams.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;api-changes&quot;&gt;API Changes&lt;/h3&gt;

  &lt;h4 id=&quot;d-and-3d-geometry-kernel&quot;&gt;2D and 3D Geometry Kernel&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;The intersection functions and functors used to return a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt; in order to deal with the different possible return
types. However, depending on the arguments it is possible to reduce
the possible return types to a small set. For this reason and to
take advantage of the type safety, we decided to use
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::variant&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;result_of&lt;/code&gt; protocol
is now even more useful to determine the return type of the
intersection functions and functors. The change should be relatively
transparent to the user thanks to the implicit constructor added to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;. However, it is recommended to upgrade your code. The
previous behavior can be restored by defining the macro
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_INTERSECTION_VERSION&lt;/code&gt; to 1.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;The type of the result of point location queries changed to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::variant&lt;/code&gt; (from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;). For convenience, the
previous behavior can be restored by defining the macro
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_ARR_POINT_LOCATION_VERSION&lt;/code&gt; to 1.&lt;/li&gt;
    &lt;li&gt;Introduced an optimization for operations on large and dense
arrangements.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;d-fast-intersection-and-distance-computation&quot;&gt;3D Fast Intersection and Distance Computation&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;Following the intersection API change, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object_and_primitive_id&lt;/code&gt; has
been replaced by a template class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Intersection_and_primitive_id&amp;lt;Query&amp;gt;&lt;/code&gt; to determine the type
depending on the query object type.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;cgal-and-boost-property-maps&quot;&gt;CGAL and Boost Property Maps&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key_type&lt;/code&gt; of the property maps provided by CGAL used to be an
iterator. In order to be more easily re-used, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key_type&lt;/code&gt; has
been changed to be the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value_type&lt;/code&gt; of the iterator. The packages
that have been updated to match these changes are &lt;strong&gt;Point Set
Processing&lt;/strong&gt; and &lt;strong&gt;Surface Reconstruction from Point Sets&lt;/strong&gt;.
However, for most users this change should be transparent if the
default property maps were used. For convenience, the former
behavior can be enabled by defining the macro
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_USE_PROPERTY_MAPS_API_V1&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;algebraic-foundations&quot;&gt;Algebraic Foundations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;For convenience, added an overload of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make_rational()&lt;/code&gt; taking a pair
of numbers.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-geometry-kernel-1&quot;&gt;2D and 3D Geometry Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Iso_rectangle_2&lt;/code&gt; can now be constructed from a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bbox_2&lt;/code&gt; and an
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Iso_cuboid_3&lt;/code&gt; from a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bbox_3&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt; has been updated and now uses
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::shared_ptr&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::any&lt;/code&gt;. This implementation is faster.&lt;/li&gt;
    &lt;li&gt;Added to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bbox_2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bbox_3&lt;/code&gt; a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+=&lt;/code&gt; operator as well as free
functions to get the bounding box of a range of geometric objects.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;combinatorial-maps&quot;&gt;Combinatorial Maps&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Two bug fixes: do not use the 2 least significant bits for cell
attribute without dart support; share the mark when copying a
CMap_cell_iterator.&lt;/li&gt;
    &lt;li&gt;Added a constructor taking a given combinatorial map as argument,
possibly with different dimension and/or different attributes. This
allows to transform a combinatorial map.&lt;/li&gt;
    &lt;li&gt;Added operator= and swap method.&lt;/li&gt;
    &lt;li&gt;Added dynamic onmerge/onsplit functions that can be associated
dynamically to i-attributes and which are automatically called when
i-cells are split/merged.&lt;/li&gt;
    &lt;li&gt;Added a function allowing to reverse the orientation of a
combinatorial map, and another one to reverse one connected
component of a combinatorial map.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-boolean-operations-on-nef-polyhedra&quot;&gt;3D Boolean Operations on Nef Polyhedra&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Bug-fix in IO when using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lazy_exact_nt&lt;/code&gt; as number type or
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exact_predicates_exact_constructions_kernel&lt;/code&gt; as kernel.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;2D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Extended the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TriangulationDataStructure_2&lt;/code&gt; to require a more
general &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_tds&lt;/code&gt; function that allows a copy between TDS of
different types. The CGAL model has been updated.&lt;/li&gt;
    &lt;li&gt;Added a way to efficiently insert a range of points with information
into the 2D constrained Delaunay triangulations.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations-1&quot;&gt;3D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Extended the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TriangulationDataStructure_3&lt;/code&gt; to require a more
general &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_tds&lt;/code&gt; function that allows a copy between TDS of
different types. The CGAL model has been updated.&lt;/li&gt;
    &lt;li&gt;Added an advanced function to set the infinite vertex of the
triangulation for low level operations&lt;/li&gt;
    &lt;li&gt;Fixed a bug in the function inserting a range of points with info when
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fast_location&lt;/code&gt; tag is used&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-segment-delaunay-graph&quot;&gt;2D Segment Delaunay Graph&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_points&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_segments&lt;/code&gt; to insert a
range of points and segments. These functions uses the spatial
sorting in order to speed up the time needed for the insertion. The
function
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert(Input_iterator first, Input_iterator beyond,       Tag_true)&lt;/code&gt;
has been updated to dispatch the input when possible to these
functions.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-apollonius-graphs&quot;&gt;2D Apollonius Graphs&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Modified insertion algorithm so that the code can handle
pseudo-circles as well.&lt;/li&gt;
    &lt;li&gt;Updated implementation of the vertex conflict predicate by a faster
version.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Sped-up &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh_3&lt;/code&gt; and in particular the global optimizers (Lloyd and
ODT) by introducing a parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_freeze&lt;/code&gt; to prevent from moving
vertices which would move of very small displacements.&lt;/li&gt;
    &lt;li&gt;Introduce new data structures and options for speed-up and
compacity. Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compact_mesh_cell_base_3&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh_vertex_base_3&lt;/code&gt; are now our favoured implementations of the
concepts MeshCellBase_3 and MeshVertexBase_3.&lt;/li&gt;
    &lt;li&gt;Introduced a new constructor for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polyhedral_mesh_domain_3&lt;/code&gt; that
takes a bounding polyhedron to be meshed along with a polyhedral
surface entirely included in it. This allows the user to mesh a
polyhedral domain with internal surface(s) which can be
non-watertight and even non-manifold.&lt;/li&gt;
    &lt;li&gt;Several documentation bug fixes.&lt;/li&gt;
    &lt;li&gt;Provided the ability to plug in custom cell_base/vertex_base
classes into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh_triangulation_3&lt;/code&gt; class.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-simplification&quot;&gt;Triangulated Surface Mesh Simplification&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a segmentation fault that was happening when some edges of
length 0 were in the input mesh.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-fast-intersection-and-distance-computation-1&quot;&gt;3D Fast Intersection and Distance Computation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Following the intersection API change, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object_and_primitive_id&lt;/code&gt; has
been replaced by a template class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Intersection_and_primitive_id&amp;lt;Query&amp;gt;&lt;/code&gt; to determine the type
depending on the query object type.&lt;/li&gt;
    &lt;li&gt;Introduced the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_halfedge_graph_segment_primitive&lt;/code&gt;, which
replaces the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_polyhedron_segment_primitive&lt;/code&gt; (which is now
deprecated). The new class is more general and can be used with any
model of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HalfedgeGraph&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Introduced the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_face_graph_triangle_primitive&lt;/code&gt; which
replaces the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_polyhedron_triangle_primitive&lt;/code&gt; (which is
now deprecated).&lt;/li&gt;
    &lt;li&gt;Documented the classes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_segment_primitive&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_triangle_primitive&lt;/code&gt; that were already used in some examples.&lt;/li&gt;
    &lt;li&gt;Add a generic primitive class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_primitive&lt;/code&gt; that allows to define
a primitive type by defining only two property maps.&lt;/li&gt;
    &lt;li&gt;Introduced a new concept of primitive &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABBPrimitiveWithSharedData&lt;/code&gt;.
It allows to have some data shared between the primitives stored in
a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_tree&lt;/code&gt;. With this you can, for example have a primitive
wrapping an integer which refers to the position of a geometric
object in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::vector&lt;/code&gt;. Only one reference to this vector will be
stored in the traits of the tree. The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABBTraits&lt;/code&gt;, its
model &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_traits&lt;/code&gt; and the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_tree&lt;/code&gt; have been updated
accordingly. However, everything is backward compatible.&lt;/li&gt;
    &lt;li&gt;Fixed a memory leak in the destructor of the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB-tree&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;stl-extensions-for-cgal&quot;&gt;STL Extensions for CGAL&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dispatch_output_iterator&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dispatch_or_drop_output_iterator&lt;/code&gt; an operator to accept and
dispatch a tuple of values.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;concurrency-in-cgal&quot;&gt;Concurrency in CGAL&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FindTBB&lt;/code&gt; CMake module so that one can easily link with TBB to
write shared-memory parallel code.&lt;/li&gt;
    &lt;li&gt;Introduce two new tags: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sequential_tag&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parallel_tag&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.3 beta1 released</title>
   <link href="http://www.cgal.org/2013/08/23/cgal-43-beta1/"/>
   <updated>2013-08-23T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2013/08/23/cgal-43-beta1</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.3-beta1&quot;&gt;Download CGAL-4.3-beta1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.3/Manual/index.html&quot;&gt;CGAL-4.3-beta1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.3 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2013/04/11/cgal-42&quot;&gt;CGAL 4.2&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;the-cgal-manual&quot;&gt;The CGAL Manual&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The documentation of CGAL is now generated with Doxygen.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-periodic-triangulations-new-package&quot;&gt;2D Periodic Triangulations (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package allows to build and handle triangulations of point sets
in the two-dimensional flat torus. Triangulations are built
incrementally and can be modified by insertion or removal of
vertices. They offer point location facilities. The package provides
Delaunay triangulations and offers nearest neighbor queries and
primitives to build the dual Voronoi diagrams.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;api-changes&quot;&gt;API Changes&lt;/h3&gt;

  &lt;h4 id=&quot;d-and-3d-geometry-kernel&quot;&gt;2D and 3D Geometry Kernel&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;The intersection functions and functors used to return a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt; in order to deal with the different possible return
types. However, depending on the arguments it is possible to reduce
the possible return types to a small set. For this reason and to
take advantage of the type safety, we decided to use
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::variant&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;result_of&lt;/code&gt; protocol
is now even more useful to determine the return type of the
intersection functions and functors. The change should be relatively
transparent to the user thanks to the implicit constructor added to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;. However, it is recommended to upgrade your code. The
previous behavior can be restored by defining the macro
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_INTERSECTION_VERSION&lt;/code&gt; to 1.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;The type of the result of point location queries changed to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::variant&lt;/code&gt; (from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;). For convenience, the
previous behavior can be restored by defining the macro
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_ARR_POINT_LOCATION_VERSION&lt;/code&gt; to 1.&lt;/li&gt;
    &lt;li&gt;Introduced an optimization for operations on large and dense
arrangements.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;d-fast-intersection-and-distance-computation&quot;&gt;3D Fast Intersection and Distance Computation&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;Following the intersection API change, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object_and_primitive_id&lt;/code&gt; has
been replaced by a template class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Intersection_and_primitive_id&amp;lt;Query&amp;gt;&lt;/code&gt; to determine the type
depending on the query object type.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;cgal-and-boost-property-maps&quot;&gt;CGAL and Boost Property Maps&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key_type&lt;/code&gt; of the property maps provided by CGAL used to be an
iterator. In order to be more easily re-used, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;key_type&lt;/code&gt; has
been changed to be the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;value_type&lt;/code&gt; of the iterator. The packages
that have been updated to match these changes are &lt;strong&gt;Point Set
Processing&lt;/strong&gt; and &lt;strong&gt;Surface Reconstruction from Point Sets&lt;/strong&gt;.
However, for most users this change should be transparent if the
default property maps were used. For convenience, the former
behavior can be enabled by defining the macro
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_USE_PROPERTY_MAPS_API_V1&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;algebraic-foundations&quot;&gt;Algebraic Foundations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;For convenience, added an overload of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make_rational()&lt;/code&gt; taking a pair
of numbers.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-geometry-kernel-1&quot;&gt;2D and 3D Geometry Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Iso_rectangle_2&lt;/code&gt; can now be constructed from a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bbox_2&lt;/code&gt; and an
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Iso_cuboid_3&lt;/code&gt; from a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bbox_3&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The implementation of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt; has been updated and now uses
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::shared_ptr&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::any&lt;/code&gt;. This implementation is faster.&lt;/li&gt;
    &lt;li&gt;Added to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bbox_2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bbox_3&lt;/code&gt; a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+=&lt;/code&gt; operator as well as free
functions to get the bounding box of a range of geometric objects.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;combinatorial-maps&quot;&gt;Combinatorial Maps&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Two bug fixes: do not use the 2 least significant bits for cell
attribute without dart support; share the mark when copying a
CMap_cell_iterator.&lt;/li&gt;
    &lt;li&gt;Added a constructor taking a given combinatorial map as argument,
possibly with different dimension and/or different attributes. This
allows to transform a combinatorial map.&lt;/li&gt;
    &lt;li&gt;Added operator= and swap method.&lt;/li&gt;
    &lt;li&gt;Added dynamic onmerge/onsplit functions that can be associated
dynamically to i-attributes and which are automatically called when
i-cells are split/merged.&lt;/li&gt;
    &lt;li&gt;Added a function allowing to reverse the orientation of a
combinatorial map, and another one to reverse one connected
component of a combinatorial map.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-boolean-operations-on-nef-polyhedra&quot;&gt;3D Boolean Operations on Nef Polyhedra&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Bug-fix in IO when using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lazy_exact_nt&lt;/code&gt; as number type or
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exact_predicates_exact_constructions_kernel&lt;/code&gt; as kernel.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;2D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Extended the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TriangulationDataStructure_2&lt;/code&gt; to require a more
general &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_tds&lt;/code&gt; function that allows a copy between TDS of
different types. The CGAL model has been updated.&lt;/li&gt;
    &lt;li&gt;Added a way to efficiently insert a range of points with information
into the 2D constrained Delaunay triangulations.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations-1&quot;&gt;3D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Extended the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TriangulationDataStructure_3&lt;/code&gt; to require a more
general &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_tds&lt;/code&gt; function that allows a copy between TDS of
different types. The CGAL model has been updated.&lt;/li&gt;
    &lt;li&gt;Added an advanced function to set the infinite vertex of the
triangulation for low level operations&lt;/li&gt;
    &lt;li&gt;Fixed a bug in the function inserting a range of points with info when
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fast_location&lt;/code&gt; tag is used&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-segment-delaunay-graph&quot;&gt;2D Segment Delaunay Graph&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_points&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_segments&lt;/code&gt; to insert a
range of points and segments. These functions uses the spatial
sorting in order to speed up the time needed for the insertion. The
function
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert(Input_iterator first, Input_iterator beyond,       Tag_true)&lt;/code&gt;
has been updated to dispatch the input when possible to these
functions.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-apollonius-graphs&quot;&gt;2D Apollonius Graphs&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Modified insertion algorithm so that the code can handle
pseudo-circles as well.&lt;/li&gt;
    &lt;li&gt;Updated implementation of the vertex conflict predicate by a faster
version.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Sped-up &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh_3&lt;/code&gt; and in particular the global optimizers (Lloyd and
ODT) by introducing a parameter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_freeze&lt;/code&gt; to prevent from moving
vertices which would move of very small displacements.&lt;/li&gt;
    &lt;li&gt;Introduce new data structures and options for speed-up and
compacity. Note that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compact_mesh_cell_base_3&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh_vertex_base_3&lt;/code&gt; are now our favoured implementations of the
concepts MeshCellBase_3 and MeshVertexBase_3.&lt;/li&gt;
    &lt;li&gt;Introduced a new constructor for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polyhedral_mesh_domain_3&lt;/code&gt; that
takes a bounding polyhedron to be meshed along with a polyhedral
surface entirely included in it. This allows the user to mesh a
polyhedral domain with internal surface(s) which can be
non-watertight and even non-manifold.&lt;/li&gt;
    &lt;li&gt;Several documentation bug fixes.&lt;/li&gt;
    &lt;li&gt;Provided the ability to plug in custom cell_base/vertex_base
classes into the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mesh_triangulation_3&lt;/code&gt; class.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-simplification&quot;&gt;Triangulated Surface Mesh Simplification&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a segmentation fault that was happening when some edges of
length 0 were in the input mesh.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-fast-intersection-and-distance-computation-1&quot;&gt;3D Fast Intersection and Distance Computation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Following the intersection API change, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Object_and_primitive_id&lt;/code&gt; has
been replaced by a template class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Intersection_and_primitive_id&amp;lt;Query&amp;gt;&lt;/code&gt; to determine the type
depending on the query object type.&lt;/li&gt;
    &lt;li&gt;Introduced the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_halfedge_graph_segment_primitive&lt;/code&gt;, which
replaces the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_polyhedron_segment_primitive&lt;/code&gt; (which is now
deprecated). The new class is more general and can be used with any
model of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HalfedgeGraph&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Introduced the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_face_graph_triangle_primitive&lt;/code&gt; which
replaces the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_polyhedron_triangle_primitive&lt;/code&gt; (which is
now deprecated).&lt;/li&gt;
    &lt;li&gt;Documented the classes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_segment_primitive&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_triangle_primitive&lt;/code&gt; that were already used in some examples.&lt;/li&gt;
    &lt;li&gt;Add a generic primitive class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_primitive&lt;/code&gt; that allows to define
a primitive type by defining only two property maps.&lt;/li&gt;
    &lt;li&gt;Introduced a new concept of primitive &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABBPrimitiveWithSharedData&lt;/code&gt;.
It allows to have some data shared between the primitives stored in
a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_tree&lt;/code&gt;. With this you can, for example have a primitive
wrapping an integer which refers to the position of a geometric
object in a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::vector&lt;/code&gt;. Only one reference to this vector will be
stored in the traits of the tree. The concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABBTraits&lt;/code&gt;, its
model &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_traits&lt;/code&gt; and the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_tree&lt;/code&gt; have been updated
accordingly. However, everything is backward compatible.&lt;/li&gt;
    &lt;li&gt;Fixed a memory leak in the destructor of the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB-tree&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;stl-extensions-for-cgal&quot;&gt;STL Extensions for CGAL&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dispatch_output_iterator&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dispatch_or_drop_output_iterator&lt;/code&gt; an operator to accept and
dispatch a tuple of values.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;concurrency-in-cgal&quot;&gt;Concurrency in CGAL&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FindTBB&lt;/code&gt; CMake module so that one can easily link with TBB to
write shared-memory parallel code.&lt;/li&gt;
    &lt;li&gt;Introduce two new tags: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sequential_tag&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Parallel_tag&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>New in CGAL: 2D Visibility</title>
   <link href="http://www.cgal.org/2013/07/31/wipVisibility/"/>
   <updated>2013-07-31T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2013/07/31/wipVisibility</id>
   <content type="html">
&lt;h3&gt;&lt;a href=&quot;https://www.ibr.cs.tu-bs.de/users/hemmer/&quot; target=&quot;_blank&quot;&gt;Michael Hemmer&lt;/a&gt;, Francisc Bungiu, and Kan Huang &lt;/h3&gt;
&lt;h4&gt;TU Braunschweig, Germany&lt;/h4&gt;

&lt;p&gt;This CGAL component will enable to compute the visibility poylgon for a point inside a polygon with holes.
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Status:&lt;/b&gt; Accepted by the Editorial Board and targeted for CGAL 4.7, Autumn 2015&lt;/p&gt;

&lt;h4&gt;Bibliography&lt;/h4&gt;
&lt;p&gt;
[1] Francisc Bungiu, Michael Hemmer, John Hershberger, Kan Huang, and Alexander Kröller. Efficient computation
of visibility polygons. CoRR, abs/1403.3905, 2014. 2
&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>CGAL @ SIGGRAPH 2013</title>
   <link href="http://www.cgal.org/2013/07/01/siggraph-2013/"/>
   <updated>2013-07-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2013/07/01/siggraph-2013</id>
   <content type="html">
&lt;p&gt;Visit the CGAL Project on Booth No. 753 at the exhibition of &lt;a href=&quot;http://s2013.siggraph.org/&quot;&gt;SIGGRAPH 2013&lt;/a&gt;, Anaheim CA, 23-25 July 2013.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Triangulations and Meshes in New Spaces</title>
   <link href="http://www.cgal.org/2013/04/13/wipTriangulationsInNewSpaces/"/>
   <updated>2013-04-13T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2013/04/13/wipTriangulationsInNewSpaces</id>
   <content type="html">
&lt;h3&gt;Monique Teillaud&lt;/h3&gt;
&lt;h4&gt; &lt;a href=&quot;http://gamble.loria.fr/&quot; target=&quot;_blank&quot;&gt;Gamble&lt;/a&gt;, Inria Nancy - Grand Est&lt;/h4&gt;

&lt;p&gt;Monique is coordinating work on the extension of triangulations and mesh generation to
&lt;a href=&quot;https://members.loria.fr/Monique.Teillaud/other-geometries/&quot;&gt;other geometries&lt;/a&gt; than the Euclidean spaces R&lt;sup&gt;d&lt;/sup&gt;.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>CGAL to participate in the Google Summer of Code 2013</title>
   <link href="http://www.cgal.org/news/2013/04/12/gsoc-2013/"/>
   <updated>2013-04-12T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2013/04/12/gsoc-2013</id>
   <content type="html">
&lt;p&gt;The CGAL Project is a &lt;a href=&quot;https://www.google-melange.com/archive/gsoc/2013/orgs/cgal&quot;&gt;mentoring organization&lt;/a&gt;
for &lt;a href=&quot;https://www.google-melange.com/archive/gsoc/2013&quot;&gt;Google Summer of Code 2013&lt;/a&gt;.
Have a look at our &lt;a href=&quot;https://cgal.github.io/cgal-web/gsoc/2013.html&quot;&gt;Project Ideas&lt;/a&gt; page.&lt;/p&gt;

</content>
 </entry>
 
 <entry>
   <title>CGAL 4.2 released</title>
   <link href="http://www.cgal.org/2013/04/11/cgal-42/"/>
   <updated>2013-04-11T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2013/04/11/cgal-42</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.2&quot;&gt;Download CGAL-4.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.2/Manual/index.html&quot;&gt;CGAL-4.2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.2 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2012/10/24/cgal-41&quot;&gt;CGAL 4.1&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Additional supported platforms:
      &lt;ul&gt;
        &lt;li&gt;The Microsoft Windows Visual C++ compiler 2012 (VC11) is now
supported.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;With Microsoft Visual C++ (all supported versions), the compiler
flags &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bigobj&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/wd4503&lt;/code&gt; are added by CGAL CMake scripts.&lt;/li&gt;
    &lt;li&gt;This is the last release whose “&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UseCGAL.cmake&lt;/code&gt;” file (if using CGAL
in a CMake build environment) contains the line
      &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      link_libraries(${CGAL_LIBRARIES_DIR} ${CGAL_3RD_PARTY_LIBRARIES_DIRS})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
      &lt;p&gt;as this is a deprecated CMake command. The correct way to link with
CGAL’s libraries (as for required 3rd party libraries) is to use
‘&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target_link_libraries&lt;/code&gt;’ which specifies for each build target
which libraries should be linked. The following serves as example:&lt;/p&gt;
      &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      find_package(CGAL)
      include(${CGAL_USE_FILE})
      add_executable(myexe main.cpp)
      target_link_libraries(myexe ${CGAL_LIBRARIES}
                                  ${CGAL_3RD_PARTY_LIBRARIES})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
      &lt;p&gt;We also expect further changes in CGAL’s CMake setup (change of
variable names, consistency of filename and output, removing
essential libraries, building executables, removal of
‘&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${CGAL_3RD_PARTY_LIBRARIES}&lt;/code&gt;’).&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Enhanced the 2D-arrangements demonstration program and ported it to
Qt4. The new demonstration program makes use of the CGAL Graphics
View framework, in which the 2D primitives are individually
represented as objects in a scene. (The implementations of several
demos in CGAL already make use of this framework.) This project was
carried out as part of the &lt;a href=&quot;../../../../gsoc/2012.html&quot;&gt;
2012 Google Summer of Code program&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;Fixed a bug in the Walk-Along-A-Line point location strategy for
arrangements induced by unbounded curves.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-circular-geometry-kernel&quot;&gt;2D Circular Geometry Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed the intersection type computed when intersecting two identical
circles.&lt;/li&gt;
    &lt;li&gt;Forward correctly the result type of the linear kernel functors&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;2D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added mechanism to avoid call stack overflow in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delaunay_triangulation_2&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Constrained_Delaunay_triangulation_2&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Added a constructor for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_2&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delaunay_triangulation_2&lt;/code&gt; from a range of points or a range of
points with info.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-voronoi-diagram-adaptor&quot;&gt;2D Voronoi Diagram Adaptor&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Bug-fix: Added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ccb()&lt;/code&gt; method in face type as documented.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-minkowski-sum-of-polyhedra&quot;&gt;3D Minkowski Sum of Polyhedra&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a memory leak.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-fast-intersection-and-distance-computation&quot;&gt;3D Fast Intersection and Distance Computation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Updated requirements of the concepts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABBTraits&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABBGeomTraits&lt;/code&gt; to match the implementation of the package.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;generator&quot;&gt;Generator&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Addition of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Combination_enumerator&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;stl-extensions&quot;&gt;STL Extensions&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Introduction of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::cpp11::result_of&lt;/code&gt; as an alias to the tr1
implementation from boost of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;result_of&lt;/code&gt; mechanism. When all
compilers supported by CGAL will have a Standard compliant
implemention of the C++11 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decltype&lt;/code&gt; feature, it will become an
alias to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::result_of&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-reconstruction-from-point-sets&quot;&gt;Surface Reconstruction from Point Sets&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Performance improvements and addition of an option to better
reconstruct undersampled zones. The poisson reconstruction plugin of
the Polyhedron demo has an option to switch it on.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.2 beta1 released</title>
   <link href="http://www.cgal.org/2013/03/08/cgal-42-beta1/"/>
   <updated>2013-03-08T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2013/03/08/cgal-42-beta1</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.2-beta1&quot;&gt;Download CGAL-4.2-beta1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/4.2/Manual/index.html&quot;&gt;CGAL-4.2-beta1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.2 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2012/10/24/cgal-41&quot;&gt;CGAL 4.1&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Additional supported platforms:
      &lt;ul&gt;
        &lt;li&gt;The Microsoft Windows Visual C++ compiler 2012 (VC11) is now
supported.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;With Microsoft Visual C++ (all supported versions), the compiler
flags &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/bigobj&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/wd4503&lt;/code&gt; are added by CGAL CMake scripts.&lt;/li&gt;
    &lt;li&gt;This is the last release whose “&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UseCGAL.cmake&lt;/code&gt;” file (if using CGAL
in a CMake build environment) contains the line
      &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      link_libraries(${CGAL_LIBRARIES_DIR} ${CGAL_3RD_PARTY_LIBRARIES_DIRS})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
      &lt;p&gt;as this is a deprecated CMake command. The correct way to link with
CGAL’s libraries (as for required 3rd party libraries) is to use
‘&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target_link_libraries&lt;/code&gt;’ which specifies for each build target
which libraries should be linked. The following serves as example:&lt;/p&gt;
      &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;      find_package(CGAL)
      include(${CGAL_USE_FILE})
      add_executable(myexe main.cpp)
      target_link_libraries(myexe ${CGAL_LIBRARIES}
                                  ${CGAL_3RD_PARTY_LIBRARIES})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;      &lt;/div&gt;
      &lt;p&gt;We also expect further changes in CGAL’s CMake setup (change of
variable names, consistency of filename and output, removing
essential libraries, building executables, removal of
‘&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${CGAL_3RD_PARTY_LIBRARIES}&lt;/code&gt;’).&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Enhanced the 2D-arrangements demonstration program and ported it to
Qt4. The new demonstration program makes use of the CGAL Graphics
View framework, in which the 2D primitives are individually
represented as objects in a scene. (The implementations of several
demos in CGAL already make use of this framework.) This project was
carried out as part of the &lt;a href=&quot;../../../../gsoc/2012.html&quot;&gt;
2012 Google Summer of Code program&lt;/a&gt;.&lt;/li&gt;
    &lt;li&gt;Fixed a bug in the Walk-Along-A-Line point location strategy for
arrangements induced by unbounded curves.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-circular-geometry-kernel&quot;&gt;2D Circular Geometry Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed the intersection type computed when intersecting two identical
circles.&lt;/li&gt;
    &lt;li&gt;Forward correctly the result type of the linear kernel functors&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;2D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added mechanism to avoid call stack overflow in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delaunay_triangulation_2&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Constrained_Delaunay_triangulation_2&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Added a constructor for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_2&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delaunay_triangulation_2&lt;/code&gt; from a range of points or a range of
points with info.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-voronoi-diagram-adaptor&quot;&gt;2D Voronoi Diagram Adaptor&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Bug-fix: Added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ccb()&lt;/code&gt; method in face type as documented.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-minkowski-sum-of-polyhedra&quot;&gt;3D Minkowski Sum of Polyhedra&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a memory leak.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-fast-intersection-and-distance-computation&quot;&gt;3D Fast Intersection and Distance Computation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Updated requirements of the concepts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABBTraits&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABBGeomTraits&lt;/code&gt; to match the implementation of the package.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;generator&quot;&gt;Generator&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Addition of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Combination_enumerator&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;stl-extensions&quot;&gt;STL Extensions&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Introduction of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::cpp11::result_of&lt;/code&gt; as an alias to the tr1
implementation from boost of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;result_of&lt;/code&gt; mechanism. When all
compilers supported by CGAL will have a Standard compliant
implemention of the C++11 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decltype&lt;/code&gt; feature, it will become an
alias to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::result_of&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-reconstruction-from-point-sets&quot;&gt;Surface Reconstruction from Point Sets&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Performance improvements and addition of an option to better
reconstruct undersampled zones. The poisson reconstruction plugin of
the Polyhedron demo has an option to switch it on.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL on StackOverflow</title>
   <link href="http://www.cgal.org/2013/03/01/cgal-on-stackoverflow/"/>
   <updated>2013-03-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2013/03/01/cgal-on-stackoverflow</id>
   <content type="html">
&lt;p&gt;We answer CGAL-related questions on &lt;a href=&quot;http://stackoverflow.com/questions/tagged/cgal&quot;&gt;StackOverflow&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.1 released</title>
   <link href="http://www.cgal.org/2012/10/24/cgal-41/"/>
   <updated>2012-10-24T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2012/10/24/cgal-41</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.1&quot;&gt;Download CGAL-4.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/Manual/4.1/doc_html/cgal_manual/packages.html&quot;&gt;CGAL-4.1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.1 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2012/07/04/cgal-402&quot;&gt;CGAL 4.0.2&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Additional supported platforms:
      &lt;ul&gt;
        &lt;li&gt;The Apple Clang compiler versions 3.1 and 3.2 are now supported
on Mac OS X.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Improved configuration for essential and optional external third
party software&lt;/li&gt;
    &lt;li&gt;Added more general script to create CMakeLists.txt files:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cgal_create_CMakeLists&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Availability tests for C++11 features are now performed with the
help of &lt;a href=&quot;http://www.boost.org/libs/config&quot;&gt;Boost.Config&lt;/a&gt;. A Boost
version of 1.40.0 or higher is needed to use C++11 features.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangement&quot;&gt;2D Arrangement&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Improved the implementation of the incremental randomized
trapezoidal decomposition point-location strategy. The new
implementation enables point location in unbounded arrangements. It
constructs a search structure of guaranteed linear size with
guaranteed logarithmic query time.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-convex-hulls-and-extreme-points&quot;&gt;2D Convex Hulls and Extreme Points&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Speed up the preprocessing stage of the Akl-Toussaint implementation
(used by the free function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convex_hull_2&lt;/code&gt; when forward iterators
are provided as input).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;combinatorial-maps&quot;&gt;Combinatorial Maps&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Minor bugfix; replace some functors by methods.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;linear-cell-complex&quot;&gt;Linear Cell Complex&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Improved the demo: add a widget showing all the volumes and an
operation to create a Menger sponge.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;kernels&quot;&gt;Kernels&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;All Kernel functors now support the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;result_of&lt;/code&gt; protocol.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;stlextensions-for-cgal&quot;&gt;STL_Extensions for CGAL&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The namespace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cpp0x&lt;/code&gt; has been renamed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cpp11&lt;/code&gt;. The old name is
still available for backward compatibility.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.1 beta1 released</title>
   <link href="http://www.cgal.org/2012/08/17/cgal-41-beta1/"/>
   <updated>2012-08-17T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2012/08/17/cgal-41-beta1</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.1-beta1&quot;&gt;Download CGAL-4.1-beta1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/Manual/4.1/doc_html/cgal_manual/packages.html&quot;&gt;CGAL-4.1-beta1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 4.1 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2012/07/04/cgal-402&quot;&gt;CGAL 4.0.2&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Additional supported platforms:
      &lt;ul&gt;
        &lt;li&gt;The Apple Clang compiler versions 3.1 and 3.2 are now supported
on Mac OS X.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Improved configuration for essential and optional external third
party software&lt;/li&gt;
    &lt;li&gt;Added more general script to create CMakeLists.txt files:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cgal_create_CMakeLists&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Availability tests for C++11 features are now performed with the
help of &lt;a href=&quot;http://www.boost.org/libs/config&quot;&gt;Boost.Config&lt;/a&gt;. A Boost
version of 1.40.0 or higher is needed to use C++11 features.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangement&quot;&gt;2D Arrangement&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Improved the implementation of the incremental randomized
trapezoidal decomposition point-location strategy. The new
implementation enables point location in unbounded arrangements. It
constructs a search structure of guaranteed linear size with
guaranteed logarithmic query time.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-convex-hulls-and-extreme-points&quot;&gt;2D Convex Hulls and Extreme Points&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Speed up the preprocessing stage of the Akl-Toussaint implementation
(used by the free function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convex_hull_2&lt;/code&gt; when forward iterators
are provided as input).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;combinatorial-maps&quot;&gt;Combinatorial Maps&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Minor bugfix; replace some functors by methods.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;linear-cell-complex&quot;&gt;Linear Cell Complex&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Improved the demo: add a widget showing all the volumes and an
operation to create a Menger sponge.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;kernels&quot;&gt;Kernels&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;All Kernel functors now support the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;result_of&lt;/code&gt; protocol.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;stlextensions-for-cgal&quot;&gt;STL_Extensions for CGAL&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The namespace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cpp0x&lt;/code&gt; has been renamed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cpp11&lt;/code&gt;. The old name is
still available for backward compatibility.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ SIGGRAPH 2012</title>
   <link href="http://www.cgal.org/2012/08/01/siggraph-2012/"/>
   <updated>2012-08-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2012/08/01/siggraph-2012</id>
   <content type="html">
&lt;p&gt;Visit the CGAL Project on Booth No. 1014 at the exhibition of &lt;a href=&quot;http://www.siggraph.org/s2012/&quot;&gt;SIGGRAPH 2012&lt;/a&gt;, Los Angeles, 7-9th August 2012.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.0.2 released</title>
   <link href="http://www.cgal.org/2012/07/04/cgal-402/"/>
   <updated>2012-07-04T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2012/07/04/cgal-402</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.0.2&quot;&gt;Download CGAL-4.0.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/Manual/4.0.2/doc_html/cgal_manual/packages.html&quot;&gt;CGAL-4.0.2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a bug fix release. It fixes a bug in the &lt;code&gt;CMakeLists.txt&lt;/code&gt; for &lt;a href=&quot;../../../../2012/07/03/cgal-401&quot;&gt;CGAL-4.0.1&lt;/a&gt;, that prevented even
building the libraries.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.0.1 released</title>
   <link href="http://www.cgal.org/2012/07/03/cgal-401/"/>
   <updated>2012-07-03T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2012/07/03/cgal-401</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.0.1&quot;&gt;Download CGAL-4.0.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/Manual/4.0.1/doc_html/cgal_manual/packages.html&quot;&gt;CGAL-4.0.1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a bug fix release. Apart various minor fixes in the documentation,
  the following has been changed since &lt;a href=&quot;../../../../2012/03/12/cgal-40&quot;&gt;CGAL 4.0&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;d-voronoi-diagram-adaptor-re-added&quot;&gt;2D Voronoi Diagram Adaptor (re-added)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The package &lt;em&gt;2D Voronoi Diagram Adaptor&lt;/em&gt; was temporarily removed
from the CGAL distribution because of license issues. That package
is now back into CGAL.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-geometry-kernel&quot;&gt;2D and 3D Geometry Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a bug in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Segment_3-Triangle_3&lt;/code&gt; intersection function in the
case the segment is collinear with a triangle edge.&lt;/li&gt;
    &lt;li&gt;Fixed a bug in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projection_traits_.._3&lt;/code&gt; class in the case a
segment was parallel to the x-axis.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;algebraic-kernel&quot;&gt;Algebraic Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Avoid the linking error “duplicate symbols” when two compilation
units using the algebraic kernel are linked.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-boolean-operations-on-nef-polygons-embedded-on-the-sphere&quot;&gt;3D Boolean Operations on Nef Polygons Embedded on the Sphere&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a memory leak due to the usage of an internal mechanism that has
been replaced by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::any&lt;/code&gt;. This also influences the packages 2D
Boolean Operations on Nef Polygons, 3D Boolean Operations on Nef
Polyhedra, Convex Decomposition of Polyhedra, and 3D Minkowski Sum
of Polyhedra.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangement&quot;&gt;2D Arrangement&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed several memory leaks.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;2D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a compilation error in the header
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/Mesh_2/Do_not_refine_edges.h&amp;gt;&lt;/code&gt; when g++ version 4.7 is used.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-generation-and-3d-mesh-generation&quot;&gt;Surface Mesh Generation and 3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed an important bug in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_ImageIO&lt;/code&gt; library, that could lead
to wrong result when meshing from a 3D image.&lt;/li&gt;
    &lt;li&gt;Fixed the compilation of the demo in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo/Surface_mesher&lt;/code&gt;, when Boost
version 1.48 or 1.49 is used.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-parameterization&quot;&gt;Surface Mesh Parameterization&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a memory leak.&lt;/li&gt;
    &lt;li&gt;Fixed a compatibility issue with Eigen-3.1 of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Eigen_solver_traits&lt;/code&gt;.
This fix also affects the usage of that class in the package
&lt;em&gt;Surface Reconstruction from Point Sets&lt;/em&gt;.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL at CG Week</title>
   <link href="http://www.cgal.org/2012/06/01/cgal-at-cg-week/"/>
   <updated>2012-06-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2012/06/01/cgal-at-cg-week</id>
   <content type="html">
&lt;p&gt;Follow CGAL during the &lt;a href=&quot;http://socg2012.web.unc.edu/&quot;&gt;CG Week&lt;/a&gt; in Chapel Hill, NC, USA. Two minisymposia: &lt;a href=&quot;http://acg.cs.tau.ac.il/events/cgal-socg-2012/&quot;&gt;CGAL, an Open Gate to Computational Geometry&lt;/a&gt; and &lt;a href=&quot;http://gts2012.tem.uoc.gr/&quot;&gt;Publicly Available Geometric/Topological Software&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL to participate in the Google Summer of Code 2012</title>
   <link href="http://www.cgal.org/news/2012/03/21/gsoc-2012/"/>
   <updated>2012-03-21T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2012/03/21/gsoc-2012</id>
   <content type="html">
&lt;p&gt;The CGAL Project is a &lt;a href=&quot;https://www.google-melange.com/archive/gsoc/2012/orgs/cgal&quot;&gt;mentoring organization&lt;/a&gt;
for &lt;a href=&quot;https://www.google-melange.com/archive/gsoc/2012&quot;&gt;Google Summer of Code 2012&lt;/a&gt;.
Have a look at our &lt;a href=&quot;https://cgal.github.io/cgal-web/gsoc/2012.html&quot;&gt;Project Ideas&lt;/a&gt; page.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.0 released</title>
   <link href="http://www.cgal.org/2012/03/12/cgal-40/"/>
   <updated>2012-03-12T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2012/03/12/cgal-40</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-4.0&quot;&gt;Download CGAL-4.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/Manual/4.0/doc_html/cgal_manual/packages.html&quot;&gt;CGAL-4.0 documentation&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;License Changes&lt;/h3&gt;
&lt;p&gt;The whole CGAL-3.x series was released under a combination of LGPLv2 (for
  the foundations of CGAL), and QPL (for the high-level packages). QPL was
  the former license of the graphical toolkit Qt, but that license is not
  supported by any major free software project. Furthermore, the terms of
  the LGPLv2 license are ambiguous for a library of C++ templates, like
  CGAL.&lt;/p&gt;

&lt;p&gt;The CGAL project, driven by the CGAL Editorial Board, has decided to
  change the license scheme of CGAL. We increased the major number
  of the CGAL version to '4' in order to reflect this license change.
  The CGAL-4.x series is released under:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;LGPLv3+ (that is LGPL &lt;em&gt;&quot;either version 3 of the License, or (at your
      option) any later version&quot;&lt;/em&gt;), for the foundations of CGAL, instead
    of LGPLv2,&lt;/li&gt;
  &lt;li&gt;GPLv3+ for the high-level packages, instead of QPL.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CGAL 4.0 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2011/09/27/cgal-39&quot;&gt;CGAL 3.9&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;On Windows, CGAL libraries are now built by default as shared
libraries (also called DLL). To run applications that use .dll files
of CGAL, you must either copy the .dll files into the directory of
the application, or add the path of the directory that contains
those .dll files into the PATH environment variable.&lt;/li&gt;
    &lt;li&gt;On Windows, the CMake scripts of CGAL now search for shared version
of the Boost libraries. You must ensure that the .dll files of Boost
are found by the dynamic linker. You can, for example, add the path
to the Boost .dll files to the PATH environment variable.&lt;/li&gt;
    &lt;li&gt;On Windows, CMake version 2.8.6 or higher is now required.&lt;/li&gt;
    &lt;li&gt;Eigen version 3.1 or later is now the recommended third party
library to use in &lt;em&gt;Planar Parameterization of Triangulated Surface
Meshes&lt;/em&gt;, &lt;em&gt;Surface Reconstruction from Point Sets&lt;/em&gt;, &lt;em&gt;Approximation of
Ridges and Umbilics on Triangulated Surface Meshes&lt;/em&gt;, and &lt;em&gt;Estimation
of Local Differential Properties of Point-Sampled Surfaces&lt;/em&gt;
packages. If you use Eigen you no longer need Taucs, Lapack or Blas
to use those packages (and any other in CGAL).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;linear-cell-complex-new-package&quot;&gt;Linear Cell Complex (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package implements linear cell complexes, objects in
d-dimension with linear geometry. The combinatorial part of objects
is described by a combinatorial map, representing all the cells of
the object plus the incidence and adjacency relations between cells.
Geometry is added to combinatorial maps simply by associating a
point to each vertex of the map. This data structure can be seen as
the generalization in dD of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polyhedron_3&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-voronoi-diagram-adaptor-temporarily-removed&quot;&gt;2D Voronoi Diagram Adaptor (temporarily removed)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;As the copyright holder of this package has not granted the right to
switch from QPL to GPL, this package is removed from the
distribution. Note that it is “only” an adapter, that is the
functionality of point/segment/disk Voronoi diagram is offered
through the Delaunay triangulation, segment Delaunay graph, and
Apollonius graph.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;aabb-tree&quot;&gt;AABB Tree&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Documented the constness of member functions of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_tree&lt;/code&gt; class.&lt;/li&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_tree&lt;/code&gt; is now guaranteed to be read-only thread-safe.
As usual in CGAL, this small overhead introduced for thread-safety
can be deactivated by defining &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_HAS_NO_THREADS&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-alpha-shapes&quot;&gt;2D Alpha Shapes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added an extra template parameter to the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alpha_shape_2&lt;/code&gt; that
allows a certified construction using a traits class with exact
predicates and inexact constructions.&lt;/li&gt;
    &lt;li&gt;An object of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alpha_shape_2&lt;/code&gt; can now be constructed from a
triangulation.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-alpha-shapes-1&quot;&gt;3D Alpha Shapes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added an extra template parameter to the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alpha_shape_3&lt;/code&gt; that
allows a certified construction using a traits class with exact
predicates and inexact constructions.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;geometric-object-generators&quot;&gt;Geometric Object Generators&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Random_points_in_iso_box_d&lt;/code&gt; (deprecated since 3.8) has been
removed. Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Random_points_in_cube_d&lt;/code&gt; instead.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;linear-and-quadratic-programming-solver&quot;&gt;Linear and Quadratic Programming Solver&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Minor bugfix.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;spatial-searching&quot;&gt;Spatial Searching&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The const-correctness of this package have been worked out. The
transition for users should be smooth in general, however adding few
const in user code might be needed in some cases.&lt;/li&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kd_tree&lt;/code&gt; is now guaranteed to be read-only thread-safe.
As usual in CGAL, this small overhead introduced for thread-safety
can be deactivated by defining &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_HAS_NO_THREADS&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Bug-fix in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Orthogonal_incremental_neighbor_search&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Incremental_neighbor_search&lt;/code&gt; classes. Several calls to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;begin()&lt;/code&gt;
now allow to make several nearest neighbor search queries
independently.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;stl-extension&quot;&gt;STL Extension&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::copy_n&lt;/code&gt; is now deprecated for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::cpp0x::copy_n&lt;/code&gt; which
uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::copy_n&lt;/code&gt;, if available on the platform.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::successor&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::predecessor&lt;/code&gt; are now deprecated for
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::cpp0x::next&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::cpp0x::prev&lt;/code&gt;. These functions use the
standard versions if available on the platform. Otherwise,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::next&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::prior&lt;/code&gt; are used.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulation2&quot;&gt;Triangulation_2&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a thread-safety issue in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delaunay_triangulation_2&lt;/code&gt; remove
functions. As usual in CGAL, the small overhead introduced for
thread-safety can be deactivated by defining &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_HAS_NO_THREADS&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Add extraction operator for the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Constrained_triangulation_2&lt;/code&gt;
(and thus to all inheriting classes).&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 4.0 beta1 released</title>
   <link href="http://www.cgal.org/2012/02/13/cgal-40-beta1/"/>
   <updated>2012-02-13T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2012/02/13/cgal-40-beta1</id>
   <content type="html">
&lt;h3&gt;License Changes&lt;/h3&gt;
&lt;p&gt;The whole CGAL-3.x series was released under a combination of LGPLv2 (for
  the foundations of CGAL), and QPL (for the high-level packages). QPL was
  the former license of the graphical toolkit Qt, but that license is not
  supported by any major free software project. Furthermore, the terms of
  the LGPLv2 license are ambiguous for a library of C++ templates, like
  CGAL.&lt;/p&gt;

&lt;p&gt;The CGAL project, driven by the CGAL Editorial Board, has decided to
  change the license scheme of CGAL. We increased the major number
  of the CGAL version to '4' in order to reflect this license change.
  The CGAL-4.x series is released under:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;LGPLv3+ (that is LGPL &lt;em&gt;&quot;either version 3 of the License, or (at your
      option) any later version&quot;&lt;/em&gt;), for the foundations of CGAL, instead
    of LGPLv2,&lt;/li&gt;
  &lt;li&gt;GPLv3+ for the high-level packages, instead of QPL.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CGAL 4.0 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2011/09/27/cgal-39&quot;&gt;CGAL 3.9&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;On Windows, CGAL libraries are now built by default as shared
libraries (also called DLL). To run applications that use .dll files
of CGAL, you must either copy the .dll files into the directory of
the application, or add the path of the directory that contains
those .dll files into the PATH environment variable.&lt;/li&gt;
    &lt;li&gt;On Windows, the CMake scripts of CGAL now search for shared version
of the Boost libraries. You must ensure that the .dll files of Boost
are found by the dynamic linker. You can, for example, add the path
to the Boost .dll files to the PATH environment variable.&lt;/li&gt;
    &lt;li&gt;On Windows, CMake version 2.8.6 or higher is now required.&lt;/li&gt;
    &lt;li&gt;Eigen version 3.1 or later is now the recommended third party
library to use in &lt;em&gt;Planar Parameterization of Triangulated Surface
Meshes&lt;/em&gt;, &lt;em&gt;Surface Reconstruction from Point Sets&lt;/em&gt;, &lt;em&gt;Approximation of
Ridges and Umbilics on Triangulated Surface Meshes&lt;/em&gt;, and &lt;em&gt;Estimation
of Local Differential Properties of Point-Sampled Surfaces&lt;/em&gt;
packages. If you use Eigen you no longer need Taucs, Lapack or Blas
to use those packages (and any other in CGAL).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;linear-cell-complex-new-package&quot;&gt;Linear Cell Complex (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package implements linear cell complexes, objects in
d-dimension with linear geometry. The combinatorial part of objects
is described by a combinatorial map, representing all the cells of
the object plus the incidence and adjacency relations between cells.
Geometry is added to combinatorial maps simply by associating a
point to each vertex of the map. This data structure can be seen as
the generalization in dD of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polyhedron_3&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-voronoi-diagram-adaptor-temporarily-removed&quot;&gt;2D Voronoi Diagram Adaptor (temporarily removed)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;As the copyright holder of this package has not granted the right to
switch from QPL to GPL, this package is removed from the
distribution. Note that it is “only” an adapter, that is the
functionality of point/segment/disk Voronoi diagram is offered
through the Delaunay triangulation, segment Delaunay graph, and
Apollonius graph.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;aabb-tree&quot;&gt;AABB Tree&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Documented the constness of member functions of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_tree&lt;/code&gt; class.&lt;/li&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AABB_tree&lt;/code&gt; is now guaranteed to be read-only thread-safe.
As usual in CGAL, this small overhead introduced for thread-safety
can be deactivated by defining &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_HAS_NO_THREADS&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-alpha-shapes&quot;&gt;2D Alpha Shapes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added an extra template parameter to the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alpha_shape_2&lt;/code&gt; that
allows a certified construction using a traits class with exact
predicates and inexact constructions.&lt;/li&gt;
    &lt;li&gt;An object of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alpha_shape_2&lt;/code&gt; can now be constructed from a
triangulation.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-alpha-shapes-1&quot;&gt;3D Alpha Shapes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added an extra template parameter to the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alpha_shape_3&lt;/code&gt; that
allows a certified construction using a traits class with exact
predicates and inexact constructions.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;geometric-object-generators&quot;&gt;Geometric Object Generators&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Random_points_in_iso_box_d&lt;/code&gt; (deprecated since 3.8) has been
removed. Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Random_points_in_cube_d&lt;/code&gt; instead.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;linear-and-quadratic-programming-solver&quot;&gt;Linear and Quadratic Programming Solver&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Minor bugfix.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;spatial-searching&quot;&gt;Spatial Searching&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The const-correctness of this package have been worked out. The
transition for users should be smooth in general, however adding few
const in user code might be needed in some cases.&lt;/li&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kd_tree&lt;/code&gt; is now guaranteed to be read-only thread-safe.
As usual in CGAL, this small overhead introduced for thread-safety
can be deactivated by defining &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_HAS_NO_THREADS&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Bug-fix in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Orthogonal_incremental_neighbor_search&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Incremental_neighbor_search&lt;/code&gt; classes. Several calls to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;begin()&lt;/code&gt;
now allow to make several nearest neighbor search queries
independently.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;stl-extension&quot;&gt;STL Extension&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::copy_n&lt;/code&gt; is now deprecated for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::cpp0x::copy_n&lt;/code&gt; which
uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::copy_n&lt;/code&gt;, if available on the platform.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::successor&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::predecessor&lt;/code&gt; are now deprecated for
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::cpp0x::next&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::cpp0x::prev&lt;/code&gt;. These functions use the
standard versions if available on the platform. Otherwise,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::next&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::prior&lt;/code&gt; are used.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulation2&quot;&gt;Triangulation_2&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a thread-safety issue in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delaunay_triangulation_2&lt;/code&gt; remove
functions. As usual in CGAL, the small overhead introduced for
thread-safety can be deactivated by defining &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_HAS_NO_THREADS&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Add extraction operator for the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Constrained_triangulation_2&lt;/code&gt;
(and thus to all inheriting classes).&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Book: CGAL Arrangements and Their Applications</title>
   <link href="http://www.cgal.org/2012/02/01/cgal-arrangements-and-their-applications-book/"/>
   <updated>2012-02-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2012/02/01/cgal-arrangements-and-their-applications-book</id>
   <content type="html">
&lt;p&gt;A book, titled &lt;em&gt;“CGAL Arrangements and Their Applications”&lt;/em&gt; has been published by Springer; see the &lt;a href=&quot;http://www.springer.com/computer/image+processing/book/978-3-642-17282-3&quot;&gt;publisher&lt;/a&gt; and the &lt;a href=&quot;http://acg.cs.tau.ac.il/cgal-arrangement-book&quot;&gt;authors&lt;/a&gt; websites of the book.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>SWIG Bindings released</title>
   <link href="http://www.cgal.org/2012/01/01/swig-bindings-released/"/>
   <updated>2012-01-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2012/01/01/swig-bindings-released</id>
   <content type="html">
&lt;p&gt;The &lt;a href=&quot;https://github.com/CGAL/cgal-swig-bindings&quot;&gt;CGAL-bindings&lt;/a&gt; repository is now open to the public. This project provides an interface to some CGAL algorithms in other languages than C++ (Java, Python, …) using the &lt;a href=&quot;http://www.swig.org&quot;&gt;SWIG&lt;/a&gt; technology.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL wins IMR's Meshing Maestro Award</title>
   <link href="http://www.cgal.org/2011/11/01/meshing-maestro-award/"/>
   <updated>2011-11-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2011/11/01/meshing-maestro-award</id>
   <content type="html">
&lt;p&gt;Jane Tournois, Pierre Alliez, Laurent Rineau, and Mariette Yvinec received the &lt;em&gt;Meshing Maestro Award&lt;/em&gt; at the &lt;a href=&quot;https://imr.sandia.gov/20imr/&quot;&gt;20. International Meshing Roundtable&lt;/a&gt;, for their poster &lt;a href=&quot;https://cgal.github.io/cgal-web/images/MeshingMaestro2011.png&quot;&gt;Meshing with CGAL&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 3.9 released</title>
   <link href="http://www.cgal.org/2011/09/27/cgal-39/"/>
   <updated>2011-09-27T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2011/09/27/cgal-39</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-3.9&quot;&gt;Download CGAL-3.9&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/Manual/3.9/doc_html/cgal_manual/packages.html&quot;&gt;CGAL-3.9 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 3.9 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2011/04/19/cgal-38&quot;&gt;CGAL 3.8&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Root_of_2&lt;/code&gt; is now deprecated. It is recommended to use
the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sqrt_extension&lt;/code&gt; instead.&lt;/li&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sqrt_extension&lt;/code&gt; is now used everywhere in CGAL where an
algebraic number of degree 2 is needed. This change has been done in
the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Root_of_traits&lt;/code&gt; mechanism (indirectly packages 2D Circular
kernel and 3D Spherical kernel) and the packages 2D Segment Delaunay
Graphs and 2D Arrangements.&lt;/li&gt;
    &lt;li&gt;Various fixes in the manual.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;combinatorial-maps-new-package&quot;&gt;Combinatorial Maps (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package provides a new combinatorial data structure allowing to
describe any orientable subdivided object whatever its dimension. It
describes all cells of the subdivision and all the incidence and
adjacency relations between these cells. For example it allows to
describe a 3D object subdivided in vertices, edges, faces and
volumes. This data structure can be seen as the generalization in dD
of the halfedge data structure.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-convex-hull-major-performance-improvement&quot;&gt;3D Convex Hull (major performance improvement)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The quickhull implementation of CGAL (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::convex_hull_3&lt;/code&gt;) has
been worked out to provide very better performances.&lt;/li&gt;
    &lt;li&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::convex_hull_3&lt;/code&gt; no longer computes the plane
equations of the facets of the output polyhedron. However an example
is provided to show how to compute them easily.&lt;/li&gt;
    &lt;li&gt;A global function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convex_hull_3_to_polyhedron_3&lt;/code&gt; is now provided to
extract the convex hull of a 3D points set from a triangulation of
these points.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-spatial-searching-major-new-feature-added&quot;&gt;dD Spatial Searching (major new feature added)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A traits-class and distance adapter that together with a point
property map, allow to make nearest neighbor queries on keys instead
of points have been added.&lt;/li&gt;
    &lt;li&gt;Few bug fixes in the documentation have revealed some
inconsistencies that have been corrected. Two traits class concept
are now documented (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RangeSearchTraits&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SearchTraits&lt;/code&gt;). Most
other changes concerns only classes documented as advanced. One
issue that user can encounter is due to an additional requirement on
the nested class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Construct_cartesian_const_iterator_d&lt;/code&gt; defined in
the concept SearchTraits that must provide a nested type
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;result_type&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;spatial-sorting-major-new-feature-added&quot;&gt;Spatial Sorting (major new feature added)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;General dimension is now supported.&lt;/li&gt;
    &lt;li&gt;Hilbert sorting admits now two policies: splitting at median or at
middle (see user manual).&lt;/li&gt;
    &lt;li&gt;Using a property map, sorting on keys instead of points is now
easier&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-kernel&quot;&gt;dD Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The d-dimensional kernel concept and models have been modified to
additionally provide two new functors &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Less_coordinate_d&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Point_dimension_d&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A new geometry-traits class that handles rational arcs, namely
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_rational_function_traits_2&lt;/code&gt;, has been introduced. It replaced
an old traits class, which handled the same family of curves, but it
was less efficient. The new traits exploits CGAL algebraic kernels
and polynomials, which were not available at the time the old traits
class was developed.&lt;/li&gt;
    &lt;li&gt;A new geometry traits concept called
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrangementOpenBoundaryTraits_2&lt;/code&gt; has been introduced. A model of
this concept supports curves that approach the open boundary of an
iso-rectangular area called parameter space, which can be unbounded
or bounded. The general code of the package, however, supports only
the unbounded parameter space. We intend to enhance the general code
to support also bounded parameter spaces in a future release.&lt;/li&gt;
    &lt;li&gt;The deprecated member function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_at_infinity()&lt;/code&gt; of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrangement_2::Vertex&lt;/code&gt; has been removed. It has been previously
replaced new function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_at_open_boundary()&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The tags in the geometry traits that indicate the type of boundary
of the embedding surface were replaced by the following new tags:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Left_side_category&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bottom_side_category&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Top_side_category&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Right_side_category&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;It is still possible not to indicate the tags at all. Default values
 are assumed. This however will produce warning messages, and should
 be avoided.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ SIGGRAPH 2011</title>
   <link href="http://www.cgal.org/2011/08/01/siggraph-2011/"/>
   <updated>2011-08-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2011/08/01/siggraph-2011</id>
   <content type="html">
&lt;p&gt;Visit the CGAL Project on Booth No. 170 at the exhibition of &lt;a href=&quot;http://www.siggraph.org/s2011/&quot;&gt;SIGGRAPH 2011&lt;/a&gt;, Vancouver, 8-11 August 2011.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 3.8 released</title>
   <link href="http://www.cgal.org/2011/04/19/cgal-38/"/>
   <updated>2011-04-19T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2011/04/19/cgal-38</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-3.8&quot;&gt;Download CGAL-3.8&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/Manual/3.8/doc_html/cgal_manual/packages.html&quot;&gt;CGAL-3.8 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 3.8 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2010/10/15/cgal-37&quot;&gt;CGAL 3.7&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Boost version 1.39 (or later) is now required.&lt;/li&gt;
    &lt;li&gt;Initial support for the LLVM Clang compiler (prereleases of version 2.9).&lt;/li&gt;
    &lt;li&gt;Full support for the options -strict-ansi of the Intel Compiler 11,
and -ansi of the GNU g++ compiler.&lt;/li&gt;
    &lt;li&gt;Added a concept of ranges. In the following releases, it will be
the way to provide a set of objects (vs. a couple of iterators).&lt;/li&gt;
    &lt;li&gt;Fixed a memory leak in CORE polynomials.&lt;/li&gt;
    &lt;li&gt;Various fixes in the manual.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation-major-new-feature-added&quot;&gt;3D Mesh Generation (major new feature added)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Adding the possibility to handle sharp features: the 3D Mesh
generation package now offers the possibility to get in the final
mesh an accurate representation of 1-dimensional sharp features
present in the description of the input domain.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations-major-new-feature-added&quot;&gt;2D Triangulations (major new feature added)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a way to efficiently insert a range of points with information
into a 2D Delaunay and regular triangulation.&lt;/li&gt;
    &lt;li&gt;Added member function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mirror_edge()&lt;/code&gt; taking an edge as parameter.&lt;/li&gt;
    &lt;li&gt;Fixed an infinite loop in constrained triangulation.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations-major-new-feature-added-1&quot;&gt;3D Triangulations (major new feature added)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a way to efficiently insert a range of points with information
into a 3D Delaunay and regular triangulation.&lt;/li&gt;
    &lt;li&gt;Added a member function to remove a cluster of points from a Delaunay
or regular triangulation.&lt;/li&gt;
    &lt;li&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vertices_in_conflict()&lt;/code&gt; is renamed
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vertices_on_conflict_zone_boundary()&lt;/code&gt; for Delaunay and regular
triangulation. Function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vertices_inside_conflict_zone()&lt;/code&gt; is added to
regular triangulation.&lt;/li&gt;
    &lt;li&gt;Structural filtering is now internally used in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;locate()&lt;/code&gt; function of
Delaunay and regular triangulation. It improves average construction
time by 20%.&lt;/li&gt;
    &lt;li&gt;Added demo.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-alpha-shapes-major-new-feature-added&quot;&gt;3D Alpha Shapes (major new feature added)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The new class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fixed_alpha_shape_3&lt;/code&gt; provides a robust and faster
way to compute one alpha shape (with a fixed value of alpha).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;aabb-tree&quot;&gt;AABB tree&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Adding the possibility to iteratively add primitives to an existing
tree and to build it only when no further insertion is needed.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-kernel&quot;&gt;2D and 3D Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Better handling of 2D points with elevation (3D points projected
onto trivial planes). More general traits classes (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projection_traits_xy_3&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projection_traits_yz_3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projection_traits_yz_3&lt;/code&gt;) are provided to
work with triangulations, algorithms on polygons, alpha-shapes,
convex hull algorithm… Usage of former equivalent traits classes
in different packages is now deprecated.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exact_predicates_exact_constructions_kernel&lt;/code&gt; now better use the
static filters which leads to performance improvements.&lt;/li&gt;
    &lt;li&gt;Add an overload for the global function angle, taking three 3D
points.&lt;/li&gt;
    &lt;li&gt;In the 2D and 3D kernel concept, the constant Boolean
Has_filtered_predicates is now deprecated. It is now required to
use Has_filtered_predicates_tag (being either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tag_true&lt;/code&gt; or
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tag_false&lt;/code&gt;).&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compare_distance_2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compare_distance_3&lt;/code&gt; provide additional
operators for 3 and 4 elements.&lt;/li&gt;
    &lt;li&gt;Add intersection test and intersection computation capabilities
between an object of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ray_3&lt;/code&gt; and either an object of type
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Line_3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Segment_3&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ray_3&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Improve intersection test performance between an object of type
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bbox_3&lt;/code&gt; and an object of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plane_3&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangle_3&lt;/code&gt; by avoiding
arithmetic filter failures.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-envelope&quot;&gt;2D Envelope&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Env_default_diagram_1 is deprecated, Envelope_diagram_1 should
be used instead.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-envelope-1&quot;&gt;3D Envelope&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A new demo program called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L1_Voronoi_diagram_2&lt;/code&gt; has been
introduced. It demonstrates how 2D Voronoi diagrams of points under
the L1 metric are constructed using lower envelopes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-kernel&quot;&gt;dD Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added functor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compute_coordinate_d&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel_d&lt;/code&gt; concept.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;geometric-object-generators&quot;&gt;Geometric Object Generators&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random&lt;/code&gt; uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::rand48&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::rand&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Added to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random&lt;/code&gt; a way to generate random integers.&lt;/li&gt;
    &lt;li&gt;Added generators for dD points.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;algebraic-foundations&quot;&gt;Algebraic Foundations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Algebraic_structure_traits&lt;/code&gt; now provides an Inverse functor for
Fields. There is also a new global function inverse.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;bounding-volumes&quot;&gt;Bounding Volumes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;dD Min sphere of spheres has a new traits class for the min sphere
of points.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-simplification&quot;&gt;Triangulated Surface Mesh Simplification&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The priority queue internally used to prioritize edge
simplifications is no longer a relaxed heap but a binomial heap.
This fix guarantees that all edges satisfying a simplification
criteria are removed (if possible).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-boolean-operations-on-nef-polyhedra&quot;&gt;3D Boolean Operations on Nef Polyhedra&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Allow construction of a 3D nef polyhedron from a 3D polyhedron with normals.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixe a bug in the method insert_at_vertices of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrangement_2&lt;/code&gt;
class.&lt;/li&gt;
    &lt;li&gt;Fixed several bugs in the traits class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_Bezier_curve_traits_2&lt;/code&gt;
for arrangement of Bezier curves.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-minkowski-sums&quot;&gt;2D Minkowski Sums&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A bug in the convolution method was fixed.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>New Homepage</title>
   <link href="http://www.cgal.org/2011/04/01/new-homepage/"/>
   <updated>2011-04-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2011/04/01/new-homepage</id>
   <content type="html">
&lt;p&gt;On the &lt;a href=&quot;https://cgal.github.io/cgal-web/April11/FirstOfApril.html&quot;&gt;new homepage&lt;/a&gt;, the CGAL Project agressively uses &lt;em&gt;Web 3.14&lt;/em&gt; technology.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL to participate in the Google Summer of Code 2011</title>
   <link href="http://www.cgal.org/news/2011/03/31/gsoc-2011/"/>
   <updated>2011-03-31T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2011/03/31/gsoc-2011</id>
   <content type="html">
&lt;p&gt;The CGAL Project is a &lt;a href=&quot;https://www.google-melange.com/archive/gsoc/2011/orgs/cgal&quot;&gt;mentoring organization&lt;/a&gt;
for &lt;a href=&quot;https://www.google-melange.com/archive/gsoc/2011&quot;&gt;Google Summer of Code 2011&lt;/a&gt;.
Have a look at our &lt;a href=&quot;https://cgal.github.io/cgal-web/gsoc/2011.html&quot;&gt;Project Ideas&lt;/a&gt; page.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 3.8 beta1 released</title>
   <link href="http://www.cgal.org/2011/03/14/cgal-38-beta1/"/>
   <updated>2011-03-14T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2011/03/14/cgal-38-beta1</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-3.8-beta1&quot;&gt;Download CGAL-3.8 beta1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/Manual/3.8/doc_html/cgal_manual/packages.html&quot;&gt;CGAL-3.8 beta documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 3.8 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2010/10/15/cgal-37&quot;&gt;CGAL 3.7&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Boost version 1.39 (or later) is now required.&lt;/li&gt;
    &lt;li&gt;Initial support for the LLVM Clang compiler (prereleases of version 2.9).&lt;/li&gt;
    &lt;li&gt;Full support for the options -strict-ansi of the Intel Compiler 11,
and -ansi of the GNU g++ compiler.&lt;/li&gt;
    &lt;li&gt;Added a concept of ranges. In the following releases, it will be
the way to provide a set of objects (vs. a couple of iterators).&lt;/li&gt;
    &lt;li&gt;Fixed a memory leak in CORE polynomials.&lt;/li&gt;
    &lt;li&gt;Various fixes in the manual.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation-major-new-feature-added&quot;&gt;3D Mesh Generation (major new feature added)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Adding the possibility to handle sharp features: the 3D Mesh
generation package now offers the possibility to get in the final
mesh an accurate representation of 1-dimensional sharp features
present in the description of the input domain.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations-major-new-feature-added&quot;&gt;2D Triangulations (major new feature added)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a way to efficiently insert a range of points with information
into a 2D Delaunay and regular triangulation.&lt;/li&gt;
    &lt;li&gt;Added member function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mirror_edge()&lt;/code&gt; taking an edge as parameter.&lt;/li&gt;
    &lt;li&gt;Fixed an infinite loop in constrained triangulation.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations-major-new-feature-added-1&quot;&gt;3D Triangulations (major new feature added)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a way to efficiently insert a range of points with information
into a 3D Delaunay and regular triangulation.&lt;/li&gt;
    &lt;li&gt;Added a member function to remove a cluster of points from a Delaunay
or regular triangulation.&lt;/li&gt;
    &lt;li&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vertices_in_conflict()&lt;/code&gt; is renamed
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vertices_on_conflict_zone_boundary()&lt;/code&gt; for Delaunay and regular
triangulation. Function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vertices_inside_conflict_zone()&lt;/code&gt; is added to
regular triangulation.&lt;/li&gt;
    &lt;li&gt;Structural filtering is now internally used in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;locate()&lt;/code&gt; function of
Delaunay and regular triangulation. It improves average construction
time by 20%.&lt;/li&gt;
    &lt;li&gt;Added demo.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-alpha-shapes-major-new-feature-added&quot;&gt;3D Alpha Shapes (major new feature added)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The new class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fixed_alpha_shape_3&lt;/code&gt; provides a robust and faster
way to compute one alpha shape (with a fixed value of alpha).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;aabb-tree&quot;&gt;AABB tree&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Adding the possibility to iteratively add primitives to an existing
tree and to build it only when no further insertion is needed.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-kernel&quot;&gt;2D and 3D Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Better handling of 2D points with elevation (3D points projected
onto trivial planes). More general traits classes (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projection_traits_xy_3&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projection_traits_yz_3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Projection_traits_yz_3&lt;/code&gt;) are provided to
work with triangulations, algorithms on polygons, alpha-shapes,
convex hull algorithm… Usage of former equivalent traits classes
in different packages is now deprecated.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exact_predicates_exact_constructions_kernel&lt;/code&gt; now better use the
static filters which leads to performance improvements.&lt;/li&gt;
    &lt;li&gt;Add an overload for the global function angle, taking three 3D
points.&lt;/li&gt;
    &lt;li&gt;In the 2D and 3D kernel concept, the constant Boolean
Has_filtered_predicates is now deprecated. It is now required to
use Has_filtered_predicates_tag (being either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tag_true&lt;/code&gt; or
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tag_false&lt;/code&gt;).&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compare_distance_2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compare_distance_3&lt;/code&gt; provide additional
operators for 3 and 4 elements.&lt;/li&gt;
    &lt;li&gt;Add intersection test and intersection computation capabilities
between an object of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ray_3&lt;/code&gt; and either an object of type
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Line_3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Segment_3&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ray_3&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Improve intersection test performance between an object of type
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bbox_3&lt;/code&gt; and an object of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plane_3&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangle_3&lt;/code&gt; by avoiding
arithmetic filter failures.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-envelope&quot;&gt;2D Envelope&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Env_default_diagram_1 is deprecated, Envelope_diagram_1 should
be used instead.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-envelope-1&quot;&gt;3D Envelope&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A new demo program called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;L1_Voronoi_diagram_2&lt;/code&gt; has been
introduced. It demonstrates how 2D Voronoi diagrams of points under
the L1 metric are constructed using lower envelopes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-kernel&quot;&gt;dD Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added functor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compute_coordinate_d&lt;/code&gt; to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel_d&lt;/code&gt; concept.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;geometric-object-generators&quot;&gt;Geometric Object Generators&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random&lt;/code&gt; uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::rand48&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::rand&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Added to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Random&lt;/code&gt; a way to generate random integers.&lt;/li&gt;
    &lt;li&gt;Added generators for dD points.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;algebraic-foundations&quot;&gt;Algebraic Foundations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Algebraic_structure_traits&lt;/code&gt; now provides an Inverse functor for
Fields. There is also a new global function inverse.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;bounding-volumes&quot;&gt;Bounding Volumes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;dD Min sphere of spheres has a new traits class for the min sphere
of points.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulated-surface-mesh-simplification&quot;&gt;Triangulated Surface Mesh Simplification&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The priority queue internally used to prioritize edge
simplifications is no longer a relaxed heap but a binomial heap.
This fix guarantees that all edges satisfying a simplification
criteria are removed (if possible).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-boolean-operations-on-nef-polyhedra&quot;&gt;3D Boolean Operations on Nef Polyhedra&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Allow construction of a 3D nef polyhedron from a 3D polyhedron with normals.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixe a bug in the method insert_at_vertices of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrangement_2&lt;/code&gt;
class.&lt;/li&gt;
    &lt;li&gt;Fixed several bugs in the traits class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_Bezier_curve_traits_2&lt;/code&gt;
for arrangement of Bezier curves.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-minkowski-sums&quot;&gt;2D Minkowski Sums&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A bug in the convolution method was fixed.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL sponsors SoCG 2011</title>
   <link href="http://www.cgal.org/2010/12/01/cgal-sponsors-socg-2011/"/>
   <updated>2010-12-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2010/12/01/cgal-sponsors-socg-2011</id>
   <content type="html">
&lt;p&gt;The CGAL Project sponsors &lt;a href=&quot;http://socg2011.inria.fr/&quot;&gt;SoCG 2011&lt;/a&gt;, the 27th Annual Symposium on Computational Geometry.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 3.7 released</title>
   <link href="http://www.cgal.org/2010/10/15/cgal-37/"/>
   <updated>2010-10-15T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2010/10/15/cgal-37</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-3.7&quot;&gt;Download CGAL-3.7&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/Manual/3.7/doc_html/cgal_manual/packages.html&quot;&gt;CGAL-3.7 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 3.7 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2010/06/30/cgal-361&quot;&gt;CGAL 3.6.1&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The configuration of CGAL libraries now requires CMake&amp;gt;=2.6.&lt;/li&gt;
    &lt;li&gt;Changes in the set of supported platforms:
      &lt;ul&gt;
        &lt;li&gt;GNU g++ 4.5 supported (with or without the compilation option
-std=c++0x).&lt;/li&gt;
        &lt;li&gt;Initial support for the option -strict-ansi of the Intel
Compiler 11. The CGAL libraries compile with that option, and
most CGAL headers have been fixed. The packages “3D Boolean
Operations on Nef Polyhedra” (Nef_3), “Convex Decomposition of
Polyhedra” (Convex_decomposition_3), and “3D Minkowski Sum of
Polyhedra” (Minkowski_sum_3) are known to still fail to
compile with that compiler flag.&lt;/li&gt;
        &lt;li&gt;The Microsoft Windows Visual C++ compiler 2010 (VC10), that was
experimentally supported by CGAL-3.6.1, is now fully supported.
Note that CMake&amp;gt;=2.8.2 is required for that support.&lt;/li&gt;
        &lt;li&gt;The Microsoft Windows Visual C++ compiler 2005 (VC8) is no
longer supported by the CGAL project since CGAL-3.7.&lt;/li&gt;
        &lt;li&gt;With Microsoft Windows Visual C++ (VC9 and VC10), the optional
dependencies Gmp, Mpfr, Blas, Lapack, Taucs no longer use
Boost-style name mangling. Only one variant is now provided by
the CGAL Windows installer (release, with dynamic runtime).&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Some demos now require a version of Qt4 &amp;gt;= 4.3.&lt;/li&gt;
    &lt;li&gt;CGAL_PDB is no longer provided with CGAL. An alternative solution
for people interested in reading PDB files is to use ESBTL
(http://esbtl.sourceforge.net/).&lt;/li&gt;
    &lt;li&gt;Fixed issues of the CGAL wrappers around the CORE library, on 64 bits
platforms.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;arithmetic-and-algebra&quot;&gt;Arithmetic and Algebra&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;New models &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Algebraic_kernel_d_1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Algebraic_kernel_d_2&lt;/code&gt; for
the corresponding concepts. They provide generic support for various
coefficient types.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;arrangements&quot;&gt;Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A new model &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_algebraic_segment_traits_2&lt;/code&gt; of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrangementTraits_2&lt;/code&gt; that supports algebraic curves of arbitrary
degree in the plane&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;2D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The Delaunay and regular 2D triangulations now use a symbolic
perturbation to choose a particular triangulation in co-circular
cases.&lt;/li&gt;
    &lt;li&gt;The return type of the template member function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert(It beg, It
end)&lt;/code&gt;, taking an iterator range of points, has been changed from int
to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::ptrdiff_t&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Classes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_euclidean_traits_xy_3,&lt;/code&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_euclidean_traits_yz_3&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_euclidean_traits_xz_3&lt;/code&gt; are now model of the concept
ConstrainedTriangulationTraits_2. They can be used with and without
intersection of constraints.&lt;/li&gt;
    &lt;li&gt;2D Delaunay and basic triangulations now provide vertex relocation
by the mean of these two new methods: move and
move_if_no_collision. The methods are also available for the
hierarchy (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_hierarchy_2&lt;/code&gt;).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations-1&quot;&gt;3D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The return type of the template member function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert(It beg, It
end)&lt;/code&gt;, taking an iterator range of points, has been changed from int
to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::ptrdiff_t&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;3D Delaunay triangulations now provide vertex relocation by the mean
of these two new methods: move and move_if_no_collision. This
works in both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compact_policy&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fast_policy&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-alpha-shapes&quot;&gt;2D and 3D Alpha Shapes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; in the API has been changed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::size_t&lt;/code&gt; so that
CGAL can deal with large data sets (64 bit addresses).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;2D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The execution of the 2D mesh generator is now deterministic (same at
each run).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation-1&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The efficiency of the 3D mesh generator has been improved (the
number of calls to the oracle per inserted vertex has globally
decrease). This is achieved through a slight change of the mesh
generator strategy which implies that a surface component that is
not detected at the surface mesher level will never be discovered by
chance, owing to the refinement of some tetrahedra, as it could
happen before. Please note that defining the macro
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_MESH_3_USE_OLD_SURFACE_RESTRICTED_DELAUNAY_UPDATE&lt;/code&gt;
switches back to the old behavior.&lt;/li&gt;
    &lt;li&gt;A demo program is now available.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-reconstruction-from-point-sets&quot;&gt;Surface Reconstruction from Point Sets&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Improved performance and minor bug fix.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-range-and-neighbor-search&quot;&gt;2D Range and Neighbor Search&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; in the API has been changed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::size_t&lt;/code&gt; so that
CGAL can deal with large data sets (64 bit addresses).&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 3.7 beta released</title>
   <link href="http://www.cgal.org/2010/08/23/cgal-37-beta/"/>
   <updated>2010-08-23T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2010/08/23/cgal-37-beta</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-3.7-beta1&quot;&gt;Download CGAL-3.7 beta&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/Manual/3.7/doc_html/cgal_manual/packages.html&quot;&gt;CGAL-3.7 beta documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 3.7 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2010/06/30/cgal-361&quot;&gt;CGAL 3.6.1&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The configuration of CGAL libraries now requires CMake&amp;gt;=2.6.&lt;/li&gt;
    &lt;li&gt;Changes in the set of supported platforms:
      &lt;ul&gt;
        &lt;li&gt;GNU g++ 4.5 supported (with or without the compilation option
-std=c++0x).&lt;/li&gt;
        &lt;li&gt;Initial support for the option -strict-ansi of the Intel
Compiler 11. The CGAL libraries compile with that option, and
most CGAL headers have been fixed. The packages “3D Boolean
Operations on Nef Polyhedra” (Nef_3), “Convex Decomposition of
Polyhedra” (Convex_decomposition_3), and “3D Minkowski Sum of
Polyhedra” (Minkowski_sum_3) are known to still fail to
compile with that compiler flag.&lt;/li&gt;
        &lt;li&gt;The Microsoft Windows Visual C++ compiler 2010 (VC10), that was
experimentally supported by CGAL-3.6.1, is now fully supported.
Note that CMake&amp;gt;=2.8.2 is required for that support.&lt;/li&gt;
        &lt;li&gt;The Microsoft Windows Visual C++ compiler 2005 (VC8) is no
longer supported by the CGAL project since CGAL-3.7.&lt;/li&gt;
        &lt;li&gt;With Microsoft Windows Visual C++ (VC9 and VC10), the optional
dependencies Gmp, Mpfr, Blas, Lapack, Taucs no longer use
Boost-style name mangling. Only one variant is now provided by
the CGAL Windows installer (release, with dynamic runtime).&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Some demos now require a version of Qt4 &amp;gt;= 4.3.&lt;/li&gt;
    &lt;li&gt;CGAL_PDB is no longer provided with CGAL. An alternative solution
for people interested in reading PDB files is to use ESBTL
(http://esbtl.sourceforge.net/).&lt;/li&gt;
    &lt;li&gt;Fixed issues of the CGAL wrappers around the CORE library, on 64 bits
platforms.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;arithmetic-and-algebra&quot;&gt;Arithmetic and Algebra&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;New models &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Algebraic_kernel_d_1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Algebraic_kernel_d_2&lt;/code&gt; for
the corresponding concepts. They provide generic support for various
coefficient types.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;arrangements&quot;&gt;Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;A new model &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_algebraic_segment_traits_2&lt;/code&gt; of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrangementTraits_2&lt;/code&gt; that supports algebraic curves of arbitrary
degree in the plane&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;2D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The Delaunay and regular 2D triangulations now use a symbolic
perturbation to choose a particular triangulation in co-circular
cases.&lt;/li&gt;
    &lt;li&gt;The return type of the template member function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert(It beg, It
end)&lt;/code&gt;, taking an iterator range of points, has been changed from int
to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::ptrdiff_t&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Classes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_euclidean_traits_xy_3,&lt;/code&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_euclidean_traits_yz_3&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_euclidean_traits_xz_3&lt;/code&gt; are now model of the concept
ConstrainedTriangulationTraits_2. They can be used with and without
intersection of constraints.&lt;/li&gt;
    &lt;li&gt;2D Delaunay and basic triangulations now provide vertex relocation
by the mean of these two new methods: move and
move_if_no_collision. The methods are also available for the
hierarchy (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_hierarchy_2&lt;/code&gt;).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations-1&quot;&gt;3D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The return type of the template member function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert(It beg, It
end)&lt;/code&gt;, taking an iterator range of points, has been changed from int
to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::ptrdiff_t&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;3D Delaunay triangulations now provide vertex relocation by the mean
of these two new methods: move and move_if_no_collision. This
works in both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compact_policy&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fast_policy&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-alpha-shapes&quot;&gt;2D and 3D Alpha Shapes&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; in the API has been changed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::size_t&lt;/code&gt; so that
CGAL can deal with large data sets (64 bit addresses).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;2D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The execution of the 2D mesh generator is now deterministic (same at
each run).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation-1&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The efficiency of the 3D mesh generator has been improved (the
number of calls to the oracle per inserted vertex has globally
decrease). This is achieved through a slight change of the mesh
generator strategy which implies that a surface component that is
not detected at the surface mesher level will never be discovered by
chance, owing to the refinement of some tetrahedra, as it could
happen before. Please note that defining the macro
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_MESH_3_USE_OLD_SURFACE_RESTRICTED_DELAUNAY_UPDATE&lt;/code&gt;
switches back to the old behavior.&lt;/li&gt;
    &lt;li&gt;A demo program is now available.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-reconstruction-from-point-sets&quot;&gt;Surface Reconstruction from Point Sets&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Improved performance and minor bug fix.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-range-and-neighbor-search&quot;&gt;2D Range and Neighbor Search&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int&lt;/code&gt; in the API has been changed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::size_t&lt;/code&gt; so that
CGAL can deal with large data sets (64 bit addresses).&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ SIGGRAPH 2010</title>
   <link href="http://www.cgal.org/2010/07/01/siggraph-2010/"/>
   <updated>2010-07-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2010/07/01/siggraph-2010</id>
   <content type="html">
&lt;p&gt;Visit the CGAL project on &lt;a href=&quot;http://www.siggraph.org&quot;&gt;Booth No. 1014&lt;/a&gt; at the exhibition of &lt;a href=&quot;http://www.siggraph.org/s2010/&quot;&gt;SIGGRAPH 2010&lt;/a&gt;, Los Angeles, 27-29 July 2010.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 3.6.1 released</title>
   <link href="http://www.cgal.org/2010/06/30/cgal-361/"/>
   <updated>2010-06-30T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2010/06/30/cgal-361</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-3.6.1&quot;&gt;Download CGAL-3.6.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/Manual/3.6.1/doc_html/cgal_manual/packages.html&quot;&gt;CGAL-3.6.1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a bug fix release. The following has been changed since &lt;a href=&quot;../../../../2010/03/22/cgal-36&quot;&gt;CGAL 3.6&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fix compilation errors with recent Boost versions (since 1.40).&lt;/li&gt;
    &lt;li&gt;Initial support for the Microsoft Visual C++ compiler 10.0 (MSVC
2010). For that support, CMake&amp;gt;=2.8.2 is required. Note also that
the compiler option “/bigobj” is necessary to compile some CGAL
programs with MSVC 2010.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polynomial&quot;&gt;Polynomial&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fix compilation errors with the Microsoft Visual C++ compiler and
the Intel C++ compiler.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polyhedron&quot;&gt;Polyhedron&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fix a compilation errors in demo/Polyhedron/:&lt;/li&gt;
    &lt;li&gt;issue with the location of qglobal.h of Qt4 on MacOS X,&lt;/li&gt;
    &lt;li&gt;missing texture.cpp, if TAUCS is used,&lt;/li&gt;
    &lt;li&gt;Fix the location of built plugins of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo/Polyhedron/&lt;/code&gt;, when CGAL is
configured with WITH_demos=ON&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-periodic-triangulations&quot;&gt;3D Periodic Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed bug in the triangulation hierarchy for periodic
triangulations.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation&quot;&gt;2D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a bug that lead to precondition violation.&lt;/li&gt;
    &lt;li&gt;Improve the user manual about the member function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_in_domain()&lt;/code&gt; of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Face&lt;/code&gt; type.&lt;/li&gt;
    &lt;li&gt;The 2D meshing process is now deterministic (sorting of bad faces no
longer relies on pointers comparisons).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-mesh-generation-1&quot;&gt;3D Mesh Generation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fix a linking errors (duplicate symbols) when
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/refine_mesh_3.h&amp;gt;&lt;/code&gt; is included in different compilation units.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;spatial-searching&quot;&gt;Spatial Searching&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fix a bug in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/Orthogonal_k_neighbor_search.h&amp;gt;&lt;/code&gt; when several
nearest neighbors are at the same distance from the query point.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;io-streams&quot;&gt;IO Streams&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fix a bug in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/IO/VRML_2_ostream.h&amp;gt;&lt;/code&gt; that generated VRML 2
files with an invalid syntax for IndexedFaceSet nodes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulation2&quot;&gt;Triangulation_2&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added missing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compare_distance_2&lt;/code&gt; functor in trait classes
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_euclidean_traits_xy_3&lt;/code&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_euclidean_traits_yz_3&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_euclidean_traits_xz_3&lt;/code&gt;. This was preventing calling
member function nearest_vertex of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delaunay_triangulation_2&lt;/code&gt;
instantiated with one of these traits.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL to participate in the Google Summer of Code 2010</title>
   <link href="http://www.cgal.org/news/2010/03/31/gsoc-2010/"/>
   <updated>2010-03-31T00:00:00+00:00</updated>
   <id>http://www.cgal.org/news/2010/03/31/gsoc-2010</id>
   <content type="html">
&lt;p&gt;The CGAL Project is a &lt;a href=&quot;https://www.google-melange.com/archive/gsoc/2010/orgs/cgal&quot;&gt;mentoring organization&lt;/a&gt;
for &lt;a href=&quot;https://www.google-melange.com/archive/gsoc/2010&quot;&gt;Google Summer of Code 2010&lt;/a&gt;.
Have a look at our &lt;a href=&quot;https://cgal.github.io/cgal-web/gsoc/2010.html&quot;&gt;Project Ideas&lt;/a&gt; page.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 3.6 released</title>
   <link href="http://www.cgal.org/2010/03/22/cgal-36/"/>
   <updated>2010-03-22T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2010/03/22/cgal-36</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-3.6&quot;&gt;Download CGAL-3.6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/Manual/3.6/doc_html/cgal_manual/packages.html&quot;&gt;CGAL-3.6 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 3.6 offers the following improvements and new functionality over
&lt;a href=&quot;../../../../2009/12/22/cgal-351&quot;&gt;CGAL 3.5.1&lt;/a&gt;: &lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Boost version 1.34.1 (or later) is now required.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;arithmetic-and-algebra&quot;&gt;Arithmetic and Algebra&lt;/h3&gt;

  &lt;h4 id=&quot;algebraic-kernel-new-package&quot;&gt;Algebraic Kernel (new package)&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;This new package is targeted to provide black-box implementations of
state-of-the-art algorithms to determine, compare and approximate
real roots of univariate polynomials and bivariate polynomial
systems. It includes models of the univariate algebraic kernel
concept, based on the library RS.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;number-types&quot;&gt;Number Types&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;Two new arbitrary fixed-precision floating-point number types have
been added: the scalar type Gmpfr and the interval type Gmpfi, based
on the MPFR and MPFI libraries respectively.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;geometry-kernels&quot;&gt;Geometry Kernels&lt;/h3&gt;

  &lt;h4 id=&quot;d-and-3d-geometry-kernel&quot;&gt;2D and 3D Geometry Kernel&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;Add new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_intersect()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;intersection()&lt;/code&gt; overloads:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_intersect(Bbox_3, Bbox_3/Line_3/Ray_3/Segment_3)&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;intersection(Triangle_3, Line_3/Ray_3/Segment_3)&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygons&quot;&gt;Polygons&lt;/h3&gt;

  &lt;h4 id=&quot;d-regularized-boolean-set-operations&quot;&gt;2D Regularized Boolean Set-Operations&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;General_polygon_set_2::arrangement()&lt;/code&gt; to return the proper type of object.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;arrangement&quot;&gt;Arrangement&lt;/h3&gt;

  &lt;h4 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed passing a (const) traits object to the constructor of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrangement_2&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Introduced &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrangement_2::fictitious_face()&lt;/code&gt;, which returns the
fictitious face in case of an unbounded arrangement.&lt;/li&gt;
    &lt;li&gt;Fixed a bug in Bezier-curve handling.&lt;/li&gt;
    &lt;li&gt;Added (back) iterator, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;number_of_holes()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;holes_begin()&lt;/code&gt;, and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;holes_end()&lt;/code&gt; to the default DCEL for backward compatibility.&lt;/li&gt;
    &lt;li&gt;Added (simple) versions of the free &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;overlay()&lt;/code&gt; function. It employs
the default overlay-traits, which practically does nothing.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polyhedron&quot;&gt;Polyhedron&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a compilation errors in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;demo/Polyhedron/&lt;/code&gt;:
      &lt;ul&gt;
        &lt;li&gt;issue with the location of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;qglobal.h&lt;/code&gt; of Qt4 on MacOS X,&lt;/li&gt;
        &lt;li&gt;missing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;texture.cpp&lt;/code&gt;, if TAUCS is used,&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Fixed the location of built plugins of demo/Polyhedron/, when CGAL is
configured with WITH_demos=ON&lt;/li&gt;
    &lt;li&gt;Fixed a bug in test_facet function of the incremental builder: the
function did not test if while a new facet makes a vertex manifold,
no other facet incident to that vertex breaks the manifold property.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulations-and-delaunay-triangulations&quot;&gt;Triangulations and Delaunay Triangulations&lt;/h3&gt;

  &lt;h4 id=&quot;d3d-regular-triangulations&quot;&gt;2D/3D Regular Triangulations&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;Weighted_point now has a constructor from Cartesian coordinates.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;d-triangulations&quot;&gt;3D Triangulations&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_3&lt;/code&gt;: semi-static floating-point filters are
now used in its predicates, which can speed up its construction by a
factor of about 3 when &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exact_predicates_inexact_constructions_kernel&lt;/code&gt; is used.&lt;/li&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_filtered_traits_3&lt;/code&gt; is deprecated,
the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_euclidean_traits_3&lt;/code&gt; must be used
instead. The predicates of that traits will be filtered if the
kernel given as template parameter of that traits is itself a
filtered kernel.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_hierarchy_3&lt;/code&gt; is now deprecated, and replaced by a
simpler CGAL::Fast_location policy template parameter of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delaunay_triangulation_3&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The old version of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove()&lt;/code&gt; (enabled with
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_DELAUNAY_3_OLD_REMOVE&lt;/code&gt;) has been deleted.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;d-periodic-triangulations&quot;&gt;3D Periodic Triangulations&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;New demo: 3D periodic Lloyd algorithm.&lt;/li&gt;
    &lt;li&gt;New functionality for Voronoi diagrams: dual of an edge and of a
vertex, volume and centroid of the dual of a vertex.&lt;/li&gt;
    &lt;li&gt;The package can now be used with the 3D Alpha Shapes package to
compute periodic alpha shapes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;d-alpha-shapes&quot;&gt;3D Alpha shapes&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Weighted_alpha_shape_euclidean_traits_3&lt;/code&gt; is
deprecated, the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_euclidean_traits_3&lt;/code&gt;
must be used instead.&lt;/li&gt;
    &lt;li&gt;The package can now be used together with the 3D Periodic
Triangulation package to compute periodic alpha shapes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;d3d-triangulations-2d-segment-delaunay-graph-2d-apollonius-graph-and-3d-periodic-triangulations&quot;&gt;2D/3D Triangulations, 2D Segment Delaunay Graph, 2D Apollonius Graph, and 3D Periodic Triangulations&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;The constructor and insert function taking ranges now produce
structures whose iterator orders is now deterministic (same at each
run).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;mesh-generation&quot;&gt;Mesh Generation&lt;/h3&gt;

  &lt;h4 id=&quot;d-mesh-generation&quot;&gt;2D Mesh Generation&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;The 2D mesh generator can now be used with a constrained Delaunay
triangulation with constraints hierarchy
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Constrained_triangulation_plus_2&lt;/code&gt;).&lt;/li&gt;
    &lt;li&gt;In some cases (refinement of a constrained edge that is on the
convex hull), the 2D mesh generator from CGAL-3.4 and CGAL-3.5 could
create invalid triangulations. This bug is now fixed.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;d-mesh-generation-1&quot;&gt;3D Mesh Generation&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;The mesh generator has been enriched with an optimization phase to
provide 3D meshes with well shaped tetrahedra (and in particular no
slivers). The optimization phase involves four different
optimization processes: two global optimization processes (ODT and
Lloyd), a perturber and an exuder. Each of these processes can be
activated or not, and tuned to the users needs and to available
computer resources.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;support-library&quot;&gt;Support library&lt;/h3&gt;

  &lt;h4 id=&quot;cgal-ipelets&quot;&gt;CGAL ipelets&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;Add support for version 7 of Ipe.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 3.5.1 released</title>
   <link href="http://www.cgal.org/2009/12/22/cgal-351/"/>
   <updated>2009-12-22T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2009/12/22/cgal-351</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-3.5.1&quot;&gt;Download CGAL-3.5.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/Manual/3.5.1/doc_html/cgal_manual/packages.html&quot;&gt;CGAL-3.5.1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a bug fix release for &lt;a href=&quot;../../../../2009/10/05/cgal-35&quot;&gt;CGAL 3.5&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;documentation&quot;&gt;Documentation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixes in the documentation (the online documentation of CGAL-3.5 is
now based on CGAL-3.5.1).&lt;/li&gt;
    &lt;li&gt;Fixes to the bibliographic references.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;windows-installer&quot;&gt;Windows installer&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The Windows installer of CGAL-3.5.1 fixes an issue with downloading
of precompiled binaries of the external library TAUCS.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;bug-fixes-in-the-following-cgal-packages&quot;&gt;Bug fixes in the following CGAL packages&lt;/h3&gt;

  &lt;h4 id=&quot;aabb-tree&quot;&gt;AABB tree&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a linker issue in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_intersect(Bbox_3, Bbox_3)&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Fixe compilation issue in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_intersect(Bbox_3, Ray_3)&lt;/code&gt; when using
the parameters in this order.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;d-mesh-generation&quot;&gt;3D Mesh Generation&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a bug in initial points construction of a polyhedral surface.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ SIGGRAPH Asia 2009</title>
   <link href="http://www.cgal.org/2009/12/01/siggraph-asia/"/>
   <updated>2009-12-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2009/12/01/siggraph-asia</id>
   <content type="html">
&lt;p&gt;Attend a &lt;a href=&quot;http://www.siggraph.org/asia2009/for_attendees/courses_attendees/details/?type=course&amp;amp;id=16&quot;&gt;Course on CGAL&lt;/a&gt; at the classes of &lt;a href=&quot;http://www.siggraph.org/asia2009/&quot;&gt;SIGGRAPH ASIA 2009&lt;/a&gt;, Saturday, 19 December, 9:00 am - 12:45 pm, Room 513, Yokohama, Japan.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ SIGSPATIAL</title>
   <link href="http://www.cgal.org/2009/11/01/cgalsigspatial/"/>
   <updated>2009-11-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2009/11/01/cgalsigspatial</id>
   <content type="html">
&lt;p&gt;Attend the CGAL demo session at the &lt;a href=&quot;http://acmgis09.cs.umn.edu/pc.html&quot;&gt;17th ACM SIGSPATIAL International Conference on Advances in Geographic Information Systems&lt;/a&gt;, Seattle, Washington.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 3.5 released</title>
   <link href="http://www.cgal.org/2009/10/05/cgal-35/"/>
   <updated>2009-10-05T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2009/10/05/cgal-35</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-3.5&quot;&gt;Download CGAL-3.5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/Manual/3.5/doc_html/cgal_manual/packages.html&quot;&gt;CGAL-3.5 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;CGAL releases will now be published about every six months. As a transition
release, CGAL-3.5 has been developed in a 9 months period, starting from the release CGAL-3.4.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;CGAL 3.5 differs from &lt;a href=&quot;../../../../2009/01/22/cgal-34&quot;&gt;CGAL 3.4&lt;/a&gt; in the platforms that are supported and
in functionality. There have also been a number of bug fixes for this release.&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Additional supported platforms:
      &lt;ul&gt;
        &lt;li&gt;GNU g++ 4.4 supported.&lt;/li&gt;
        &lt;li&gt;Intel Compiler 11 supported on Linux&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Fixed ABI incompatibilities when mixing CGAL and Boost Program
  Options on Windows/Visual C++ (the compilation flag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-D_SECURE_SCL=0&lt;/code&gt; is no longer used in Debug mode).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;geometry-kernels&quot;&gt;Geometry Kernels&lt;/h3&gt;

  &lt;h4 id=&quot;d-spherical-geometry-kernel&quot;&gt;3D Spherical Geometry Kernel&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;Add functionalities to manipulate circles, circular arcs and points that belong to the same sphere.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygons&quot;&gt;Polygons&lt;/h3&gt;

  &lt;h4 id=&quot;d-regularized-boolean-set-operations&quot;&gt;2D Regularized Boolean Set-Operations&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;The polygon validation operations were enhanced and their interface
  was improved. They are now offered as free functions and applied properly.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;d-straight-skeleton-and-polygon-offsetting&quot;&gt;2D Straight Skeleton and Polygon Offsetting&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;Updated the manual to document the new partial skeletons feature (already in the code since 3.4)&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;arrangements&quot;&gt;Arrangements&lt;/h3&gt;

  &lt;h4 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;The member function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_at_infinity()&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrangement_2::Vertex&lt;/code&gt; was
replaced by the new function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_at_open_boundary()&lt;/code&gt;. The former is
deprecated. While still supported in version 3.5, It will not be
supported in future releases. The member functions
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boundary_type_in_x() and &lt;/code&gt;boundary_type_in_y()&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; were permanently
replaced by the functions &lt;/code&gt;parameter_space_in_x()` and
parameter_space_in_y(), respectively. The 2 new functions return
an enumeration of a new type, namely Arr_parameter_space.&lt;/li&gt;
    &lt;li&gt;The tags in the geometry traits that indicate the type of boundary
of the embedding surface were replaced by the following new tags:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_left_side_tag&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_bottom_side_tag&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_top_side_tag&lt;/code&gt;, and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_right_side_tag&lt;/code&gt; In addition, the code was change, and now it
is possible not to indicate the tags at all. Default values are
assumed. This however will produce warning messages, and should be
avoided.&lt;/li&gt;
    &lt;li&gt;All operations of the geometry traits-class were made ‘const’. This
change was reflected in the code of this package and all other
packages that are based on it. Traits classes that maintain state,
should declare the data members that store the state as mutable.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;envelopes-of-surfaces-in-3d&quot;&gt;Envelopes of Surfaces in 3D&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;A few bugs in the code that computes envelopes were fixed, in
particular in the code that computes the envelopes of planes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulations-and-delaunay-triangulations&quot;&gt;Triangulations and Delaunay Triangulations&lt;/h3&gt;

  &lt;h4 id=&quot;d-periodic-triangulations-new-package&quot;&gt;3D Periodic Triangulations (new package)&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;This package allows to build and handle triangulations of point sets
in the three dimensional flat torus. Triangulations are built
incrementally and can be modified by insertion or removal of
vertices. They offer point location facilities.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;mesh-generation&quot;&gt;Mesh Generation&lt;/h3&gt;

  &lt;h4 id=&quot;surface-reconstruction-from-point-sets-new-package&quot;&gt;Surface Reconstruction from Point Sets (new package)&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;This CGAL package implements an implicit surface reconstruction
method: Poisson Surface Reconstruction. The input is an unorganized
point set with oriented normals.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;d-mesh-generation-new-package&quot;&gt;3D Mesh Generation (new package)&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;This package generates 3 dimensional meshes. It computes isotropic
simplicial meshes for domains or multidomains provided that a domain
descriptor, able to answer queries from a few different types on the
domain, is given. In the current version, Mesh_3 generate meshes
for domain described through implicit functional, 3D images or
polyhedral boundaries. The output is a 3D mesh of the domain volume
and conformal surface meshes for all the boundary and subdividing
surfaces.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;geometry-processing&quot;&gt;Geometry Processing&lt;/h3&gt;

  &lt;h4 id=&quot;triangulated-surface-mesh-simplification&quot;&gt;Triangulated Surface Mesh Simplification&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; in the passing of the visitor object.&lt;/li&gt;
    &lt;li&gt;Fixed a bug in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;link_condition&lt;/code&gt; test&lt;/li&gt;
    &lt;li&gt;Added a geometric test to avoid folding of facets&lt;/li&gt;
    &lt;li&gt;Fixed a bug in the handling of overflow in the LindstromTurk computations.&lt;/li&gt;
    &lt;li&gt;Updated the manual to account for the new visitor interface.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;point-set-processing-new-package&quot;&gt;Point Set Processing (new package)&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;This packages implements a set of algorithms for analysis,
processing, and normal estimation and orientation of point sets.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;spatial-searching-and-sorting&quot;&gt;Spatial Searching and Sorting&lt;/h3&gt;

  &lt;h4 id=&quot;aabb-tree-new-package&quot;&gt;AABB tree (new package)&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;This package implements a hierarchy of axis-aligned bounding boxes
(a AABB tree) for efficient intersection and distance computations
between 3D queries and sets of input 3D geometric objects.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;support-library&quot;&gt;Support Library&lt;/h3&gt;

  &lt;h4 id=&quot;cgalipelets-new-package&quot;&gt;CGAL_ipelets (new package):&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;Object that eases the writing of Ipe’s plugins that use CGAL.
Plugins for CGAL main 2D algorithm are provided as demo.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ ACCV</title>
   <link href="http://www.cgal.org/2009/09/01/cgalaccv/"/>
   <updated>2009-09-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2009/09/01/cgalaccv</id>
   <content type="html">
&lt;p&gt;Attend a demos session on &lt;a href=&quot;http://www.accv2009.org/ACCV2009/Technical_Program.html&quot;&gt; CGAL Point Set Processing and Surface Reconstruction&lt;/a&gt; at &lt;a href=&quot;http://www.accv2009.org/ACCV2009/Home.html&quot;&gt;The Ninth Asian Conference on Computer Vision&lt;/a&gt;, Friday, September 25 and Sunday, September 27; 16:30-18:30), Xi20an, China.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ SIGGRAPH 2009</title>
   <link href="http://www.cgal.org/2009/08/01/siggraph-2009/"/>
   <updated>2009-08-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2009/08/01/siggraph-2009</id>
   <content type="html">
&lt;p&gt;Visit the CGAL project on &lt;a href=&quot;http://sis.siggraph.org/cgi-bin/procform_SIS_2009.py?preparsed=1&amp;amp;command=pack&amp;amp;formname=exhibitor&amp;amp;booth=3429&quot;&gt;Booth No. 3429&lt;/a&gt; at the exhibition of &lt;a href=&quot;http://www.siggraph.org/s2009/&quot;&gt;SIGGRAPH 2009&lt;/a&gt;, New Orleans, 4-6 08 2009.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 3.5 beta1 released</title>
   <link href="http://www.cgal.org/2009/07/30/cgal-35-beta1/"/>
   <updated>2009-07-30T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2009/07/30/cgal-35-beta1</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-3.5-beta1&quot;&gt;Download CGAL-3.5 beta1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/Manual/3.5/doc_html/cgal_manual/packages.html&quot;&gt;CGAL-3.5 beta1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;CGAL releases will now be published about every six months. As a transition
  release, CGAL-3.5 has been developed in a 9 months period, starting from the release CGAL-3.4.&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;CGAL 3.5 beta1 differs from &lt;a href=&quot;../../../../2009/01/22/cgal-34&quot;&gt;CGAL 3.4&lt;/a&gt; in the platforms that are supported and
  in functionality. There have also been a number of bug fixes for this release.&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Additional supported platforms:
      &lt;ul&gt;
        &lt;li&gt;GNU g++ 4.4 supported.&lt;/li&gt;
        &lt;li&gt;Intel Compiler 11 supported on Linux&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Fixed ABI incompatibilities when mixing CGAL and Boost Program
  Options on Windows/Visual C++ (the compilation flag &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-D_SECURE_SCL=0&lt;/code&gt; is no longer used in Debug mode).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;geometry-kernels&quot;&gt;Geometry Kernels&lt;/h3&gt;

  &lt;h4 id=&quot;d-spherical-geometry-kernel&quot;&gt;3D Spherical Geometry Kernel&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;Add functionalities to manipulate circles, circular arcs and points that belong to the same sphere.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygons&quot;&gt;Polygons&lt;/h3&gt;

  &lt;h4 id=&quot;d-regularized-boolean-set-operations&quot;&gt;2D Regularized Boolean Set-Operations&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;The polygon validation operations were enhanced and their interface
  was improved. They are now offered as free functions and applied properly.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;d-straight-skeleton-and-polygon-offsetting&quot;&gt;2D Straight Skeleton and Polygon Offsetting&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;Updated the manual to document the new partial skeletons feature (already in the code since 3.4)&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;arrangements&quot;&gt;Arrangements&lt;/h3&gt;

  &lt;h4 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;The member function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_at_infinity()&lt;/code&gt; of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrangement_2::Vertex&lt;/code&gt; was
replaced by the new function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_at_open_boundary()&lt;/code&gt;. The former is
deprecated. While still supported in version 3.5, It will not be
supported in future releases. The member functions
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boundary_type_in_x() and &lt;/code&gt;boundary_type_in_y()&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; were permanently
replaced by the functions &lt;/code&gt;parameter_space_in_x()` and
parameter_space_in_y(), respectively. The 2 new functions return
an enumeration of a new type, namely Arr_parameter_space.&lt;/li&gt;
    &lt;li&gt;The tags in the geometry traits that indicate the type of boundary
of the embedding surface were replaced by the following new tags:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_left_side_tag&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_bottom_side_tag&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_top_side_tag&lt;/code&gt;, and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_right_side_tag&lt;/code&gt; In addition, the code was change, and now it
is possible not to indicate the tags at all. Default values are
assumed. This however will produce warning messages, and should be
avoided.&lt;/li&gt;
    &lt;li&gt;All operations of the geometry traits-class were made ‘const’. This
change was reflected in the code of this package and all other
packages that are based on it. Traits classes that maintain state,
should declare the data members that store the state as mutable.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;envelopes-of-surfaces-in-3d&quot;&gt;Envelopes of Surfaces in 3D&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;A few bugs in the code that computes envelopes were fixed, in
particular in the code that computes the envelopes of planes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulations-and-delaunay-triangulations&quot;&gt;Triangulations and Delaunay Triangulations&lt;/h3&gt;

  &lt;h4 id=&quot;d-periodic-triangulations-new-package&quot;&gt;3D Periodic Triangulations (new package)&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;This package allows to build and handle triangulations of point sets
in the three dimensional flat torus. Triangulations are built
incrementally and can be modified by insertion or removal of
vertices. They offer point location facilities.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;mesh-generation&quot;&gt;Mesh Generation&lt;/h3&gt;

  &lt;h4 id=&quot;surface-reconstruction-from-point-sets-new-package&quot;&gt;Surface Reconstruction from Point Sets (new package)&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;This CGAL package implements an implicit surface reconstruction
method: Poisson Surface Reconstruction. The input is an unorganized
point set with oriented normals.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;d-mesh-generation-new-package&quot;&gt;3D Mesh Generation (new package)&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;This package generates 3 dimensional meshes. It computes isotropic
simplicial meshes for domains or multidomains provided that a domain
descriptor, able to answer queries from a few different types on the
domain, is given. In the current version, Mesh_3 generate meshes
for domain described through implicit functional, 3D images or
polyhedral boundaries. The output is a 3D mesh of the domain volume
and conformal surface meshes for all the boundary and subdividing
surfaces.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;geometry-processing&quot;&gt;Geometry Processing&lt;/h3&gt;

  &lt;h4 id=&quot;triangulated-surface-mesh-simplification&quot;&gt;Triangulated Surface Mesh Simplification&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;strong&gt;Breaking change:&lt;/strong&gt; in the passing of the visitor object.&lt;/li&gt;
    &lt;li&gt;Fixed a bug in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;link_condition&lt;/code&gt; test&lt;/li&gt;
    &lt;li&gt;Added a geometric test to avoid folding of facets&lt;/li&gt;
    &lt;li&gt;Fixed a bug in the handling of overflow in the LindstromTurk computations.&lt;/li&gt;
    &lt;li&gt;Updated the manual to account for the new visitor interface.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;point-set-processing-new-package&quot;&gt;Point Set Processing (new package)&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;This packages implements a set of algorithms for analysis,
processing, and normal estimation and orientation of point sets.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;spatial-searching-and-sorting&quot;&gt;Spatial Searching and Sorting&lt;/h3&gt;

  &lt;h4 id=&quot;aabb-tree-new-package&quot;&gt;AABB tree (new package)&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;This package implements a hierarchy of axis-aligned bounding boxes
(a AABB tree) for efficient intersection and distance computations
between 3D queries and sets of input 3D geometric objects.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;support-library&quot;&gt;Support Library&lt;/h3&gt;

  &lt;h4 id=&quot;cgalipelets-new-package&quot;&gt;CGAL_ipelets (new package):&lt;/h4&gt;

  &lt;ul&gt;
    &lt;li&gt;Object that eases the writing of Ipe’s plugins that use CGAL.
Plugins for CGAL main 2D algorithm are provided as demo.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>MATLAB uses CGAL triangulations</title>
   <link href="http://www.cgal.org/2009/03/01/matlab-uses-cgal-triangulations/"/>
   <updated>2009-03-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2009/03/01/matlab-uses-cgal-triangulations</id>
   <content type="html">
&lt;p&gt;The new Matlab 2009a now uses CGAL triangulations. Watch the &lt;a href=&quot;https://www.mathworks.com/videos/new-mathematics-features-in-r2009a-69010.html&quot;&gt;video&lt;/a&gt;!&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 3.4 released</title>
   <link href="http://www.cgal.org/2009/01/22/cgal-34/"/>
   <updated>2009-01-22T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2009/01/22/cgal-34</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-3.4&quot;&gt;Download CGAL-3.4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/Manual/3.4/doc_html/cgal_manual/packages.html&quot;&gt;CGAL-3.4 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 3.4 differs from &lt;a href=&quot;../../../../2007/09/04/cgal-331&quot;&gt;CGAL 3.3.1&lt;/a&gt; in the platforms that are supported and
in functionality. There have also been a number of bug fixes for this release.&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;GNU g++ 4.3 supported. Support for g++ 3.3 is dropped.&lt;/li&gt;
    &lt;li&gt;Visual 9 supported. Support for Visual 7 is dropped.&lt;/li&gt;
    &lt;li&gt;Boost version 1.33 at least is now required.&lt;/li&gt;
    &lt;li&gt;CGAL now depends on Boost.Threads, which implies to link against a
compiled part of Boost.&lt;/li&gt;
    &lt;li&gt;The new macro CGAL_NO_DEPRECATED_CODE can be defined to disable
deprecated code, helping users discover if they rely on code that
may be removed in subsequent releases.&lt;/li&gt;
    &lt;li&gt;Assertion behaviour: It is not possible anymore to set the CONTINUE
mode for assertion failures. Functions that allow to change the
assertion behaviour are now declared in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/assertions_behaviour.h&amp;gt;&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Qt3 based demos are still there but the documentation has been
removed as the CGAL::Qt_Widget will be deprecated.&lt;/li&gt;
    &lt;li&gt;Qt4 based demos use the Qt GraphicsView framework and the
libQGLViewer.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install_cgal&lt;/code&gt; has been replaced by CMake.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polynomial-new-package&quot;&gt;Polynomial (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package introduces a concept, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polynomial_d&lt;/code&gt;, for
multivariate polynomials in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt; variables.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;modular-arithmetic-new-package&quot;&gt;Modular Arithmetic (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package provides arithmetic over finite fields.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;number-types&quot;&gt;Number Types&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The counter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Interval_nt::number_of_failures()&lt;/code&gt; has been removed,
replaced by a profiling counter enabled with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_PROFILE&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Fix of a bug in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CORE/Expr.h&lt;/code&gt;. As a consequence, the arrangement demo
works properly when handling arrangements of conics, for example,
when defining an arc with 5 points.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-spherical-geometry-kernel-new-package&quot;&gt;3D Spherical Geometry Kernel (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package is an extension of the linear CGAL Kernel. It offers
functionalities on spheres, circles, circular arcs and line segments
in the 3D space.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;linear-kernel&quot;&gt;Linear Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;We recommend that you use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object_cast()&lt;/code&gt; function instead of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assign()&lt;/code&gt; to extract an object from a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt;, for efficiency
reasons.&lt;/li&gt;
    &lt;li&gt;The Kernel archetypes provided by the 2D/3D linear kernel have been
removed.&lt;/li&gt;
    &lt;li&gt;The deprecated linear kernel functors &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Construct_supporting_line_2&lt;/code&gt;
and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Construct_supporting_line_3&lt;/code&gt; have been removed.&lt;/li&gt;
    &lt;li&gt;Ambiant_dimension and Feature_dimenison have been added to
retrieve the potentially compile-time dimension of a space or of an
object.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;barycenter()&lt;/code&gt; functions have been added.&lt;/li&gt;
    &lt;li&gt;The geometric object &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Circle_3&lt;/code&gt; as well as predicates and
constructions have been added to the kernel&lt;/li&gt;
    &lt;li&gt;The missing intersection/do_intersect between &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Line_3&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Line_3&lt;/code&gt;
has been added as well.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;3D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Removed the deprecated functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cell:mirror_index()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cell::mirror_vertex()&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Derecursification of two functions that in some cases lead to stack overflows.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-nef-polyhedron&quot;&gt;3D Nef Polyhedron&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;n-ary union/intersection.&lt;/li&gt;
    &lt;li&gt;intersection with halfspace under standard kernel.&lt;/li&gt;
    &lt;li&gt;constructor for polylines.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-qt4-graphicsview-new-package&quot;&gt;CGAL and the Qt4 GraphicsView (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;2D CGAL Kernel objects and many data structures have can be rendered in a QGraphicsView.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;stl-extensions&quot;&gt;STL Extensions:&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The functor adaptors for argument binding and composition (bind_*,
compose, compose_shared, swap_*, negate, along with the helper
functions set_arity_* and Arity class and Arity_tag typedefs)
which were provided by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;CGAL/functional.h&amp;gt;&lt;/code&gt; have been removed.
Please use the better boost::bind mecanism instead. The concept
AdaptableFunctor has been changed accordingly such that only a
nested result_type is required.&lt;/li&gt;
    &lt;li&gt;The accessory classes Twotuple, Threetuple, Fourtuple and Sixtuple
are also deprecated (use CGAL::array instead).&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triple&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Quadruple&lt;/code&gt; are in the process of being
replaced by boost::tuple. As a first step, we strongly recommend
that you replace the direct access to the data members (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.first&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.second&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.third&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.fourth&lt;/code&gt;), by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get&amp;lt;&amp;gt;()&lt;/code&gt; member function;
and replace the make_triple and make_quadruple maker functions by
make_tuple.
This way, in a further release, we will be able to switch to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boost::tuple&lt;/code&gt; more easily.&lt;/li&gt;
    &lt;li&gt;The class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Uncertain&lt;/code&gt; has been documented. It is
typically used to report uncertain results for predicates using
interval arithmetic, and other filtering techniques.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Changed the name of the arrangement package from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrangement_2&lt;/code&gt; to
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrangement_on_surface_2&lt;/code&gt; to reflect the potential capabilities of
the package to construct and maintain arrangements induced by curves
embedded on two dimensional surfaces in three space. Most of these
capabilities will become available only in future releases though.&lt;/li&gt;
    &lt;li&gt;Enhanced the geometry traits concept to handle arrangements embedded
on surfaces. Each geometry-traits class must now define the
‘Boundary_category’ tag.&lt;/li&gt;
    &lt;li&gt;Fixed a bug in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polyline_traits_2.h&lt;/code&gt;, where the operator that
compares two curves failed to evaluate the correct result (true)
when the curves are different, but their graphs are identical.&lt;/li&gt;
    &lt;li&gt;Permanently removed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO/Arr_postscript_file_stream.h&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO/Polyline_2_postscript_file_stream.h&lt;/code&gt;, as they depend on
obsolete features and LEDA.&lt;/li&gt;
    &lt;li&gt;Fixed several bugs in the arrangement demo and enhanced it. e.g.,
fixed background color change, allowed vertex coloring , enabled
“smart” color selection, etc.&lt;/li&gt;
    &lt;li&gt;Enhanced the arrangement demo with new features, such as allowing
the abortion of the merge function (de-select), updated the how-to
description, etc.&lt;/li&gt;
    &lt;li&gt;Replace the functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::insert_curve()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::insert_curves()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::insert_x_monotone_curve()&lt;/code&gt;, and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::insert_x_monotone_curves()&lt;/code&gt; with a single overloaded
function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::insert()&lt;/code&gt;. The former 4 functions are now deprecated,
and may no longer be supported in future releases.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;envelopes-of-surfaces-in-3d&quot;&gt;Envelopes of Surfaces in 3D&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a bug in the computation of the envelope of unbounded planes
caused by multiple removals of vertices at infinity.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-regularized-boolean-set-operations&quot;&gt;2D Regularized Boolean Set-Operations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a bug in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;connect_holes()&lt;/code&gt; that caused failures when connecting
holes touching the outer boundary.&lt;/li&gt;
    &lt;li&gt;Fixed the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GeneralPolygonSetTraits_2&lt;/code&gt;. Introduced two new
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;concepts GpsTraitsGeneralPolygon_2&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GpsTraitsGeneralPolygonWithHoles_2&lt;/code&gt;. Fixed the definition of the two
nested required types &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polygon_2&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polygon_with_holes_2&lt;/code&gt; of the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GeneralPolygonSetTraits_2&lt;/code&gt; concept. They must model now the two new
concepts above.&lt;/li&gt;
    &lt;li&gt;Added a default template parameter to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;General_polygon_set_2&lt;/code&gt; to
allow users to pass their specialized DCEL used to instantiate the
underlying arrangement.&lt;/li&gt;
    &lt;li&gt;Enhanced the BOP demo to use multiple windows.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-minkowski-sums&quot;&gt;2D Minkowski Sums&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a few bugs in the approximate offset function, making it
robust to highly degenerate inputs.&lt;/li&gt;
    &lt;li&gt;Fixed a bug in the exact Minkowski sum computation when processing
degenerate inputs that induce overlapping of contiguous segments in
the convolution cycles.&lt;/li&gt;
    &lt;li&gt;Optimized the approximate offset function (reduced time consumption
up to a factor of 2 in some cases).&lt;/li&gt;
    &lt;li&gt;Added functionality to compute the offset (or to approximate the
offset) of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polygon_with_holes_2&lt;/code&gt; (and not just of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polygon_2&lt;/code&gt;).&lt;/li&gt;
    &lt;li&gt;Added the functionality to compute (or to approximate) the inner
offset of a polygon.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ LinkedIn</title>
   <link href="http://www.cgal.org/2009/01/01/cgallinkedin/"/>
   <updated>2009-01-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2009/01/01/cgallinkedin</id>
   <content type="html">
&lt;p&gt;A &lt;a href=&quot;https://www.linkedin.com/groups?viewMembers=&amp;amp;gid=1742497&amp;amp;sik=1232440138990&quot;&gt;CGAL users group&lt;/a&gt; has been created on the &lt;a href=&quot;https://www.linkedin.com/&quot;&gt;LinkedIn&lt;/a&gt; social network.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 3.4 beta1 released</title>
   <link href="http://www.cgal.org/2008/12/19/cgal-34-beta1/"/>
   <updated>2008-12-19T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2008/12/19/cgal-34-beta1</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-3.4-beta1&quot;&gt;Download CGAL-3.4 beta1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/Manual/3.4/doc_html/cgal_manual/packages.html&quot;&gt;CGAL-3.4 beta1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 3.4 differs from &lt;a href=&quot;../../../../2007/09/04/cgal-331&quot;&gt;CGAL 3.3.1&lt;/a&gt; in the platforms that are supported and
in functionality. There have also been a number of bug fixes for this release.&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;GNU g++ 4.3 supported. Support for g++ 3.3 is dropped.&lt;/li&gt;
    &lt;li&gt;Visual 9 supported. Support for Visual 7 is dropped.&lt;/li&gt;
    &lt;li&gt;Boost version 1.33 at least is now required.&lt;/li&gt;
    &lt;li&gt;CGAL now depends on Boost.Threads, which implies to link against a compiled part of Boost.&lt;/li&gt;
    &lt;li&gt;The new macro &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_NO_DEPRECATED_CODE&lt;/code&gt; can be defined to disable deprecated code,
   helping users discover if they rely on code that may be removed in
   subsequent releases.&lt;/li&gt;
    &lt;li&gt;Assertion behaviour:
   It is not possible anymore to set the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CONTINUE&lt;/code&gt; mode for assertion failures.
   Functions that allow to change the assertion behaviour are now declared
   in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;lt;CGAL/assertions_behaviour.h&amp;amp;gt;&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Qt3 based demos are still there but the documentation has been removed
   as the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Qt_Widget&lt;/code&gt; will be deprecated.&lt;/li&gt;
    &lt;li&gt;Qt4 based demos use the Qt GraphicsView framework and the libQGLViewer.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;install_cgal&lt;/code&gt; has been replaced by CMake.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polynomial-new-package&quot;&gt;Polynomial (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package introduces a concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polynomial_d&lt;/code&gt;, a concept for multivariate polynomials in d variables.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;modular-arithmetic-new-package&quot;&gt;Modular Arithmetic (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package provides arithmetic over finite fields.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;number-types&quot;&gt;Number Types&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The counter Interval_nt::number_of_failures() has been removed, replaced by
a profiling counter enabled with CGAL_PROFILE.&lt;/li&gt;
    &lt;li&gt;Fix of a bug in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CORE/Expr.h&lt;/code&gt;; as a consequence, the arrangement demo works properly when handling
arrangements of conics, for example, when defining an arc with 5 points.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-spherical-geometry-kernel-new-package&quot;&gt;3D Spherical Geometry Kernel (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;This package is an extension of the linear CGAL Kernel. It offers functionalities on spheres,
    circles, circular arcs and line segments in the 3D space.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;linear-kernel&quot;&gt;Linear Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;We recommend that you use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;object_cast()&lt;/code&gt; function instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assign()&lt;/code&gt;
    to extract an object from a CGAL::Object, for efficiency reasons.&lt;/li&gt;
    &lt;li&gt;The Kernel archetypes provided by the 2D/3D linear kernel have been removed.&lt;/li&gt;
    &lt;li&gt;The deprecated linear kernel functors &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Construct_supporting_line_2&lt;/code&gt; and
    &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Construct_supporting_line_3&lt;/code&gt; have been removed.&lt;/li&gt;
    &lt;li&gt;Ambiant_dimension and Feature_dimenison have been added to retrieve the
    potentially compile-time dimension of a space or of an object.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;barycenter()&lt;/code&gt; functions have been added.&lt;/li&gt;
    &lt;li&gt;The geometric object &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Circle_3&lt;/code&gt; as well as predicates and constructions have been added to the kernel.&lt;/li&gt;
    &lt;li&gt;The missing intersection/do_intersect between two &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Line_3&lt;/code&gt; objects have been added.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;3D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Removed the deprecated functions Cell:mirror_index() and Cell::mirror_vertex().&lt;/li&gt;
    &lt;li&gt;Derecursification of two functions that in some cases lead to stack overflows.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-nef-polyhedron&quot;&gt;3D Nef Polyhedron&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added n-ary union/intersection.&lt;/li&gt;
    &lt;li&gt;Added intersection with halfspace under standard kernel.&lt;/li&gt;
    &lt;li&gt;Added constructor for polylines.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-qt4-graphicsview-new-package&quot;&gt;CGAL and the Qt4 GraphicsView (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;2D CGAL Kernel objects and many data structures have can be rendered in a QGraphicsView.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;stl-extensions&quot;&gt;STL Extensions:&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The functor adaptors for argument binding and composition
 (bind_&lt;em&gt;, compose, compose_shared, swap_&lt;/em&gt;, negate, along with the helper
 functions set_arity_* and Arity class and Arity_tag typedefs) which were provided
 by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;amp;lt;CGAL/functional.h&amp;amp;gt;&lt;/code&gt; have been removed.  Please use the better boost::bind
 mecanism instead.  The concept AdaptableFunctor has been changed accordingly
 such that only a nested result_type is required.&lt;/li&gt;
    &lt;li&gt;The accessory classes Twotuple, Threetuple, Fourtuple and Sixtuple are also
 deprecated (use CGAL::array instead).&lt;/li&gt;
    &lt;li&gt;CGAL::Triple and CGAL::Quadruple are in the process of being replaced by
 boost::tuple.  As a first step, we strongly recommend that you replace
 the direct access to the data members (.first, .second, .third, .fourth),
 by the get&amp;lt;i&amp;gt;() member function; and replace the make_triple and make_quadruple
 maker functions by make_tuple.
 This way, in a further release, we will be able to switch to boost::tuple more easily.&lt;/li&gt;
    &lt;li&gt;The class CGAL::Uncertain&amp;lt;&amp;gt; has been documented.  It is typically used to report
 uncertain results for predicates using interval arithmetic, and other filtering
 techniques.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Changed the name of the arrangement package from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrangement_2&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrangement_on_surface_2&lt;/code&gt;
 to reflect the potential capabilities of the package to construct and maintain arrangements
 induced by curves embedded on two dimensional surfaces in three space. Most of these capabilities
 will become available only in future releases though.&lt;/li&gt;
    &lt;li&gt;Enhanced the geometry traits concept to handle arrangements embedded on surfaces. Each geometry-traits
 class must now define the ‘Boundary_category’ tag.&lt;/li&gt;
    &lt;li&gt;Fixed a bug in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polyline_traits_2.h&lt;/code&gt;, where the operator that compares two curves failed to evaluate
 the correct result (true) when the curves are different, but their graphs are identical.&lt;/li&gt;
    &lt;li&gt;Permanently removed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO/Arr_postscript_file_stream.h&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IO/Polyline_2_postscript_file_stream.h&lt;/code&gt;,
 as they depend on obsolete features and LEDA.&lt;/li&gt;
    &lt;li&gt;Fixed several bugs in the arrangement demo and enhanced it. e.g., fixed background color change,
 allowed vertex coloring , enabled “smart” color selection, etc.&lt;/li&gt;
    &lt;li&gt;Enhanced the arrangement demo with new features, such as allowing the abortion of the merge function
 (de-select), updated the how-to description, etc.&lt;/li&gt;
    &lt;li&gt;Replaced the functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::insert_curve()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::insert_curves()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::insert_x_monotone_curve()&lt;/code&gt;,
 and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::insert_x_monotone_curves()&lt;/code&gt; with a single overloaded function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::insert()&lt;/code&gt;. The former
 4 functions are now deprecated, and may no longer be supported in future releases.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;envelopes-of-surfaces-in-3d&quot;&gt;Envelopes of Surfaces in 3D&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a bug in the computation of the envelope of unbounded planes caused by multiple removals
 of vertices at infinity.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-regularized-boolean-set-operations&quot;&gt;2D Regularized Boolean Set-Operations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a bug in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;connect_holes()&lt;/code&gt; that caused failures when connecting holes touching the outer boundary.&lt;/li&gt;
    &lt;li&gt;Fixed the concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GeneralPolygonSetTraits_2&lt;/code&gt;. Introduced two new concepts &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GpsTraitsGeneralPolygon_2&lt;/code&gt;
 and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GpsTraitsGeneralPolygonWithHoles_2&lt;/code&gt;. Fixed the definition of the two nested required types &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polygon_2&lt;/code&gt;
 and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polygon_with_holes_2&lt;/code&gt; of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GeneralPolygonSetTraits_2&lt;/code&gt; concept. They must model now the two new
 concepts above.&lt;/li&gt;
    &lt;li&gt;Added a default template parameter to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;General_polygon_set_2&lt;/code&gt; to allow users to pass their specialized
 DCEL used to instantiate the underlying arrangement.&lt;/li&gt;
    &lt;li&gt;Enhanced the BOP demo to use multiple windows.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-minkowski-sums&quot;&gt;2D Minkowski Sums&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a few bugs in the approximate offset function, making it robust to highly degenerate inputs.&lt;/li&gt;
    &lt;li&gt;Fixed a bug in the exact Minkowski sum computation when processing degenerate inputs that induce overlapping
 of contiguous segments in the convolution cycles.&lt;/li&gt;
    &lt;li&gt;Optimized the approximate offset function (reduced time consumption up to a factor of 2 in some cases).&lt;/li&gt;
    &lt;li&gt;Added functionality to compute the offset (or to approximate the offset) of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polygon_with_holes_2&lt;/code&gt;
 (and not just of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polygon_2&lt;/code&gt;).&lt;/li&gt;
    &lt;li&gt;Added the functionality to compute (or to approximate) the inner offset of a polygon.&lt;/li&gt;
  &lt;/ul&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ Workshop on Periodic Spaces</title>
   <link href="http://www.cgal.org/2008/10/01/cgalworkshop-on-periodic-spaces/"/>
   <updated>2008-10-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2008/10/01/cgalworkshop-on-periodic-spaces</id>
   <content type="html">
&lt;p&gt;Attend the &lt;a href=&quot;http://www.cgal.org/Events/PeriodicSpacesWorkshop/&quot;&gt;CGAL Prospective Workshop on Geometric Computing in Periodic Spaces&lt;/a&gt; on October 20, 2008, at INRIA Sophia Antipolis, France.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ IMR</title>
   <link href="http://www.cgal.org/2008/10/01/cgalmeshing-round-table/"/>
   <updated>2008-10-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2008/10/01/cgalmeshing-round-table</id>
   <content type="html">
&lt;p&gt;October 12, 2008, the meshing tools of CGAL are presented in a short course, entitled &lt;a href=&quot;http://www.imr.sandia.gov/17imr/ShortCourses.html&quot;&gt; Current trends in Delaunay refinement meshing &lt;/a&gt;, at the &lt;a href=&quot;http://www.imr.sandia.gov/17imr&quot;&gt; 17th International Meshing Roundtable &lt;/a&gt;, Pittsburg, Pennsylvania.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ SIGGRAPH 2008: Course</title>
   <link href="http://www.cgal.org/2008/08/01/siggraph-2008-course/"/>
   <updated>2008-08-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2008/08/01/siggraph-2008-course</id>
   <content type="html">
&lt;p&gt;Attend a &lt;a href=&quot;http://www.siggraph.org/s2008/attendees/program/item/?type=class&amp;amp;id=56&quot;&gt;Course on CGAL&lt;/a&gt; at the classes of &lt;a href=&quot;http://www.siggraph.org/s2008/&quot;&gt;SIGGRAPH 2008&lt;/a&gt;, Thursday, 14th August, 8:30 am - 12:15 pm , Room 411, Los Angeles.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ SIGGRAPH 2008: Booth</title>
   <link href="http://www.cgal.org/2008/08/01/siggraph-2008-booth/"/>
   <updated>2008-08-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2008/08/01/siggraph-2008-booth</id>
   <content type="html">
&lt;p&gt;Visit the CGAL project on &lt;a href=&quot;http://sis.siggraph.org/cgi-bin/procform?preparsed=1&amp;amp;command=pack&amp;amp;formname=exhibitor&amp;amp;exhibitorid=126&quot;&gt;Booth No. 1011&lt;/a&gt; at the exhibition of &lt;a href=&quot;http://www.siggraph.org/s2008/&quot;&gt;SIGGRAPH 2008&lt;/a&gt;, Los Angeles, 12-14th August 2008.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ Google Tech Talk Series</title>
   <link href="http://www.cgal.org/2008/03/01/cgalgoogle-tech-talk-series/"/>
   <updated>2008-03-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2008/03/01/cgalgoogle-tech-talk-series</id>
   <content type="html">
&lt;p&gt;Sylvain Pion and Andreas Fabri presented CGAL in the &lt;a href=&quot;http://www.youtube.com/watch?v=3DLfkWWw_Tg&quot;&gt;Google TechTalk Series&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL User Workshop</title>
   <link href="http://www.cgal.org/2008/03/01/cgal-user-workshop/"/>
   <updated>2008-03-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2008/03/01/cgal-user-workshop</id>
   <content type="html">
&lt;p&gt;The &lt;a href=&quot;https://cgal.github.io/cgal-web/Events/UserWorkshop/2008/index.html&quot;&gt;3rd CGAL User Workshop&lt;/a&gt; will be held on March 17, 2008, immediately before the European Workshop on Computational Geometry in Nancy, France.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 3.3.1 released</title>
   <link href="http://www.cgal.org/2007/09/04/cgal-331/"/>
   <updated>2007-09-04T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2007/09/04/cgal-331</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-3.3.1&quot;&gt;Download CGAL-3.3.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/Manual/3.3.1/doc_html/cgal_manual/packages.html&quot;&gt;CGAL-3.3.1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a bug fix release for &lt;a href=&quot;../../../../2007/06/01/cgal-33&quot;&gt;CGAL 3.3&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;skin-surface-meshing-new-package&quot;&gt;Skin Surface Meshing (new package)&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;The new Skin Surface Meshing package had been forgotten in the list
of changes and the release announcement of CGAL 3.3: This package
allows to build a triangular mesh of a skin surface. Skin surfaces
are used for modeling large molecules in biological computing.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Intel C++ 9 was wrongly recognized as unsupported by install_cgal.&lt;/li&gt;
    &lt;li&gt;Added autolink (for Visual C++) for the CGALImageIO and CGALPDB
libraries.&lt;/li&gt;
    &lt;li&gt;Fixed bug in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Memory_sizer&lt;/code&gt; when using more than 4GB of memory
(64bit).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;number-types&quot;&gt;Number Types&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed bug in FPU rounding mode macros (affected only the alpha architecture).&lt;/li&gt;
    &lt;li&gt;Fixed bug in MP_Float constructor from double for some particular values.&lt;/li&gt;
    &lt;li&gt;Fixed bug in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;to_double(Lazy_exact_nt)&lt;/code&gt; sometimes returning &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NaN&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;kernel&quot;&gt;Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed forgotten derivation in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Circular_kernel_2::Has_on_2&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Added some missing functions in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bbox_3&lt;/code&gt; compared to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Bbox_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;arrangements&quot;&gt;Arrangements&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed a bug in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrangement_2&lt;/code&gt; package in dual arrangement
representation for Boost graphs when reporting all halfedges of a
face.&lt;/li&gt;
    &lt;li&gt;Fixed a bug in the Arrangement sweep-line when using a specific
polyline configuration.&lt;/li&gt;
    &lt;li&gt;Fixed bug in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrangement_2&lt;/code&gt; in walk along a line point location for
unbounded curves.&lt;/li&gt;
    &lt;li&gt;Fixed bug in aggregated insertion to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrangement_2&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Fixed bug in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrangment_2&lt;/code&gt; class when inserting an unbounded curve
from an existing vertex.&lt;/li&gt;
    &lt;li&gt;Fixed bug when dealing with a degenerate conic arc in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_conic_traits_2&lt;/code&gt; of the Arrangment package, meaning a line
segment which is part of a degenerate parabola/hyperbola.&lt;/li&gt;
    &lt;li&gt;Fixed bug in the Bezier traits-class: properly handle line segments.
properly handle comparison near a vertical tangency.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-polygon&quot;&gt;2D Polygon&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed bug in degenerate case of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polygon_2::is_convex()&lt;/code&gt; for equal points.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;2D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed bug in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations-1&quot;&gt;3D Triangulations&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Added a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;circumcenter()&lt;/code&gt; function in the default Cell type parameter
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_ds_cell_base_3&lt;/code&gt;, so that the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dual()&lt;/code&gt; member
function of Delaunay still work as before, without requiring the
explicit use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_cell_base&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Added missing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator-&amp;gt;()&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Facet_circulator&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;interpolation&quot;&gt;Interpolation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed bug in Interpolation 3D about the normalization coefficient
initialization.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-boolean-operations-on-nef-polyhedra&quot;&gt;3D Boolean Operations on Nef Polyhedra&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed bug in construction of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nef_polyhedron_3&lt;/code&gt; from off-file. Now,
always the inner volume is selected.&lt;/li&gt;
    &lt;li&gt;Fixed bug in conversion from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nef_polyhedron_3&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polyhedron_3&lt;/code&gt;.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polyhedron_3&lt;/code&gt; was not cleared at the beginning.&lt;/li&gt;
    &lt;li&gt;Fixed bug in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nef_polyhedron_3&lt;/code&gt; in update of indexes for
construction of external structure.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;third-party-libraries-shipped-with-cgal&quot;&gt;Third Party Libraries Shipped with CGAL&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;TAUCS supports now 64 bits platforms.&lt;/li&gt;
    &lt;li&gt;CAUTION: Since version 3.3.1, CGAL is no longer compatible with the
official release of TAUCS (currently 2.2). Make sure to use the
version modified by the CGAL project and available from the download
section of &lt;a href=&quot;https://www.cgal.org&quot;&gt;www.cgal.org&lt;/a&gt;.&lt;/li&gt;
  &lt;/ul&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ SIGGRAPH 2007</title>
   <link href="http://www.cgal.org/2007/08/01/siggraph-2007/"/>
   <updated>2007-08-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2007/08/01/siggraph-2007</id>
   <content type="html">
&lt;p&gt;Visit the CGAL project on &lt;a href=&quot;http://esub.siggraph.org/cgi-bin/cgi/idEDetail.html&amp;amp;CompanyID=1076&quot;&gt;Booth No. 325&lt;/a&gt; at the exhibition of &lt;a href=&quot;http://www.siggraph.org/s2007/&quot;&gt;SIGGRAPH 2007&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Release of CGAL Ipelets</title>
   <link href="http://www.cgal.org/2007/08/01/release-of-cgal-ipelets/"/>
   <updated>2007-08-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2007/08/01/release-of-cgal-ipelets</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;http://cgal-ipelets.gforge.inria.fr/&quot;&gt;CGAL-Ipelets&lt;/a&gt; 0.9 (plugins for the &lt;a href=&quot;http://ipe.otfried.org/&quot;&gt;Ipe&lt;/a&gt; drawing editor, based on CGAL) is available.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ ISVD</title>
   <link href="http://www.cgal.org/2007/07/01/cgalisvd/"/>
   <updated>2007-07-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2007/07/01/cgalisvd</id>
   <content type="html">
&lt;p&gt;Attend the invited talk about Voronoi diagrams in CGAL at the &lt;a href=&quot;http://www.comp.glam.ac.uk/GIS/ISVD07/&quot;&gt;4th ISVD International Symposium on Voronoi Diagrams in Science and Engineering&lt;/a&gt;, at the University of Glamorgan, Wales, UK, from the 9th to the 11th of July 2007.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ SMI</title>
   <link href="http://www.cgal.org/2007/06/01/cgalsmi/"/>
   <updated>2007-06-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2007/06/01/cgalsmi</id>
   <content type="html">
&lt;p&gt;Visit the CGAL project booth at &lt;a href=&quot;http://smi07.liris.cnrs.fr/&quot;&gt;Shape Modeling International 2007&lt;/a&gt;, Lyon, France, 13-15 June 2007.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ CGTA</title>
   <link href="http://www.cgal.org/2007/06/01/cgalcgta/"/>
   <updated>2007-06-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2007/06/01/cgalcgta</id>
   <content type="html">
&lt;p&gt;The first &lt;a href=&quot;http://tinyurl.com/ysmv3u&quot;&gt;Special Issue on CGAL&lt;/a&gt; of the journal &lt;em&gt;Computational Geometry - Theory and Applications&lt;/em&gt; has appeared.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 3.3 released</title>
   <link href="http://www.cgal.org/2007/06/01/cgal-33/"/>
   <updated>2007-06-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2007/06/01/cgal-33</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-3.3&quot;&gt;Download CGAL-3.3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/Manual/3.3/doc_html/cgal_manual/packages.html&quot;&gt;CGAL-3.3 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 3.3 differs from &lt;a href=&quot;../../../../2006/05/01/cgal-32&quot;&gt;CGAL 3.2&lt;/a&gt; in the platforms that are supported and
in functionality. There have also been a number of bug fixes for this release.&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;supported-platforms&quot;&gt;Supported Platforms&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;GNU g++ 4.1 and 4.2&lt;/li&gt;
    &lt;li&gt;Intel C++ compiler 9&lt;/li&gt;
    &lt;li&gt;Microsoft Visual C++ compiler 8.0&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;no-longer-supported&quot;&gt;No longer supported&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;Intel 8&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;CGAL now supports Visual C++ “Checked iterators” as well as the debug
mode of GNU g++’s STL (-D_GLIBCXX_DEBUG).&lt;/li&gt;
    &lt;li&gt;CGAL now works around the preprocessor macros ‘min’ and ‘max’ defined in
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;windows.h&amp;gt;&lt;/code&gt; which were clashing with min/max functions.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;On Windows the libraries built in Developer Studio now have names
which encode the compiler version, the runtime and whether it was
built in release or debug mode. The libraries to link against are
chosen with linker pragmas in header files.&lt;/li&gt;
    &lt;li&gt;On all platforms but Windows shared and static versions of the libraries are generated.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;manuals&quot;&gt;Manuals&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The Package Overview page now also hosts the precompiled demos.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;algebraic-foundations-new-package&quot;&gt;Algebraic Foundations (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;This package defines what algebra means for CGAL, in terms of
concepts, classes and functions. The main features are:
      &lt;ul&gt;
        &lt;li&gt;explicit concepts for interoperability of types&lt;/li&gt;
        &lt;li&gt;separation between algebraic types (not necessarily embeddable into the reals), and
number types (embeddable into the reals).&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-simplification-new-package&quot;&gt;Surface Mesh Simplification (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;This package provides a mesh simplification framework using edge
collapse operations, and provides the Turk/Lindstrom simplification
algorithm.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;skin-surface-meshing-new-package&quot;&gt;Skin Surface Meshing (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;This package allows to build a triangular mesh of a skin surface.
Skin surfaces are used for modeling large molecules in biological
computing. The surface is defined by a set of balls, representing
the atoms of the molecule, and a shrink factor that determines the
size of the smooth patches gluing the balls together.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;estimation-of-local-differential-properties-new-package&quot;&gt;Estimation of Local Differential Properties (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;This package allows to compute local differential quantities of a
surface from a point sample.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;approximation-of-ridges-and-umbilics-on-triangulated-surface-meshes-new-package&quot;&gt;Approximation of Ridges and Umbilics on Triangulated Surface Meshes (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;This package enables the approximation of differential features on
triangulated surface meshes. Such curvature related features are
lines: ridges or crests, and points: umbilics.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;envelopes-of-curves-in-2d-new-package&quot;&gt;Envelopes of Curves in 2D (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;This package contains two sets of functions that construct the lower
and upper envelope diagram for a given range of bounded or unbounded
curves.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;envelopes-of-surfaces-in-3d-new-package&quot;&gt;Envelopes of Surfaces in 3D (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;This package contains two sets of functions that construct the lower
and upper envelope diagram for a given range of bounded or unbounded
surfaces. The envelope diagram is realized as a 2D arrangement.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;minkowski-sums-in-2d-new-package&quot;&gt;Minkowski Sums in 2D (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;This package contains functions for computing planar Minkowski sums
of two closed polygons, and for a polygon and a disc (an operation
also known as offsetting or dilating a polygon). The package also
contains an efficient approximation algorithm for the offset
computation, which provides a guaranteed approximation bound while
significantly expediting the running times w.r.t. the exact
computation procedure.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-parametrization&quot;&gt;Surface Mesh Parametrization&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added Jacobi and SSOR preconditioners to OpenNL solver, which makes
it much faster and more stable.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangements&quot;&gt;2D Arrangements&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added support for unbounded curves.&lt;/li&gt;
    &lt;li&gt;Added a traits class that supports bounded and unbounded linear
objects, namely lines, rays and line segments.&lt;/li&gt;
    &lt;li&gt;Added traits classes that handle circular arcs based on the circular kernel.&lt;/li&gt;
    &lt;li&gt;Added a traits class that supports Bezier curves.&lt;/li&gt;
    &lt;li&gt;Enhanced the traits class that supports rational functions to
handle unbounded (as well as bounded) arcs&lt;/li&gt;
    &lt;li&gt;Added a free function called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;decompose()&lt;/code&gt; that produces the
symbolic vertical decomposition of a given arrangement,
performing a batched vertical ray-shooting query from all
arrangement vertices.&lt;/li&gt;
    &lt;li&gt;Fixed a memory leak in the sweep-line code.&lt;/li&gt;
    &lt;li&gt;Fixed a bug in computing the minor axis of non-degenerate hyperbolas.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;boolean-set-operations&quot;&gt;Boolean Set Operations&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added the DCEL as a default template parameter to the
General_polygon_set_2 and Polygon_set_2 classes. This
allows users to extend the DCEL of the underlying arrangement.&lt;/li&gt;
    &lt;li&gt;Added a function template called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;connect_holes()&lt;/code&gt; that connects
the holes in a given polygon with holes, turning it into a
sequence of points, where the holes are connceted to the outer
boundary using zero-width passages.&lt;/li&gt;
    &lt;li&gt;Added a non-const function member to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;General_polygon_set_2&lt;/code&gt;
that obtains the underlying arrangement.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-3d-triangulations&quot;&gt;2D and 3D Triangulations&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The constructors and insert member functions which take an
iterator range perform spatial sorting in order to speed up the
insertion.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;optimal-distances&quot;&gt;Optimal Distances&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polytope_distance_d&lt;/code&gt;: has support for homogeneous points; bugfix in fast exact version.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;bounding-volumes&quot;&gt;Bounding Volumes&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Min_annulus_d&lt;/code&gt; has support for homogeneous points; bugfix in fast exact version.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;number-types&quot;&gt;Number Types&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Fixed_precision_nt&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filtered_exact&lt;/code&gt; number types have been removed.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-circular-kernel&quot;&gt;2D Circular Kernel&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Efficiency improved through geometric filtering of predicates,
introduced with the filtered kernel
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filtered_bbox_circular_kernel_2&lt;/code&gt;, and also chosen for
the predefined kernel &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exact_circular_kernel_2&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;linear-kernel&quot;&gt;Linear Kernel&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exact_predicates_exact_constructions_kernel&lt;/code&gt; memory and run-time
improvements through usage of lazy geometric constructions instead
of lazy arithmetic.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;cgal-and-the-boost-graph-library-bgl-new-package&quot;&gt;CGAL and the Boost Graph Library (BGL) (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;This package provides the glue layer for several CGAL data
structures such that they become models of the BGL graph concept.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;spatial-sorting-new-package&quot;&gt;Spatial Sorting (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;This package allows to sort points and other objects along a Hilbert
curve which can improve the performance of algorithms like
triangulations. It is used by the constructors of the triangulation
package which have an iterator range of points as argument.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;linear-and-quadratic-programming-solver-new-package&quot;&gt;Linear and Quadratic Programming Solver (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;This package contains algorithms for minimizing linear and convex
quadratic functions over polyhedral domains, described by linear
equations and inequalities.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ LIAMA</title>
   <link href="http://www.cgal.org/2007/01/01/cgalliama/"/>
   <updated>2007-01-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2007/01/01/cgalliama</id>
   <content type="html">
&lt;p&gt;Attend the &lt;a href=&quot;http://liama.ia.ac.cn/wiki/doku.php?id=projects:10_anniversary:program:eventh&quot;&gt;CGAL Day&lt;/a&gt; at the &lt;a href=&quot;http://liama.ia.ac.cn/&quot;&gt;LIAMA&lt;/a&gt;, Beijing.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ SIGGRAPH 2006</title>
   <link href="http://www.cgal.org/2006/08/01/siggraph-2006/"/>
   <updated>2006-08-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2006/08/01/siggraph-2006</id>
   <content type="html">
&lt;p&gt;Visit the CGAL project on &lt;a href=&quot;http://esub.siggraph.org/cgi-bin/cgi/idEDetail.html&amp;amp;CompanyID=1076&quot;&gt;Booth No. 314&lt;/a&gt; at the exhibition of &lt;a href=&quot;http://www.siggraph.org/s2006/&quot;&gt;SIGGRAPH 2006&lt;/a&gt;, Boston, 1-3rd August.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 3.2.1 released</title>
   <link href="http://www.cgal.org/2006/07/01/cgal-321/"/>
   <updated>2006-07-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2006/07/01/cgal-321</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-3.2.1&quot;&gt;Download CGAL-3.2.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/Manual/3.2.1/doc_html/cgal_manual/packages.html&quot;&gt;CGAL-3.2.1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a bug fix release for &lt;a href=&quot;../../../../2006/05/01/cgal-32&quot;&gt;CGAL 3.2&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;number-types&quot;&gt;Number Types&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Fixed MP_Float constructor which crashed for some values.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;kernel&quot;&gt;Kernel&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Renamed Bool to avoid a clash with a macro in X11 headers.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;arrangement&quot;&gt;Arrangement&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Derived the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_segment_traits_2 Arrangement_2&lt;/code&gt; traits class from
the parameterized Kernel. This allows the use of this traits class
in an extended range of applications that require kernel objects and
operations on these objects beyond the ones required by the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrangement_2&lt;/code&gt; class itself.&lt;/li&gt;
    &lt;li&gt;Fixed a compilation bug in the code that handles overlay of
arrangements instantiated with different DCEL classes.&lt;/li&gt;
    &lt;li&gt;Fixed a couple of bugs in the implementation of the Trapezoidal RIC point-location strategy.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulation-alpha-shapes&quot;&gt;Triangulation, Alpha Shapes&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Qualify calls to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter_iterator&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::&lt;/code&gt; to avoid overload
ambiguities with Boost’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;filter_iterator&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesher&quot;&gt;Surface Mesher&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Fixed a bug in iterators of the class template &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Surface_mesh_complex_2_in_triangulation_3&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;surface-mesh-parametrisation&quot;&gt;Surface Mesh Parametrisation&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Updated the precompiled taucs lib.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;kinetic-data-structures&quot;&gt;Kinetic Data Structures&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Fixed problems caused by old versions of gcc being confused by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator!&lt;/code&gt; and operator &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int()&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Added point removal support to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Active_objects_vector&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 3.2 released</title>
   <link href="http://www.cgal.org/2006/05/01/cgal-32/"/>
   <updated>2006-05-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2006/05/01/cgal-32</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-3.2&quot;&gt;Download CGAL-3.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/Manual/3.2/doc_html/cgal_manual/packages.html&quot;&gt;CGAL-3.2 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 3.2 differs from &lt;a href=&quot;../../../../2004/12/01/cgal-31&quot;&gt;CGAL 3.1&lt;/a&gt; in the platforms that are supported and
in functionality.  There have also been a number of bug fixes for this release.&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;supported-platforms&quot;&gt;Supported platforms&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;For Visual C++, the installation scripts choose the multi-threaded
dynamically linked runtime (/MD). Before it was the single-threaded
static runtime (/ML).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;no-longer-supported&quot;&gt;No longer supported&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;SunPro CC versions 5.4 and 5.5 on Solaris&lt;/li&gt;
    &lt;li&gt;SGI Mips Pro&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The install tool tries to find third party libraries at “standard” locations.&lt;/li&gt;
    &lt;li&gt;Installers for Apple, Windows, and rpms.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;manuals&quot;&gt;Manuals&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;User and Reference manual pages of a package are now in the same chapter.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-circular-kernel-new-package&quot;&gt;2D Circular Kernel (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;This package is an extension of the linear CGAL Kernel. It offers
functionalities on circles, circular arcs and line segments in the
plane.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-regularized-boolean-set-operations-new-package&quot;&gt;2D Regularized Boolean Set-Operations (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;This package consists of the implementation of Boolean
set-operations on point sets bounded by weakly x-monotone curves in
2-dimensional Euclidean space. In particular, it contains the
implementation of regularized Boolean set-operations, intersection
predicates, and point containment predicates.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-straight-skeleton-and-polygon-offsetting-new-package&quot;&gt;2D Straight Skeleton and Polygon Offsetting (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;This package implements an algorithm to construct a halfedge data
structure representing the straight skeleton in the interior of 2D
polygons with holes and an algorithm to construct inward offset
polygons at any offset distance given a straight skeleton.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-voronoi-diagram-adaptor-new-package&quot;&gt;2D Voronoi Diagram Adaptor (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;This package provides an adaptor that adapts a 2-dimensional
triangulated Delaunay graph to the corresponding Voronoi diagram,
represented as a doubly connected edge list (DCEL) data structure.
The adaptor has the ability to automatically eliminate, in a
consistent manner, degenerate features of the Voronoi diagram, that
are artifacts of the requirement that Delaunay graphs should be
triangulated even in degenerate configurations. Depending on the
type of operations that the underlying Delaunay graph supports, the
adaptor allows for the incremental or dynamic construction of
Voronoi diagrams and can support point location queries.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-surface-mesher-new-package&quot;&gt;3D Surface Mesher (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;This package provides functions to generate surface meshes that
interpolate smooth surfaces. The meshing algorithm is based on
Delaunay refinement and provides some guarantees on the resulting
mesh: the user is able to control the size and shape of the mesh
elements and the accuracy of the surface approximation. There is no
restriction on the topology and number of components of input
surfaces. The surface mesher may also be used for non smooth
surfaces but without guarantee.&lt;/li&gt;
    &lt;li&gt;Currently, implementations are provided for implicit surfaces
described as the zero level set of some function and surfaces
described as a gray level set in a three-dimensional image.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-surface-subdivision-methods-new-package&quot;&gt;3D Surface Subdivision Methods (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Subdivision methods recursively refine a control mesh and generate
points approximating the limit surface. This package consists of
four popular subdivision methods and their refinement hosts.
Supported subdivision methods include Catmull-Clark, Loop, Doo-Sabin
and sqrt(3) subdivisions. Their respective refinement hosts are PQQ,
PTQ, DQQ and sqrt(3) refinements. Variations of those methods can be
easily extended by substituting the geometry computation of the
refinement host.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;planar-parameterization-of-triangulated-surface-meshes-new-package&quot;&gt;Planar Parameterization of Triangulated Surface Meshes (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Parameterizing a surface amounts to finding a one-to-one mapping
from a suitable domain to the surface. In this package, we focus on
triangulated surfaces that are homeomorphic to a disk and on
piecewise linear mappings into a planar domain. This package
implements some of the state-of-the-art surface mesh
parameterization methods, such as least squares conformal maps,
discrete conformal map, discrete authalic parameterization, Floater
mean value coordinates or Tutte barycentric mapping.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;principal-component-analysis-new-package&quot;&gt;Principal Component Analysis (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;This package provides functions to compute global informations on
the shape of a set of 2D or 3D objects such as points. It provides
the computation of axis-aligned bounding boxes, centroids of point
sets, barycenters of weighted point sets, as well as linear least
squares fitting for point sets in 2D, and point sets as well as
triangle sets in 3D.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-placement-of-streamlines-new-package&quot;&gt;2D Placement of Streamlines (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Visualizing vector fields is important for many application domains.
A good way to do it is to generate streamlines that describe the
flow behaviour. This package implements the “Farthest Point Seeding”
algorithm for placing streamlines in 2D vector fields. It generates
a list of streamlines corresponding to an input flow using a
specified separating distance. The algorithm uses a Delaunay
triangulation to model objects and adress different queries, and
relies on choosing the centers of the biggest empty circles to start
the integration of the streamlines.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;kinetic-data-structures-new-package&quot;&gt;Kinetic Data Structures (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Kinetic data structures allow combinatorial structures to be
maintained as the primitives move. The package provides
implementations of kinetic data structures for Delaunay
triangulations in two and three dimensions, sorting of points in one
dimension and regular triangulations in three dimensions. The
package supports exact or inexact operations on primitives which
move along polynomial trajectories.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;kinetic-framework-new-package&quot;&gt;Kinetic Framework (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Kinetic data structures allow combinatorial geometric structures to
be maintained as the primitives move. The package provides a
framework to ease implementing and debugging kinetic data
structures. The package supports exact or inexact operations on
primitives which move along polynomial trajectories.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;smallest-enclosing-ellipsoid-new-package&quot;&gt;Smallest Enclosing Ellipsoid (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;This algorithm is new in the chapter Geometric Optimisation.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-arrangement-major-revision&quot;&gt;2D Arrangement (major revision)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;This package can be used to construct, maintain, alter, and display
arrangements in the plane. Once an arrangement is constructed, the
package can be used to obtain results of various queries on the
arrangement, such as point location. The package also includes
generic implementations of two algorithmic frameworks, that are,
computing the zone of an arrangement, and line-sweeping the plane,
the arrangements is embedded on.&lt;/li&gt;
    &lt;li&gt;Arrangements and arrangement components can also be extended to
store additional data. An important extension stores the
construction history of the arrangement, such that it is possible to
obtain the originating curve of an arrangement subcurve.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;geometric-optimisation-major-revision&quot;&gt;Geometric Optimisation (major revision)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The underlying QP solver which is the foundation for several
algorithms in the Geometric Optimisation chapter has been completely
rewritten.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulation-new-functionality&quot;&gt;3D Triangulation (new functionality)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_3&lt;/code&gt; now offers vertex removal.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Project Rules</title>
   <link href="http://www.cgal.org/2005/10/01/project-rules/"/>
   <updated>2005-10-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2005/10/01/project-rules</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;https://cgal.github.io/cgal-web/project_rules.html&quot;&gt;CGAL Open Source Project Rules and Procedures&lt;/a&gt; published to help users and developers to understand the decision processes behind CGAL and how one can get involved.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Call for Papers for special issue of Computational Geometry: Theory and Applications</title>
   <link href="http://www.cgal.org/2005/08/01/call-for-papers/"/>
   <updated>2005-08-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2005/08/01/call-for-papers</id>
   <content type="html">
&lt;p&gt;Call for Papers for the special issue of the journal &lt;a href=&quot;http://www.elsevier.com/locate/comgeo&quot;&gt;Computational Geometry: Theory and Applications&lt;/a&gt; on CGAL.&lt;/p&gt;

&lt;center&gt;
&lt;h1&gt;CALL FOR PAPERS&lt;/h1&gt;

&lt;h2&gt;Special Issue of&lt;br /&gt;
    Computational Geometry: Theory and Applications&lt;br /&gt;
    on&lt;br /&gt;
    CGAL - the Computational Geometry Algorithms Library&lt;/h2&gt;
&lt;/center&gt;

&lt;p&gt;&lt;b&gt;Submission deadline:  March 1, 2006&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The international journal Computational Geometry: Theory and
Applications is planning a special issue on CGAL, the Computational
Geometry Algorithms Library. CGAL is an open source C++ library, see
&lt;a href=&quot;https://www.cgal.org/&quot;&gt;www.cgal.org&lt;/a&gt;. Its goal is to
make the most important methods developed in computational geometry
available to users in industry and academia, by providing easy access
to robust and generic geometric algorithms.&lt;/p&gt;

&lt;h2&gt;Scope&lt;/h2&gt;

&lt;p&gt;We solicit original research papers describing contributions to CGAL, 
or applications critically using CGAL. Topics of interest include 
implementations of known and new algorithms in computational geometry, 
the design of generic software, algorithm engineering aspects, experimental 
verification, and benchmarking.&lt;/p&gt;

&lt;p&gt;Work describing contributions to CGAL should be related to existing
packages, or to new packages submitted to the CGAL editorial board.
Formally, acceptance is independent of the package reviewing process, 
but the opinion of the editorial board will be a factor in the 
decision.&lt;/p&gt;

&lt;p&gt;Work describing applications should clearly state in which way 
the application depends on CGAL, and why the usage of CGAL is
crucial for its functionality.&lt;/p&gt;

&lt;h2&gt;Format&lt;/h2&gt;

&lt;p&gt;We ask for regular papers, not source code, not documentation. It
is expected that the paper provides a link to source code, and there
may be code fragments also in the paper to show how some functionality
is used or realized.  Full versions of previous conference papers are
encouraged.&lt;p&gt;

&lt;h2&gt;Important dates&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Submission Deadline: March 1, 2006&lt;/li&gt;
  &lt;li&gt;Acceptance Decision: July 1, 2006&lt;/li&gt;
  &lt;li&gt;Final version due: November 1, 2006&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All efforts will be made to ensure timeliness of the special issue.
Please submit only if you are able to deliver the final version of
your accepted paper by the indicated date. &lt;/p&gt;

&lt;p&gt;Electronic submission is preferred. Please email a PostScript or PDF
file of your manuscript together with a cover letter to either of the
two guest editors of this special issue:&lt;/p&gt;

&lt;p&gt;&lt;tt&gt;Bernd.Gaertner&lt;/tt&gt;&amp;nbsp;(at)&amp;nbsp;&lt;tt&gt;inf.ethz.ch&lt;/tt&gt; 
&amp;nbsp; &amp;nbsp; &amp;nbsp; or &amp;nbsp; &amp;nbsp; &amp;nbsp;
&lt;tt&gt;Remco.Veltkamp&lt;/tt&gt;&amp;nbsp;(at)&amp;nbsp;&lt;tt&gt;cs.uu.nl&lt;/tt&gt;&lt;/p&gt;

&lt;p&gt;Alternatively, you can send 4 hardcopies to one of the editors:&lt;/p&gt;

&lt;p&gt;Bernd Gärtner&lt;br /&gt;
Institute for Theoretical Computer Science &lt;br /&gt;
ETH Zürich&lt;br /&gt;
CH-8092 Zürich&lt;br /&gt;
Switzerland&lt;/p&gt;

&lt;p&gt;Remco Veltkamp&lt;br /&gt;
Center for Geometry, Imaging, and Virtual Environments&lt;br /&gt;
Institute of Information and Computing Sciences&lt;br /&gt;
Padualaan 14&lt;br /&gt;
3584 CH Utrecht&lt;br /&gt;
The Netherlands&lt;/p&gt;

&lt;p&gt;All submissions will be refereed following the usual high standards of
the journal. Additional information can be obtained by communicating 
with the special issue guest editors.&lt;/p&gt;

&lt;p&gt;Computational Geometry, Theory and Applications is an international
journal in computer science published by Elsevier, see
&lt;a href=&quot;http://www.elsevier.com/locate/comgeo&quot;&gt;
http://www.elsevier.com/locate/comgeo&lt;/a&gt;.&lt;/p&gt;
&lt;/p&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ SIGGRAPH 2005</title>
   <link href="http://www.cgal.org/2005/07/01/siggraph-2005/"/>
   <updated>2005-07-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2005/07/01/siggraph-2005</id>
   <content type="html">
&lt;p&gt;The CGAL project is hosted at &lt;a href=&quot;http://www.siggraph.org/cgi-bin/cgi/idEDetail.html&amp;amp;CompanyID=833&quot;&gt;Inria20s&lt;/a&gt; booth at the exhibition of &lt;a href=&quot;https://www.siggraph.org/soma/dvd-osa/dvd2005/index.html&quot;&gt;SIGGRAPH 2005&lt;/a&gt;. Visit us at Booth No. 1358 from 2-4th August.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 3.1 released</title>
   <link href="http://www.cgal.org/2004/12/01/cgal-31/"/>
   <updated>2004-12-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2004/12/01/cgal-31</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-3.1&quot;&gt;Download CGAL-3.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-book&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://doc.cgal.org/Manual/3.1/doc_html/cgal_manual/packages.html&quot;&gt;CGAL-3.1 documentation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 3.1 differs from &lt;a href=&quot;../../../../2003/11/01/cgal-30&quot;&gt;CGAL 3.0&lt;/a&gt; in the platforms that are supported and
in functionality. There have also been a number of bug fixes for this release.&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;supported-platforms&quot;&gt;Supported platforms&lt;/h3&gt;
  &lt;h4 id=&quot;additional-supported-platforms&quot;&gt;Additional supported platforms:&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;MS Visual C++, version 7.3. and 8.0&lt;/li&gt;
    &lt;li&gt;Intel 8.0&lt;/li&gt;
    &lt;li&gt;SunPro CC versions 5.4 and 5.5 on Solaris&lt;/li&gt;
    &lt;li&gt;GNU g++ versions 3.4 on Linux, Solaris, Irix, cygwin, FreeBSD, and MacOS X&lt;/li&gt;
    &lt;li&gt;Darwin (MacOS X) and IA64/Linux support.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;no-longer-supported&quot;&gt;No longer supported&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;MS Visual C++, version 7.0&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The CORE 1.7 library for exact real arithmetic.&lt;/li&gt;
    &lt;li&gt;Updated GMP to 4.1.3.&lt;/li&gt;
    &lt;li&gt;Added Mpfr a library for multiple-precision floating-point
computations with exact rounding.&lt;/li&gt;
    &lt;li&gt;Added Boost 1.32.0 (only include files).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;new option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--disable-shared&lt;/code&gt; to omit building libCGAL.so.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;manuals&quot;&gt;Manuals&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Merged all major manuals in one multi-part manual, which provides
now cross-links between the CGAL Kernel, the CGAL Basic Library, and
the CGAL Support Library HTML manuals.&lt;/li&gt;
    &lt;li&gt;Improved layout.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;kernels&quot;&gt;Kernels&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Improved efficiency of filtered kernels.&lt;/li&gt;
    &lt;li&gt;More predicates and constructions.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-segment-voronoi-diagram-new-package&quot;&gt;2D Segment Voronoi Diagram (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;A data structure for Voronoi diagrams of segments in the plane under
the Euclidean metric. The Voronoi edges are arcs of straight lines
and parabolas. The algorithm provided in this package is
incremental.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-conforming-triangulations-and-meshes-new-package&quot;&gt;2D Conforming Triangulations and Meshes (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;An implementation of Shewchuk’s algorithm to construct conforming
triangulations and 2D meshes.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-boolean-operations-on-nef-polyhedra-new-package&quot;&gt;3D Boolean Operations on Nef Polyhedra (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;A new class (Nef_polyhedron_3) representing 3D Nef polyhedra, a
boundary representation for cell-complexes bounded by halfspaces
that supports boolean operations and topological operations in full
generality including unbounded cells, mixed dimensional cells (e.g.,
isolated vertices and antennas). Nef polyhedra distinguish between
open and closed sets and can represent non-manifold geometry.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-and-surface-function-interpolation-new-package&quot;&gt;2D and Surface Function Interpolation (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;This package implements different methods for scattered data
interpolation: Given measures of a function on a set of discrete
data points, the task is to interpolate this function on an
arbitrary query point. The package further offers functions for
natural neighbor interpolation.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;planar-nef-polyhedra-embedded-on-the-sphere-new-package&quot;&gt;Planar Nef polyhedra embedded on the sphere (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;A new class (Nef_polyhedron_S2) designed and supported mainly to
represent sphere neighborhoods around vertices of the three-
dimensional Nef polyhedra.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;boxintersectiond-new-package&quot;&gt;Box_intersection_d (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;A new efficient algorithm for finding all intersecting pairs for
large numbers of iso-oriented boxes, i.e., typically these will be
bounding boxes of more complicated geometries. Useful for (self-)
intersection tests of surfaces etc.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-snap-rounding-new-package&quot;&gt;2D Snap Rounding (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Snap Rounding is a well known method for converting
arbitrary-precision arrangements of segments into a fixed-precision
representation. In the study of robust geometric computing, it can
be classified as a finite precision approximation technique.
Iterated Snap Roundingis a modification of Snap Rounding in which
each vertex is at least half-the-width-of-a-pixel away from any
non-incident edge. This package supports both methods.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulation3&quot;&gt;Triangulation_3&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Triangulation_3: added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator==()&lt;/code&gt;, removed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push_back()&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_triangulation()&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Delaunay_3 : added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nearest_vertex()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;move_point()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vertices_in_conflict()&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Regular_3 : added filtered traits class, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nearest_power_vertex()&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;planarmap-and-arrangement2&quot;&gt;Planar_map and Arrangement_2&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The interface of the two traits functions that compute the
intersection of two given curves changed. The functions
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nearest_intersection_to_right()&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nearest_intersection_to_left()&lt;/code&gt; return an object of type
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Object&lt;/code&gt; that represents either an empty intersection, a
point, or an overlapping subcurve.&lt;/li&gt;
    &lt;li&gt;Requirements to define two binary tags were added to the traits
concept of the Planar_map as follows:
    - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Has_left_category*&lt;/code&gt; - indicates whether the functions
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curves_compare_y_at_x_left()&lt;/code&gt; and nearest_intersection_to_left() are implemented in the traits model.
    - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Has_reflect_category&lt;/code&gt; - indicates whether the functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;point_reflect_in_x_and_y()&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curve_reflect_in_x_and_y()&lt;/code&gt; are implemented in the traits model.
They can be used as an alternative to the two function in the previous item.&lt;/li&gt;
    &lt;li&gt;A new constructor of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Segment_cached_2&lt;/code&gt; type that represents
a segment in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_segment_cached_traits_2&lt;/code&gt; traits class
was introduced. The new constructor accepts the segment
endpoints as well as the coefficients of the underlying line.&lt;/li&gt;
    &lt;li&gt;A new version of the conic-arc traits, based on CORE version 1.7
was introduced. This new traits class makes use of CORE’s
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rootOf()&lt;/code&gt; operator to compute the intersection points in the
arrangement, making its code much simpler and more elegant than
the previous version. In addition, new constructors for conic
arcs are provided. The new traits class usually performs about
30% faster than the version included in CGAL 3.0&lt;/li&gt;
    &lt;li&gt;The traits class that handles continuous piecewise linear
curves, namely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polyline_traits_2&lt;/code&gt;, was rewritten. The new
class is parametrized with a traits class that handles segments,
say Segment_traits. The polyline curve defined within the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polyline_traits_2&lt;/code&gt; class is implemented as a vector of
segments of type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Segment_traits::Curve_2&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;A meta traits class, namely &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_curve_data_traits_2&lt;/code&gt;, that
extends the curve type of the planar-map with arbitrary
additional data was introduced. It should be instantiated with a
regular traits-class and a class that contains all extraneous
data associated with a curve.&lt;/li&gt;
    &lt;li&gt;The class that represents the trapezoidal-decomposition point
location strategy was renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pm_trapezoid_ric_point_location&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;The Arrangement demo was rewritten. It covers many more
features, has a much better graphical user interface, and comes
with online documentation.&lt;/li&gt;
    &lt;li&gt;Few bugs in the sweep-line module related to overlapping
vertical segments were fixed. This module is used by the
aggregate insert method that inserts a collection of curves at
once.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;triangulation2&quot;&gt;Triangulation_2&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added a filtered trait class in the regular triangulation.&lt;/li&gt;
    &lt;li&gt;Added split and join operations in the triangulation data structure class.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;alphashapes3&quot;&gt;Alpha_shapes_3&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;major changes in the implementation of the class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alpha_shapes_3&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;New implementation results in a true “GENERAL” mode allowing null
and negative alpha-values. It also fixed the edges
classification bug and introduces a classification of vertices.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;minellipse2&quot;&gt;Min_ellipse_2&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;made access to approximate double representation public&lt;/li&gt;
    &lt;li&gt;fixed bugs in conversion to double representation&lt;/li&gt;
    &lt;li&gt;added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_circle()&lt;/code&gt; method&lt;/li&gt;
    &lt;li&gt;minor performance improvements&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;minsphereofspheresd&quot;&gt;Min_sphere_of_spheres_d:&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The models
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Min_sphere_of_spheres_d_traits_2&amp;lt;K,FT,UseSqrt,Algorithm&amp;gt;&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Min_sphere_of_spheres_d_traits_3&amp;lt;K,FT,UseSqrt,Algorithm&amp;gt;&lt;/code&gt;, and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Min_sphere_of_spheres_d_traits_d&amp;lt;K,FT,Dim,UseSqrt,Algorithm&amp;gt;&lt;/code&gt;
of concept &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MinSphereOfSpheresTraits&lt;/code&gt; now represent a sphere as
a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::pair&amp;lt;Point,Radius&amp;gt;&lt;/code&gt; (and not any more as a
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Weighted_point&amp;lt;Point,Weight&amp;gt;&lt;/code&gt;)&lt;/li&gt;
    &lt;li&gt;Internal code cleanup; in particular, implementation details
don’t pollute the namespace CGAL anymore&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polyhedron3&quot;&gt;Polyhedron_3&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;New Tutorial on CGAL Polyhedron for Subdivision Algorithms with
interactive demo viewer in source code available.&lt;/li&gt;
    &lt;li&gt;Added example program for efficient self-intersection test. -
Added small helper functions, such as vertex_degree,
facet_degree, edge_flip, and is_closed.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;apollonius-graph-voronoi-of-circles&quot;&gt;Apollonius Graph (Voronoi of Circles)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Reduced memory requirements by approximately a factor of two.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ MICAD</title>
   <link href="http://www.cgal.org/2004/03/01/cgalmicad/"/>
   <updated>2004-03-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2004/03/01/cgalmicad</id>
   <content type="html">
&lt;p&gt;CGAL is presented at the Inria booth at the annual &lt;a href=&quot;http://www.birp.com/micad/&quot;&gt;MICAD&lt;/a&gt; CAD/CAM design conference in Paris, France, 30-31 March, 1 April.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 3.0.1 released</title>
   <link href="http://www.cgal.org/2004/02/01/cgal-301/"/>
   <updated>2004-02-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2004/02/01/cgal-301</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-3.0.1&quot;&gt;Download CGAL-3.0.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is a bug-fix release. No new features have been added in 3.0.1. Here is the list of bug-fixes:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;polyhedral-surface&quot;&gt;Polyhedral Surface&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed wrong include files for output support. Added example.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;planarmap&quot;&gt;Planar_map&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed the so called “Walk-along-a-line” point-location strategy to
correctly handle a degenerate case.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulation&quot;&gt;2D Triangulation&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;added missing figure in html doc.&lt;/li&gt;
    &lt;li&gt;in Line_face_circulator_2.h:
Fixed changes made to support handles with a typedef to iterator.
The fix concerns operator== and !=.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;alphashapes3&quot;&gt;Alpha_shapes_3&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Fixed classify member function for edges.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;number-types&quot;&gt;Number types&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;Lazy_exact_nt:
      &lt;ul&gt;
        &lt;li&gt;added the possibility to select the relative precision of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;to_double()&lt;/code&gt; (by default 1e-5). This should fix reports that
some circumcenters computations have poor coordinates, e.g.
nan).&lt;/li&gt;
        &lt;li&gt;when exact computation is triggered, the interval is recomputed,
this should speed up some kinds of computations.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;to_interval(Quotient&amp;lt;MP_Float&amp;gt;)&lt;/code&gt;: avoid spurious overflows.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;kernel&quot;&gt;Kernel&lt;/h3&gt;

  &lt;ul&gt;
    &lt;li&gt;missing acknowledgment in the manual and minor clarification of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;intersection()&lt;/code&gt; documentation.&lt;/li&gt;
  &lt;/ul&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>2nd CGAL User Workshop</title>
   <link href="http://www.cgal.org/2004/02/01/2nd-cgal-user-workshop/"/>
   <updated>2004-02-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2004/02/01/2nd-cgal-user-workshop</id>
   <content type="html">
&lt;p&gt;The second &lt;a href=&quot;https://cgal.github.io/cgal-web/Events/UserWorkshop/2004/index.html&quot;&gt;CGAL User Workshop&lt;/a&gt; will be held on 12 June 2004, immediately after the &lt;a href=&quot;http://socg.poly.edu/home.htm&quot;&gt; 20th Annual ACM Symposium on Computational Geometry&lt;/a&gt; in New York, USA.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 3.0 released</title>
   <link href="http://www.cgal.org/2003/11/01/cgal-30/"/>
   <updated>2003-11-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2003/11/01/cgal-30</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-3.0&quot;&gt;Download CGAL-3.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 3.0 differs from &lt;a href=&quot;../../../../2002/05/01/cgal-24&quot;&gt;CGAL 2.4&lt;/a&gt; in the platforms that are supported and
in functionality. There have also been a number of bug fixes for this release.&lt;/p&gt;

&lt;p&gt;The license has been changed to either the LGPL (GNU Lesser General Public
License v2.1) or the QPL (Q Public License v1.0) depending on each package.
So CGAL remains free of use for you, if your usage meets the criteria of these
licenses, otherwise, a commercial license has to be purchased from
GeometryFactory.&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;supported-platforms&quot;&gt;Supported platforms&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;MS Visual C++, version 7.1.&lt;/li&gt;
    &lt;li&gt;SunPro CC versions 5.4 and 5.5 on Solaris&lt;/li&gt;
    &lt;li&gt;GNU g++ versions 3.2 and 3.3 on Linux, Solaris, Irix, cygwin, and FreeBSD.&lt;/li&gt;
    &lt;li&gt;MipsPRO CC 7.30 and 7.40 with both the n32 and n64 ABIs.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;the-following-platforms-are-no-longer-supported&quot;&gt;The following platforms are no longer supported:&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;MS Visual C++, version 6.&lt;/li&gt;
    &lt;li&gt;GNU g++ 2.95.2 (2.95.3 is still supported)&lt;/li&gt;
    &lt;li&gt;Kai C++ and Borland C++, all versions&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The CORE library for exact computations is now distributed as part of CGAL as well.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Largest_empty_rectangle_2&lt;/code&gt;: Given a set of points P in the plane, the class
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Largest_empty_iso_rectangle_2&lt;/code&gt; is a data structure that
maintains an iso-rectangle with the largest area among all
iso-rectangles that are inside a given iso-rectangle bounding box,
and that do not contain any point of the point set P.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;kernels&quot;&gt;Kernels&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;3 typedefs have been added to ease the choice of a robust and fast kernel:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exact_predicates_inexact_constructions_kernel&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exact_predicates_exact_constructions_kernel&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Exact_predicates_exact_constructions_kernel_with_sqrt&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Progress has been made towards the complete adaptability and extensibility of our kernels.&lt;/li&gt;
    &lt;li&gt;New faster &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangle_3&lt;/code&gt; intersection test routines. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;(see Erratum at the bottom)&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Added a Kernel concept archetype to check that generic algorithms
  don’t use more functionality than they should.&lt;/li&gt;
    &lt;li&gt;A few more miscellaneous functions.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;interval-skip-list-new-package&quot;&gt;Interval Skip List (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;An interval skip list is a data strucure for finding all intervals
that contain a point, and for stabbing queries, that is for answering
the question whether a given point is contained in an interval or not.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-apollonius-graph-new-package&quot;&gt;2D Apollonius Graph (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Algorithms for computing the Apollonius graph in two dimensions.
The Apollonius graph is the dual of the Apollonius diagram, also known as the additively weighted Voronoi
diagram.  The latter can be thought of as the Voronoi diagram of a set
of circles under the Euclidean metric, and it is a generalization of the
standard Voronoi diagram for points.  The algorithms provided are
dynamic.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;dd-min-sphere-of-spheres-new-package&quot;&gt;dD Min Sphere of Spheres (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Algorithms to compute the smallest
enclosing sphere of a given set of spheres in R&lt;sup&gt;d&lt;/sup&gt;.
The package provides
an algorithm with maximal expected running time
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;O(2&amp;lt;sup&amp;gt;O(d)&amp;lt;/sup&amp;gt; n)&lt;/code&gt; and a
fast and robust heuristic (for dimension less than 30).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;spatial-searching-new-package&quot;&gt;Spatial Searching (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Provides exact and approximate distance browsing in a set of points in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt;-dimensional
space using implementations of algorithms supporting:
      &lt;ul&gt;
        &lt;li&gt;both nearest and furthest neighbor searching&lt;/li&gt;
        &lt;li&gt;both exact and approximate searching&lt;/li&gt;
        &lt;li&gt;(approximate) range searching&lt;/li&gt;
        &lt;li&gt;(approximate) &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt;-nearest and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt;-furthest neighbor searching&lt;/li&gt;
        &lt;li&gt;(approximate) incremental nearest and incremental furthest neighbor searching&lt;/li&gt;
        &lt;li&gt;query items representing points and spatial objects.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;kd-tree&quot;&gt;Kd-tree&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;This package is deprecated, its documentation is removed. It is replaced by the Spatial Searching package.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulation-and-3d-triangulation&quot;&gt;2D Triangulation and 3D Triangulation&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The classes Triangulation_data_structure_2 (and 3), which implements
the data structure for 2D triangulation class, now makes use of
CGAL::Compact_container (see Support Library section below).&lt;/li&gt;
    &lt;li&gt;The triangulation classes use a Rebind mecanism to provide
the full flexibility on Vertex and Face base classes.
This means that it is possible for the user to derive its own Face
of Vertex base class, adding a functionality that makes use of
types defined by the triangulation data structure like Face_handle
or Vertex_handle.&lt;/li&gt;
    &lt;li&gt;New classes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_vertex_base_with_info_2&lt;/code&gt; (and 3) and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_face_base_with_info_2&lt;/code&gt; (and 3) to make easier the
customisation of base classes in most cases.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulation&quot;&gt;2D Triangulation&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Regular triangulation provides an easy access to hidden points.&lt;/li&gt;
    &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_hierarchy_2&lt;/code&gt;, which provides an efficient location
data structure, can now be used with any 2D triangulation class plugged
in (including regular triangulations).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulation-1&quot;&gt;3D Triangulation&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Faster vertex removal function in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delaunay_triangulation_3&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Delaunay_triangulation_3&lt;/code&gt; is now independent of the order of insertions
 of the points (in case of degenerate cosphericity).&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Regular_triangulation_3&lt;/code&gt; now hides vertices (and updates itself) when
inserting a coinciding point with greater weight.  This required a new
predicate.&lt;/li&gt;
    &lt;li&gt;Deprecated functions: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;copy_triangulation()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;push_back()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set_number_of_vertices()&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_3&lt;/code&gt; now gives non-const access to its data structure.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;planar-maps-and-arrangements&quot;&gt;Planar Maps and Arrangements&lt;/h3&gt;
  &lt;p&gt;The changes concern mainly the traits classes.&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;New traits hierarchy and interface:
The set of requirements was made sound and complete. A couple of
requirements were eliminated, few others were redefined, and some
were renamed. A hierarchy of three traits classes for the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Planar_map_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Planar_map_with_intersections_2&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrangement_2&lt;/code&gt;
types was established to include only the necessary requirements at
each level. It was determined that for the aggregate insertion-
operation based on a sweep-line algorithm only a subset of the
requirements is needed. Preconditions were added where appropriate
to tighten the requirements further.&lt;/li&gt;
    &lt;li&gt;The following functions have been renamed:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;point_is_same()&lt;/code&gt; renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;point_equal()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curve_is_same()&lt;/code&gt; renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curve_equal()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curve_is_in_x_range()&lt;/code&gt; renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;point_in_x_range()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curve_compare_at_x()&lt;/code&gt; renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curves_compare_y_at_x()&lt;/code&gt;.
Furthermore, a precondition has been added that the reference
point is in the x-range of both curves.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curve_compare_at_x_right()&lt;/code&gt; renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curves_compare_y_at_x_to_right()&lt;/code&gt;.
Furthermore, a precondition has been added that both curves are
equal at the reference point and defined to its right.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curve_compare_at_x_left()&lt;/code&gt; renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curves_compare_y_at_x_to_left()&lt;/code&gt;.
Furthermore, a precondition has been added that both curves are
equal at the reference point and defined to its right.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curve_get_point_status()&lt;/code&gt; renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curve_compare_y_at_x()&lt;/code&gt;.
Furthermore, a precondition has been added that the point is in
the x-range of the curve. Consequently, the function now returns a
Comparison_result (instead of a special enum).&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make_x_monotone()&lt;/code&gt; renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curve_make_x_monotone()&lt;/code&gt;. See more details below.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curve_flip()&lt;/code&gt; renamed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curve_opposite()&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;The following functions have been removed:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curve_is_between_cw()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;point_to_left()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;point_to_right()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_x_monotone()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;point_reflect_in_x_and_y()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curve_reflect_in_x_and_y()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_intersect_to_right()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;do_intersect_to_left()&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Most functions, are required by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PlanarMapTraits_2&lt;/code&gt; concept,
except for the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;make_x_monotone()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nearest_intersection_to_right()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nearest_intersection_to_left()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curves_overlap()&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curve_opposite()&lt;/code&gt;. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PlanarMapWithIntersectionsTraits_2&lt;/code&gt; requires all
these functions, except &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curve_opposite()&lt;/code&gt;, needed only by the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ArrangementTraits_2&lt;/code&gt; concept.
Furthermore, the two functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curve_compare_at_x_left()&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nearest_intersection_to_left()&lt;/code&gt; can be omitted, if the two functions
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;point_reflect_in_x()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curve_reflect_in_x()&lt;/code&gt; are implemented.
Reflection can be avoided, if the two _left functions are supplied.&lt;/li&gt;
    &lt;li&gt;The type X_curve_2 of the PlanarMapWithIntersectionsTraits_2
concept was renamed to X_monotone_curve_2, and the distinction
between this type and the Curve_2 type was made firm. The method
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;is_x_monotone()&lt;/code&gt; of the PlanarMapWithIntersectionsTraits_2 concept
was removed. The related method &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curve_make_x_monotone()&lt;/code&gt; is now
called for each input curve of type Curve_2 when curves are inserted
into a Planar_map_with_intersections_2 to subdivide the input curve
into x-monotone sub-curves (and in case the curve is already
x-monotone, this function is responsible for casting it to an
x-monotone curve).&lt;/li&gt;
    &lt;li&gt;New and improved traits classes:
      &lt;ul&gt;
        &lt;li&gt;Conic traits - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_conic_traits_2&lt;/code&gt;
Support finite segments of ellipses, hyperbolas and parabolas, as
well as line segments. The traits require an exact real number-
type, such as leda_real or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CORE::Expr&lt;/code&gt;.&lt;/li&gt;
        &lt;li&gt;Segment cached traits - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_segment_cached_traits_2&lt;/code&gt;
This class uses an improved representation for segments that helps
avoiding cascaded computations, thus achieving faster running
times. To work properly, an exact rational number-type should be
used.&lt;/li&gt;
        &lt;li&gt;Polyline traits - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_polyline_traits_2&lt;/code&gt;
The polyline traits class has been reimplemented to work in a more
efficient, generic manner. The new class replaces the obsolete
Arr_polyline_traits class. It is parameterized with a segment
traits class.&lt;/li&gt;
        &lt;li&gt;Hyperbola and segment traits - &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_hyper_segment_traits_2&lt;/code&gt;
Supports line segments and segments of canonical hyperbolas.
This is the type of curves that arise when projecting segments
in three-space rotationally around a line onto a plane containing
the line. Such projections are often useful in CAD/CAM problems.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Removed old traits class:
      &lt;ul&gt;
        &lt;li&gt;The models of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PlanarMapWithIntersectionsTraits_2&lt;/code&gt; concept
below became obsolete, as the new conic traits, namely
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_conic_traits_2&lt;/code&gt;, supports the same functionality and is much
more efficient.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_circles_real_traits&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_segment_circle_traits&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;The segment traits class and the new polyline traits class were
reimplemented using standard CGAL-kernel calls. This essentially
eliminated the corresponding leda traits classes, namely:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pm_leda_segment_traits_2&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_leda_segment_traits_2&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_leda_polyline_traits&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;With the use of the Leda_rat_kernel new external package the same
functionality can be achieved with less overhead and more
efficiency.&lt;/li&gt;
    &lt;li&gt;New interface functions to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Planar_map_with_intersections_2&lt;/code&gt; class.
The Planar_map_with_intersections_2 class maintains a planar map of
input curves that possibly intersect each other and are not necessarily
x-monotone. If an input curve, or a set of input curves, are known to
be x-monotone and pairwise disjoint, the new functions below can be
used to insert them into the map efficiently.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-sweep-line&quot;&gt;2D Sweep Line&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sweep_line_2&lt;/code&gt; package was reimplemented. As a consequence it is much
more efficient, its traits is tighter (namely neither the two _left nor
the reflection functions are required), and its interface has changed a bit.&lt;/li&gt;
    &lt;li&gt;The following global functions have been removed:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sweep_to_produce_subcurves_2()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sweep_to_produce_points_2()&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sweep_to_construct_planar_map_2()&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Instead, the public methods of the Sweep_line_2 class listed below were introduced:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_subcurves()&lt;/code&gt; - Given a container of curves, this function
 returns a list of curves that are created by intersecting the
 input curves.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_intersection_points()&lt;/code&gt; - Given a range of curves, this function
 returns a list of points that are the intersection points of the
 curves.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get_intersecting_curves()&lt;/code&gt; - Given a range of curves, this function
 returns an iterator to the beginning of a range that contains the
 list of curves for each intersection point between any two curves
 in the specified range.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;It is possible to construct a planar map with intersections (or an
arrangement) by inserting a range of curves into an empty map. This
will invoke the sweep-line process to construct the map more
efficiently.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polyhedral-surface&quot;&gt;Polyhedral Surface&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The old design that was deprecated since CGAL 2.3 has been removed.&lt;/li&gt;
    &lt;li&gt;Class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polyhedron_incremental_builder_3&lt;/code&gt;:&lt;/li&gt;
    &lt;li&gt;Renamed local enum &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABSOLUTE&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ABSOLUTE_INDEXING&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RELATIVE&lt;/code&gt; to
  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RELATIVE_INDEXING&lt;/code&gt; to avoid conflicts with similarly named macros of another library.&lt;/li&gt;
    &lt;li&gt;Changed member functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_vertex()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;begin_facet()&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;end_facet()&lt;/code&gt; to return
  useful handles.&lt;/li&gt;
    &lt;li&gt;Added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;test_facet()&lt;/code&gt; to check facets for validity before adding them.&lt;/li&gt;
    &lt;li&gt;Added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vertex( size_t i)&lt;/code&gt; to return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vertex_handle&lt;/code&gt; for index &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt;.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;halfedge-data-structure&quot;&gt;Halfedge Data Structure&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The old design that was deprecated since CGAL 2.3 has been removed.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;support-library&quot;&gt;Support Library&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;New container class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Compact_container&lt;/code&gt;, which (roughly) provides the
flexibility of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::list&lt;/code&gt;, with the memory compactness of std::vector.&lt;/li&gt;
    &lt;li&gt;Geomview_stream: added a function
  gv.draw_triangles(InputIterator begin, InputIterator end)
  which draws a set of triangles much more quickly than one by one.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;number-types&quot;&gt;Number types:&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;number types are now required to provide a function:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;std::pair&amp;lt;double, double&amp;gt;  to_interval(const NT&amp;amp;)&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;number types are now required to provide mixed operators with “int”.&lt;/li&gt;
    &lt;li&gt;CLN support removed.&lt;/li&gt;
    &lt;li&gt;faster &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;square()&lt;/code&gt; for MP_Float.&lt;/li&gt;
    &lt;li&gt;added Gmp_q.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;qtwidget&quot;&gt;Qt_widget:&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;New classes:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qt_help_window&lt;/code&gt;: provides a simple way to show some helpful
information about a demo as an HTML page.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qt_widget_history&lt;/code&gt;: provides basic functionality to manipulate
intervals of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qt_widget&lt;/code&gt; class. The current visible area of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qt_widget&lt;/code&gt;
is mapped to an interval. Each interval could be stored in the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qt_widget_history&lt;/code&gt; object. So you can use this object to navigate in
history.  It is mostly used by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qt_widget_standard_toolbar&lt;/code&gt;.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Changes:
      &lt;ul&gt;
        &lt;li&gt;Qt_widget_standard_toolbar: is derived from QToolBar class, so pay
attention to modify your code, if you used this class. Some public
methods were introduced to control the history object that the
toolbar use to navigate.&lt;/li&gt;
        &lt;li&gt;The icons are now part of libCGALQt.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Deprecated members of Qt_widget:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add_to_history()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clear_history()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;back()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forth()&lt;/code&gt;: use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;forward()&lt;/code&gt;,
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;back()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clear_history()&lt;/code&gt; of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Qt_widget_standard_toolbar&lt;/code&gt; instead.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;custom_redraw()&lt;/code&gt;: use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redraw_on_back()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;redraw_on_front()&lt;/code&gt; instead.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Optimizations:
      &lt;ul&gt;
        &lt;li&gt;The output operators of the following classes have been optimized:&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Segment_2&lt;/code&gt; (now tests for intersection with the drawing area)&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangle_2&lt;/code&gt; (now tests for intersection with the drawing area)&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Triangulation_2&lt;/code&gt; (is optimized for faster display on zooming)&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;erratum-in-the-kernel-manual&quot;&gt;Erratum in the Kernel manual&lt;/h3&gt;

  &lt;h4 id=&quot;intersection-test-routines&quot;&gt;Intersection test routines&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;The documentation of CGAL::do_intersect should mention, for the 3D case:
also, in three-dimensional space &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type1&lt;/code&gt; can be either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plane_3&amp;lt;Kernel&amp;gt;&lt;/code&gt;
  or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangle_3&amp;lt;Kernel&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type2&lt;/code&gt; any of:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Plane_3&amp;lt;Kernel&amp;gt;&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Line_3&amp;lt;Kernel&amp;gt;&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ray_3&amp;lt;Kernel&amp;gt;&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Segment_3&amp;lt;Kernel&amp;gt;&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangle_3&amp;lt;Kernel&amp;gt;&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;In the same way, for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel::DoIntersect_3&lt;/code&gt;: for all pairs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type2&lt;/code&gt;, where the type &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type1&lt;/code&gt; is either &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel::Plane_3&lt;/code&gt;
or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel::Triangle_3&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Type2&lt;/code&gt; can be any of the following:
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel::Plane_3&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel::Line_3&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel::Ray_3&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel::Segment_3&lt;/code&gt;&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel::Triangle_3&lt;/code&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;Philippe Guigue (I&lt;small&gt;NRIA&lt;/small&gt; Sophia-Antipolis) should be mentioned as one of the authors.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>GeometryFactory Incorporated</title>
   <link href="http://www.cgal.org/2003/01/01/geometryfactory-incorporated/"/>
   <updated>2003-01-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2003/01/01/geometryfactory-incorporated</id>
   <content type="html">
&lt;p&gt;&lt;a href=&quot;http://www.geometryfactory.com&quot;&gt;GeometryFactory&lt;/a&gt; got incorporated as spin-off of the CGAL project. GeometryFactory offers individual CGAL data structures and algorithms under commercial licenses for industrial research and for product development.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 2.4 released</title>
   <link href="http://www.cgal.org/2002/05/01/cgal-24/"/>
   <updated>2002-05-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2002/05/01/cgal-24</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-2.4&quot;&gt;Download CGAL-2.4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 2.4 differs from &lt;a href=&quot;../../../../2001/10/01/cgal-23&quot;&gt;CGAL 2.3&lt;/a&gt; in the platforms that are supported and
in functionality.  There have also been a number of bug fixes for this release.&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;supported-platforms&quot;&gt;Supported platforms&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Microsoft Visual C++, version 7.&lt;/li&gt;
    &lt;li&gt;SunPro 5.3 (with patch 111685-05) on Solaris&lt;/li&gt;
    &lt;li&gt;g++ 3.1 on Linux and Solaris&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Bugs in the following packages have been fixed: 3D Convex hull, 2D Polygon partition, simple polygon generator.&lt;/li&gt;
    &lt;li&gt;Tttempts have been made to assure compatability with the upcoming LEDA release that introduces
the leda namespace.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;kernels&quot;&gt;Kernels&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Point_d&lt;/code&gt; has been removed from the 2D and 3D kernels. This type is
now available from the d-dimensional kernel only.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-polygon-partitioning&quot;&gt;2D Polygon Partitioning&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Traits requirements for optimal partitioning have been changed slightly.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-sweep-line-new-package&quot;&gt;2D Sweep line (new package)&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;A new package that implements a sweep-line algorithm to compute
arrangements of curves for different families of curves, which are
not necessarily line segments  (e.g., it also works for circular arcs).
The resulting output can be the list of vertex points, the resulting
subcurves or a planar map.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;planar-maps-and-arrangements&quot;&gt;Planar Maps and Arrangements&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;New quicker insertion functions of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Planar_map_2&lt;/code&gt; for cases where more
precomputed information is available regarding the position of
the inserted curve in the map.&lt;/li&gt;
    &lt;li&gt;New query function for planar maps that determines whether a given
point is within a given face of the planar map.&lt;/li&gt;
    &lt;li&gt;New iterator over edges of planar maps in addition to the existing
iterator over halfedges.&lt;/li&gt;
    &lt;li&gt;New copy constructor and assignment operator for arrangements.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polyhedral-surface&quot;&gt;Polyhedral Surface&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;new design introduced with release 2.3 now supported by VC7 compiler.&lt;/li&gt;
    &lt;li&gt;Extended functionality of Polyhedron_incremental_builder:
absolute indexing allows one to add new surfaces to existing ones.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulation&quot;&gt;2D Triangulation&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;There is a new triangulation data structure replacing the two
previous ones. This new data structure is coherent with the 3d
triangulation data structure and offer the advantages of both
previous ones. Backward compatibility is ensured and this change
is transparent for the user of triangulation classes.&lt;/li&gt;
    &lt;li&gt;Constrained and Delaunay constrained triangulations are now able
to handle intersecting input constraints.
The behavior of constrained triangulations with repect to
intersection of input constraints can be customized using
an intersection tag.&lt;/li&gt;
    &lt;li&gt;A new class Constrained_triangulation_plus offers a constrained
hierarchy on top of a constrained triangulations. This additionnal
data structure describes the subdivision of the original constraints
into edges of the triangulations.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulation-1&quot;&gt;3D Triangulation&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Running time improved by a better and more compact management of memory allocation.&lt;/li&gt;
    &lt;li&gt;Various improvements and small functionalities added:
    - Triangulation_3&amp;lt;GT,Tds&amp;gt;::triangle() returns a triangle oriented
 towards the outside of the cell c for facet (c,i)
    - New function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert(Point, Locate_type, Cell_handle, int, int)&lt;/code&gt; which avoids the location step.
    - New function to get access to cells in conflict in a Delaunay insertion: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;find_conflicts()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert_in_hole()&lt;/code&gt;.
    - New function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TDS::delete_cells(begin, end)&lt;/code&gt;.
    - New functions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;degree(v)&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;reorient()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove_decrease_dimension()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;remove_from_simplex()&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;Changes of interface:
    -  Vertices and cells are the same for the triangulation data structure and the geometric triangulation.
    -  The triangulation data structure uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vertex_handle&lt;/code&gt; (resp &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cell_handle&lt;/code&gt;) instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vertex*&lt;/code&gt; (resp &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cell*&lt;/code&gt;).
    -  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;incident_cells()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;incident_vertices()&lt;/code&gt; are templated by output iterators.
    -  changes in the iterators and circulators interface:
      &lt;ul&gt;
        &lt;li&gt;Iterators and circulators are convertible to handles
automatically, no need to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&amp;gt;handle()&lt;/code&gt; anymore.&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Vertex_iterator&lt;/code&gt; split into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;All_vertices_iterator&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Finite_vertices_iterator&lt;/code&gt;
(and similar for cells…).&lt;/li&gt;
        &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TDS::Edge/Facet&lt;/code&gt; iterators now support &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;operator-&amp;gt;&lt;/code&gt;.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-search-structures&quot;&gt;2D Search structures&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Additional range search operations taking a predicate functor have been added.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;planar-maps-and-arrangements-1&quot;&gt;Planar Maps and Arrangements&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Planar maps of infinite curves (the so-called planar map bounding-box).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;support-library&quot;&gt;Support Library&lt;/h3&gt;

  &lt;h4 id=&quot;qtwidget&quot;&gt;Qt_widget&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;We have added a new class for visualization of 2D CGAL objects.
It is derived from Trolltech’s Qt class QWidget and privdes a
used to scale and pan.&lt;/li&gt;
    &lt;li&gt;Some demos were developed for the following packages: 2D Alpha shapes,
2D Convex Hull, Largest empty 2D rectangle, Maximum k-gon,
Minimum ellipse,  Minimum 2D quadrilateral, 2D polygon partitioning
2D regular and constrained triangulation.&lt;/li&gt;
    &lt;li&gt;Tutorials are available to help users get used to Qt_widget&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;timer&quot;&gt;Timer&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;Fixed Timer class (for user process time) to have no wrap-around
anymore on Posix-compliant systems.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;known-problems&quot;&gt;Known problems&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;2D Nef Polyhedra contains a memory leak.  Memory problems are also
the likely cause of occasional run-time errors on some platforms.&lt;/li&gt;
    &lt;li&gt;The d-dimensional convex hull computation produces run-time errors on
some platforms because of memory management bugs.&lt;/li&gt;
    &lt;li&gt;The new Halfedge Data Structure design introduced with release 2.3
does not work on VC6.  See the release notes in the manual for more
information.&lt;/li&gt;
    &lt;li&gt;The following deficiencies relate to planar maps, planar maps of
intersecting curves (pmwx), arrangements and sweep line.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;plateform-specific-issues&quot;&gt;Plateform specific issues&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;On KCC, Borland and SunPro we guarantee neither compilation nor
correct execution for all of the packages above.&lt;/li&gt;
    &lt;li&gt;On VC6 and VC7 we guarantee neither compilation nor correct
execution of the sweep line package.&lt;/li&gt;
    &lt;li&gt;On CC (on Irix 6.5) the trapezoidal decomposition point location
strategy is problematic when used with planar maps, pmwx, or
arrangements (mind that this is the default for planar maps).&lt;/li&gt;
    &lt;li&gt;On CC (on Irix 6.5) sweep line with polyline traits does not compile
(mind that the so-called leda polyline traits does compile).&lt;/li&gt;
    &lt;li&gt;On g++ (on Irix 6.5) the segment-circle (Arr_segment_circle_traits_2)
traits does not compile for either of the above packages.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>1st CGAL User Workshop</title>
   <link href="http://www.cgal.org/2002/03/01/1st-cgal-user-workshop/"/>
   <updated>2002-03-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2002/03/01/1st-cgal-user-workshop</id>
   <content type="html">
&lt;p&gt;The program for the &lt;a href=&quot;https://cgal.github.io/cgal-web/Events/UserWorkshop/2002/index.html&quot;&gt;1st CGAL User Workshop&lt;/a&gt; is now available.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 2.3 released</title>
   <link href="http://www.cgal.org/2001/10/01/cgal-23/"/>
   <updated>2001-10-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2001/10/01/cgal-23</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-2.3&quot;&gt;Download CGAL-2.3&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 2.3 differs from &lt;a href=&quot;../../../../2000/10/01/cgal-22&quot;&gt;CGAL 2.2&lt;/a&gt; in the platforms
that are supported and in functionality:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;supported-platforms&quot;&gt;Supported platforms&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;GNU g++ 3.0 on Solaris and Linux&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;kernel&quot;&gt;Kernel&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The 2D and 3D kernels now serve as models of the new kernel concept
described in the recent paper, &lt;i&gt;An Adaptable and Extensible Geometry
Kernel&lt;/i&gt; by Susan Hert, Micheal Hoffmann, Lutz Kettner, Sylvain Pion,
and Michael Seel to be presented at WAE 2001 (and soon available as a technical report).
This new kernel is completely compatible with the previous design but is more flexible
in that it allows geometric predicates as well as objects to be easily
exchanged and adapted individually to users’ needs.&lt;/li&gt;
    &lt;li&gt;A new kernel called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Simple_homogeneous&lt;/code&gt; is available. It is
equivalent to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Homogeneous&lt;/code&gt; but without reference-counted objects.&lt;/li&gt;
    &lt;li&gt;A new kernel called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filtered_kernel&lt;/code&gt; is available that allows
one to build kernel traits classes that use exact and efficient predicates.&lt;/li&gt;
    &lt;li&gt;A new d-dimensional kernel, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Kernel_d&lt;/code&gt; is available. It provides
diverse kernel objects, predicates and constructions in d dimensions with
two representations based on the kernel families &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cartesean_d&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Homogeneous_d&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;There are two classes, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cartesian_converter&lt;/code&gt; and
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Homogeneous_converter&lt;/code&gt; that allows one to convert objects between different Cartesian and
homogeneous kernels, respectively.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;basic-library&quot;&gt;Basic Library&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Almost all packages in the basic library have been adapted to the
new kernel design to realize the flexibility this design makes possible.
In several packages, this means that the traits class requirements have
changed to conform to the function objects offered in the kernels so the
kernels themselves can be used as traits classes in many instances.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-convex-hull&quot;&gt;2D Convex Hull&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The traits requirements have changed slightly to bring them in line with the CGAL kernels.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-convex-hull-1&quot;&gt;3D Convex Hull&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The function &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convex_hull_3&lt;/code&gt; now uses a new implementation of the
quickhull algorithm and no longer requires LEDA.&lt;/li&gt;
    &lt;li&gt;A new &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;convex_hull_incremental_3&lt;/code&gt; function based on the new
d-dimensional convex hull class is available for comparison purposes.
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Convex_hull_d, Delaunay_d&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;Two new application classes offering the calculation of d-dimensional
convex hulls and delaunay triangulations&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polygons-and-polygon-operations&quot;&gt;Polygons and Polygon Operations&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The traits class requirements have been changed.&lt;/li&gt;
    &lt;li&gt;The simplicity test has a completely new implementation.&lt;/li&gt;
    &lt;li&gt;Properties like convexity, simplicity and area can now be cached by
polygons. You need to set a flag to select this behaviour.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;planar-nef-polyhedra&quot;&gt;Planar Nef Polyhedra&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;A new class (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Nef_polyhedron_2&lt;/code&gt;) representing planar Nef polyhedra =
rectilinearly bounded points sets that are the result of binary and
topological operations starting from halfplanes.&lt;/li&gt;
    &lt;li&gt;A new package offering functions to partition planar polygons into convex and y-monotone pieces is available.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;planar-maps-and-arrangements&quot;&gt;Planar Maps and Arrangements&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;A new class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Planar_map_with_intersections_2&amp;amp;lt;Planar_map&amp;amp;gt;&lt;/code&gt; for
planar maps of possibly intersecting, possibly non-x-monotone,
possibly overlapping curves (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arrangement_2&lt;/code&gt; but without
the hierarchy tree).&lt;/li&gt;
    &lt;li&gt;I/O utilities for planar maps and arrangements for textual and
graphical streams. (It is possible to save and later reload built
planar maps or arrangements.)&lt;/li&gt;
    &lt;li&gt;New arrangement traits class for line segments and circular arcs
(&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_segment_circle_traits&amp;amp;lt;NT&amp;amp;gt;&lt;/code&gt;).&lt;/li&gt;
    &lt;li&gt;New faster traits for polylines specialized for using the LEDA
rational kernel (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arr_leda_polylines_traits&lt;/code&gt;). The LEDA
traits for segments was also made faster.&lt;/li&gt;
    &lt;li&gt;A new point location strategy (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Pm_simple_point_location&amp;amp;lt;Planar_map&amp;amp;gt;&lt;/code&gt;).&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;halfedge-data-structure&quot;&gt;Halfedge Data Structure&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The halfedge data structure has been completely revised. The new design
is more in line with the STL naming scheme and it provides a safe and
coherent type system throughout the whole design (no void* pointers
anymore), which allows for better extendibility. A user can add new
incidences in the mesh easily. The new design also uses standard
allocators with a new template parameter that has a suitable default.&lt;/li&gt;
    &lt;li&gt;The old design is still available, but its use is deprecated, see the
manual of
deprecated packages for its documentation. Reported bugs in
copying the halfedge data structure (and therefore also polyhedral
surfaces) have been fixed in both designs. Copying a list-based
representation is now based on hash maps instead of std::map and is
therefore considerably faster.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;polyhedral-surface&quot;&gt;Polyhedral Surface&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The polyhedral surface has been rewritten to work with the new
halfedge data structure design. The user level interface of the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL::Polyhedron_3&lt;/code&gt; class is almost backwards compatible with the
previous class. The exceptions are the template parameter list,
everything that relies on the flexibility of the underlying
halfedge data structure, such as a self-written facet class, and
that the distinction between supported normals and supported planes
has been removed. Only planes are supported. See the manuals for
suggestions how to handle normals instead of planes.&lt;/li&gt;
    &lt;li&gt;More example programs are provided with polyhedral surfaces,
for example, one about Euler operator and one computing a subdivision
surface given a control mesh as input.&lt;/li&gt;
    &lt;li&gt;The old design is still available for backwards compatibility and to
support older compiler, such as MSVC++6.0. For the polyhedral surface,
old and new design cannot be used simultaneously (they have identical
include file names and class names). The include files select
automatically the old design for MSVC++6.0 and the new design
otherwise. This automatism can be overwritten by defining appropriate
macros before the include files. The old design is selected with the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_USE_POLYHEDRON_DESIGN_ONE&lt;/code&gt; macro. The new design is selected
with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CGAL_USE_POLYHEDRON_DESIGN_TWO&lt;/code&gt; macro.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulation&quot;&gt;2D Triangulation&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The geometric traits class requirements have been changed to conform
to the new CGAL kernels.  CGAL kernel classes can be used as traits
classes for all 2D triangulations except for regular triangulations.&lt;/li&gt;
    &lt;li&gt;Dual method for regular triangulations (to build a power diagram).&lt;/li&gt;
    &lt;li&gt;Unified names and signatures for various “find_conflicts()”.
member functions in Delaunay and constrained Delaunay triangulation.&lt;/li&gt;
    &lt;li&gt;As an alternative to the simple insert() member function,
insertion of points in those triangulation can be performed using the
combination of find_conflicts() and star_hole() which eventually
allows the user to keep track of deleted faces.&lt;/li&gt;
    &lt;li&gt;More demos and examples…&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulation-1&quot;&gt;3D Triangulation&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;A new class &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_hierarchy_3&lt;/code&gt; that allows a
faster point location, and thus construction of the Delaunay triangulation.&lt;/li&gt;
    &lt;li&gt;A new method for removing a vertex from a Delaunay
triangulation that solves all degenerate cases&lt;/li&gt;
    &lt;li&gt;Running time of the usual location and insertion methods improved.&lt;/li&gt;
    &lt;li&gt;New geomview output.&lt;/li&gt;
    &lt;li&gt;Dual methods in Delaunay triangulations to draw the Voronoi diagram.&lt;/li&gt;
    &lt;li&gt;Traits classes requirements have been modified&lt;/li&gt;
    &lt;li&gt;The kernel can be used directly as a traits class (except for regular triangulation)&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;insert&lt;/code&gt; methods in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Triangulation_data_structure&lt;/code&gt; have a new interface.&lt;/li&gt;
    &lt;li&gt;More demos and examples…&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-alpha-shapes&quot;&gt;3D Alpha Shapes&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;A new class (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Alpha_shapes_3&lt;/code&gt;) that computes Alpha shapes of point sets in 3D is available.&lt;/li&gt;
    &lt;li&gt;The traits requirements for matrix search and minimum quadrilaterals have been changed
to bring them in line with the CGAL kernels.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;pointset2&quot;&gt;Point_set_2&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Now independent from LEDA and based on the CGAL Delaunay triangulation.&lt;/li&gt;
    &lt;li&gt;Traits class requirements adapted to new kernel concept.&lt;/li&gt;
    &lt;li&gt;Function template versions of the provided query operations are available.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;support-library&quot;&gt;Support Library&lt;/h3&gt;

  &lt;h4 id=&quot;general&quot;&gt;General&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;In_place_list&lt;/code&gt; has a new third template parameter
(with a suitable default) for an STL-compliant allocator.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Unique_hash_map&lt;/code&gt; is a new support class.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Union_find&lt;/code&gt; is a new support class.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;number-types&quot;&gt;Number types:&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Lazy_exact_nt&amp;amp;lt;NT&amp;amp;gt;&lt;/code&gt; is a new number type wrapper to speed up exact number types.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MP_Float&lt;/code&gt; is a new multiprecision floating point number type. It can do exact additions,
subtractions and multiplications over floating point values.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;geomviewstream&quot;&gt;&lt;tt&gt;Geomview_stream&lt;/tt&gt;&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;Geomview version 1.8.1 is now required.&lt;/li&gt;
    &lt;li&gt;no need to have a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.geomview&lt;/code&gt; file anymore.&lt;/li&gt;
    &lt;li&gt;new output operators for triangulations.&lt;/li&gt;
    &lt;li&gt;new output operators for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ray_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Line_2&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ray_3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Line_3&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Sphere_3&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;various new manipulators…&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h4 id=&quot;window-stream&quot;&gt;Window stream&lt;/h4&gt;
  &lt;ul&gt;
    &lt;li&gt;In cooperation with Algorithmic Solutions, GmBH (distributors of
the LEDA library), we can now offer a visualization package
downloadable in binary form that supports visualization on a ported
version of the LEDA window lib.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ ACMSM</title>
   <link href="http://www.cgal.org/2001/06/01/cgalacmsm/"/>
   <updated>2001-06-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2001/06/01/cgalacmsm</id>
   <content type="html">
&lt;p&gt;Kurt Mehlhorn and Susan Hert recently conducted a short course at the &lt;a href=&quot;http://www.engin.umich.edu/dept/meam/deslab/cadcam/ACMSM/&quot;&gt;2001 ACM Solid Modeling Symposium&lt;/a&gt; entitiled “Programming Support for Geometric Algorithms, Data Structures, and Exact Computation” (also known as “Implementing Geometric Algorithms - LEDA and CGAL”). &lt;a href=&quot;/Tutorials/solid_modeling_01.ps.gz&quot;&gt;PostScript&lt;/a&gt; and &lt;a href=&quot;/Tutorials/solid_modeling_01.pdf&quot;&gt;PDF&lt;/a&gt; versions of the slides are available here.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 2.2 released</title>
   <link href="http://www.cgal.org/2000/10/01/cgal-22/"/>
   <updated>2000-10-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2000/10/01/cgal-22</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-2.2&quot;&gt;Download CGAL-2.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 2.2 differs from &lt;a href=&quot;../../../../2000/01/01/cgal-21&quot;&gt;CGAL 2.1&lt;/a&gt; in the platforms that are supported and
in functionality:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;supported-platforms&quot;&gt;Supported platforms&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The KAI compiler (4.0) on Solaris 5.8&lt;/li&gt;
    &lt;li&gt;Borland C++ (5.5)&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;There is a new, non-reference-counted kernel, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Simple_cartesian&lt;/code&gt;. Because
reference counting is not used, and thus coordinates are stored within a
class, debugging is easier using this kernel.  This kernel can also be
faster in some cases than the reference-counted &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cartesian kernel&lt;/code&gt;.&lt;/li&gt;
    &lt;li&gt;A generator for ``random’’ simple polygons is now available.&lt;/li&gt;
    &lt;li&gt;In directory demo/Robustness, programs that demonstrate typical robustness
problems in geometric computing are presented along with the solutions to
these problems that CGAL provides.&lt;/li&gt;
    &lt;li&gt;The binary operations on polygons (union, intersection …) have been
removed. Those operations were not documented in the previous release
(2.1). Arrangements can often be used as a substitute.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;new-optimisation-algorithms&quot;&gt;New optimisation algorithms&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Min_annulus_d&lt;/code&gt;: Algorithm for computing the smallest enclosing
annulus of points in arbitrary dimension&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Polytope_distance_d&lt;/code&gt;: Algorithm for computing the (squared)
distance between two convex polytopes in arbitrary dimension&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Width_3&lt;/code&gt;: Algorithm for computing the (squared) width of points
sets in three dimensions&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;2D Triangulations&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;There are now two triangulation data structures available in CGAL.
The new one uses a list to store the faces and allows one to
represent two-dimensional triangulations embedded in three spaces
as well as planar triangulations.&lt;/li&gt;
    &lt;li&gt;The triangulation hierarchy which allows fast location query
is now available.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations-1&quot;&gt;3D Triangulations&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Removal as well as insertions of vertices for 3D Delaunay triangulations is now possible.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;planar-maps&quot;&gt;Planar Maps&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Inifinite objects can now be included in planar maps.&lt;/li&gt;
  &lt;/ul&gt;

&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 2.1 released</title>
   <link href="http://www.cgal.org/2000/01/01/cgal-21/"/>
   <updated>2000-01-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/2000/01/01/cgal-21</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-2.1&quot;&gt;Download CGAL 2.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;CGAL 2.1 differs from &lt;a href=&quot;../../../../1999/06/01/cgal-20&quot;&gt;CGAL 2.0&lt;/a&gt; in the platforms
that are supported and in functionality:&lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

  &lt;h3 id=&quot;supported-platforms&quot;&gt;Supported platforms&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;The newest gnu compiler (2.95.2) on Sun, SGI, Linux and Windows.&lt;/li&gt;
    &lt;li&gt;The Microsoft Visual C++ compiler, version 6.&lt;/li&gt;
    &lt;li&gt;The mips CC compiler version 7.3 under Irix.&lt;/li&gt;
    &lt;li&gt;Support for the old g++ compiler (2.8) and for mips CC 7.2 has been dropped.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;general&quot;&gt;General&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Added support for GeoWin visualization library. LEDA is required.&lt;/li&gt;
    &lt;li&gt;Added support for the CLN number type together with CGAL.&lt;/li&gt;
    &lt;li&gt;Min_quadrilateral optimisations have been added. These are algorithms to
compute the minimum enclosing rectangle/parallelogram (arbitrary
orientation) and the minimum enclosing strip of a convex point set.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;alpha-shapes-and-weighted-alpha-shapes-in-2d&quot;&gt;Alpha shapes and weighted alpha shapes in 2D.&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Alpha shapes are a generalization of the convex hull of a point set.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;arrangements-in-2d&quot;&gt;Arrangements in 2D.&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Arrangements are related to and based on planar maps.
The major difference between the two is that curves are allowed to
intersect in the case of arrangements.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations&quot;&gt;2D Triangulations&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Extensions to triangulations in 2D.  Constrained triangulations are now
dynamic: they support insertions of new constraint as well as removal of
existing constraints.  There are also constrained Delaunay triangulations.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-triangulations-1&quot;&gt;3D Triangulations&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;Both Delaunay triangulations and regular triangulations have been added.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;h3 id=&quot;d-point-set&quot;&gt;2D Point Set&lt;/h3&gt;
  &lt;ul&gt;
    &lt;li&gt;A new package for 2d range search operations, Delaunay triangulation, nearest neighbor queries.
This package requires LEDA to be installed.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL @ SoCG'99</title>
   <link href="http://www.cgal.org/1999/08/01/cgalsocg/"/>
   <updated>1999-08-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/1999/08/01/cgalsocg</id>
   <content type="html">
&lt;p&gt;A tutorial on the library was presented at SoCG’99. The &lt;a href=&quot;/Tutorials/Tutorial_SCG99.tar.gz&quot;&gt;slides and example files&lt;/a&gt; are available here.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 2.0 released</title>
   <link href="http://www.cgal.org/1999/06/01/cgal-20/"/>
   <updated>1999-06-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/1999/06/01/cgal-20</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-2.0&quot;&gt;Download CGAL-2.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main difference from &lt;a href=&quot;../../../../1999/01/01/cgal-12&quot;&gt;CGAL 1.2&lt;/a&gt; is the
introduction of namespaces: namespace &lt;code&gt;std::&lt;/code&gt; for code from
the standard library and namespace &lt;code&gt;CGAL::&lt;/code&gt; for the CGAL library.
&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 1.2 released</title>
   <link href="http://www.cgal.org/1999/01/01/cgal-12/"/>
   <updated>1999-01-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/1999/01/01/cgal-12</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-1.2&quot;&gt;Download CGAL-1.2&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Additions to &lt;a href=&quot;../../../../1998/07/01/cgal-11&quot;&gt;CGAL 1.1&lt;/a&gt; include: &lt;/p&gt;

&lt;div class=&quot;product-detail-info&quot;&gt;

  &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;
  &lt;ul&gt;
    &lt;li&gt;Topological map&lt;/li&gt;
    &lt;li&gt;Planar map overlay&lt;/li&gt;
    &lt;li&gt;Regular and constrained triangulations&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 1.1 released</title>
   <link href="http://www.cgal.org/1998/07/01/cgal-11/"/>
   <updated>1998-07-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/1998/07/01/cgal-11</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-1.1&quot;&gt;Download CGAL-1.1&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Additions to &lt;a href=&quot;../../../../1998/04/01/cgal-10&quot;&gt;CGAL 1.0&lt;/a&gt; include:

&lt;div class=&quot;product-detail-info&quot;&gt;

    &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;
    &lt;ul&gt;
      &lt;li&gt;3D intersections&lt;/li&gt;
      &lt;li&gt;kD points&lt;/li&gt;
      &lt;li&gt;3D convex hull&lt;/li&gt;
      &lt;li&gt;kD smallest enclosing sphere&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 1.0 released</title>
   <link href="http://www.cgal.org/1998/04/01/cgal-10/"/>
   <updated>1998-04-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/1998/04/01/cgal-10</id>
   <content type="html">
&lt;p&gt;&lt;i class=&quot;glyphicon glyphicon-download&quot;&gt;&lt;/i&gt;
&lt;a href=&quot;https://github.com/CGAL/cgal/releases/tag/releases%2FCGAL-1.0&quot;&gt;Download CGAL-1.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Additions to &lt;a href=&quot;../../../../1997/06/01/cgal-09&quot;&gt;CGAL 0.9&lt;/a&gt; include:

&lt;div class=&quot;product-detail-info&quot;&gt;

    &lt;h2 id=&quot;changelog&quot;&gt;Changelog&lt;/h2&gt;

    &lt;ul&gt;
      &lt;li&gt;Polyhedral surfaces&lt;/li&gt;
      &lt;li&gt;Halfedge Data Structure&lt;/li&gt;
      &lt;li&gt;Planar maps&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>CGAL 0.9 released</title>
   <link href="http://www.cgal.org/1997/06/01/cgal-09/"/>
   <updated>1997-06-01T00:00:00+00:00</updated>
   <id>http://www.cgal.org/1997/06/01/cgal-09</id>
   <content type="html">
&lt;p&gt;Initial (beta) release of the CGAL library.&lt;/p&gt;
</content>
 </entry>
 
 
</feed>
